/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.quwan.beebee.entity.user;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-02-03")
public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable, Comparable<User> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField U_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("uName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NICKER_FIELD_DESC = new org.apache.thrift.protocol.TField("nicker", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ADD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("addTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LOGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LOGIN_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("loginIp", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DEVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField RELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("relay", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField USE_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("useDuration", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("head", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField INTEGRAL_FIELD_DESC = new org.apache.thrift.protocol.TField("integral", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField INVITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inviteId", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField PRAISE_FIELD_DESC = new org.apache.thrift.protocol.TField("praise", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField PLAT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("platType", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField PLATU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("platuId", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField OPEN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("openId", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField UNION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unionId", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField REFRESH_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("refreshToken", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField EXPIRATION_FIELD_DESC = new org.apache.thrift.protocol.TField("expiration", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField TODAY_SIGN_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("todaySignIn", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField SIGN_IN_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("signInDays", org.apache.thrift.protocol.TType.I32, (short)33);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserTupleSchemeFactory();

  public int id; // required
  public java.lang.String pwd; // required
  public java.lang.String uName; // required
  public java.lang.String email; // required
  public java.lang.String mobile; // required
  public java.lang.String nicker; // required
  public java.lang.String addTime; // required
  public java.lang.String loginTime; // required
  public java.lang.String loginIp; // required
  public java.lang.String deviceId; // required
  public int deviceType; // required
  public int age; // optional
  public int sex; // optional
  public java.lang.String region; // optional
  public int comment; // optional
  public int collection; // optional
  public int relay; // optional
  public int useDuration; // optional
  public java.lang.String birthday; // optional
  public java.lang.String head; // optional
  public int integral; // optional
  public int inviteId; // optional
  public int praise; // optional
  public java.lang.String platType; // optional
  public java.lang.String platuId; // optional
  public java.lang.String openId; // optional
  public java.lang.String unionId; // optional
  public java.lang.String accessToken; // optional
  public java.lang.String refreshToken; // required
  public java.lang.String expiration; // required
  public java.lang.String signature; // optional
  public int todaySignIn; // optional
  public int signInDays; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PWD((short)2, "pwd"),
    U_NAME((short)3, "uName"),
    EMAIL((short)4, "email"),
    MOBILE((short)5, "mobile"),
    NICKER((short)6, "nicker"),
    ADD_TIME((short)7, "addTime"),
    LOGIN_TIME((short)8, "loginTime"),
    LOGIN_IP((short)9, "loginIp"),
    DEVICE_ID((short)10, "deviceId"),
    DEVICE_TYPE((short)11, "deviceType"),
    AGE((short)12, "age"),
    SEX((short)13, "sex"),
    REGION((short)14, "region"),
    COMMENT((short)15, "comment"),
    COLLECTION((short)16, "collection"),
    RELAY((short)17, "relay"),
    USE_DURATION((short)18, "useDuration"),
    BIRTHDAY((short)19, "birthday"),
    HEAD((short)20, "head"),
    INTEGRAL((short)21, "integral"),
    INVITE_ID((short)22, "inviteId"),
    PRAISE((short)23, "praise"),
    PLAT_TYPE((short)24, "platType"),
    PLATU_ID((short)25, "platuId"),
    OPEN_ID((short)26, "openId"),
    UNION_ID((short)27, "unionId"),
    ACCESS_TOKEN((short)28, "accessToken"),
    REFRESH_TOKEN((short)29, "refreshToken"),
    EXPIRATION((short)30, "expiration"),
    SIGNATURE((short)31, "signature"),
    TODAY_SIGN_IN((short)32, "todaySignIn"),
    SIGN_IN_DAYS((short)33, "signInDays");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PWD
          return PWD;
        case 3: // U_NAME
          return U_NAME;
        case 4: // EMAIL
          return EMAIL;
        case 5: // MOBILE
          return MOBILE;
        case 6: // NICKER
          return NICKER;
        case 7: // ADD_TIME
          return ADD_TIME;
        case 8: // LOGIN_TIME
          return LOGIN_TIME;
        case 9: // LOGIN_IP
          return LOGIN_IP;
        case 10: // DEVICE_ID
          return DEVICE_ID;
        case 11: // DEVICE_TYPE
          return DEVICE_TYPE;
        case 12: // AGE
          return AGE;
        case 13: // SEX
          return SEX;
        case 14: // REGION
          return REGION;
        case 15: // COMMENT
          return COMMENT;
        case 16: // COLLECTION
          return COLLECTION;
        case 17: // RELAY
          return RELAY;
        case 18: // USE_DURATION
          return USE_DURATION;
        case 19: // BIRTHDAY
          return BIRTHDAY;
        case 20: // HEAD
          return HEAD;
        case 21: // INTEGRAL
          return INTEGRAL;
        case 22: // INVITE_ID
          return INVITE_ID;
        case 23: // PRAISE
          return PRAISE;
        case 24: // PLAT_TYPE
          return PLAT_TYPE;
        case 25: // PLATU_ID
          return PLATU_ID;
        case 26: // OPEN_ID
          return OPEN_ID;
        case 27: // UNION_ID
          return UNION_ID;
        case 28: // ACCESS_TOKEN
          return ACCESS_TOKEN;
        case 29: // REFRESH_TOKEN
          return REFRESH_TOKEN;
        case 30: // EXPIRATION
          return EXPIRATION;
        case 31: // SIGNATURE
          return SIGNATURE;
        case 32: // TODAY_SIGN_IN
          return TODAY_SIGN_IN;
        case 33: // SIGN_IN_DAYS
          return SIGN_IN_DAYS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DEVICETYPE_ISSET_ID = 1;
  private static final int __AGE_ISSET_ID = 2;
  private static final int __SEX_ISSET_ID = 3;
  private static final int __COMMENT_ISSET_ID = 4;
  private static final int __COLLECTION_ISSET_ID = 5;
  private static final int __RELAY_ISSET_ID = 6;
  private static final int __USEDURATION_ISSET_ID = 7;
  private static final int __INTEGRAL_ISSET_ID = 8;
  private static final int __INVITEID_ISSET_ID = 9;
  private static final int __PRAISE_ISSET_ID = 10;
  private static final int __TODAYSIGNIN_ISSET_ID = 11;
  private static final int __SIGNINDAYS_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AGE,_Fields.SEX,_Fields.REGION,_Fields.COMMENT,_Fields.COLLECTION,_Fields.RELAY,_Fields.USE_DURATION,_Fields.BIRTHDAY,_Fields.HEAD,_Fields.INTEGRAL,_Fields.INVITE_ID,_Fields.PRAISE,_Fields.PLAT_TYPE,_Fields.PLATU_ID,_Fields.OPEN_ID,_Fields.UNION_ID,_Fields.ACCESS_TOKEN,_Fields.SIGNATURE,_Fields.TODAY_SIGN_IN,_Fields.SIGN_IN_DAYS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.U_NAME, new org.apache.thrift.meta_data.FieldMetaData("uName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICKER, new org.apache.thrift.meta_data.FieldMetaData("nicker", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADD_TIME, new org.apache.thrift.meta_data.FieldMetaData("addTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("loginTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_IP, new org.apache.thrift.meta_data.FieldMetaData("loginIp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("deviceType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RELAY, new org.apache.thrift.meta_data.FieldMetaData("relay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USE_DURATION, new org.apache.thrift.meta_data.FieldMetaData("useDuration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HEAD, new org.apache.thrift.meta_data.FieldMetaData("head", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTEGRAL, new org.apache.thrift.meta_data.FieldMetaData("integral", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INVITE_ID, new org.apache.thrift.meta_data.FieldMetaData("inviteId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRAISE, new org.apache.thrift.meta_data.FieldMetaData("praise", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("platType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATU_ID, new org.apache.thrift.meta_data.FieldMetaData("platuId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPEN_ID, new org.apache.thrift.meta_data.FieldMetaData("openId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNION_ID, new org.apache.thrift.meta_data.FieldMetaData("unionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFRESH_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("refreshToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRATION, new org.apache.thrift.meta_data.FieldMetaData("expiration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TODAY_SIGN_IN, new org.apache.thrift.meta_data.FieldMetaData("todaySignIn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIGN_IN_DAYS, new org.apache.thrift.meta_data.FieldMetaData("signInDays", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
  }

  public User(
    int id,
    java.lang.String pwd,
    java.lang.String uName,
    java.lang.String email,
    java.lang.String mobile,
    java.lang.String nicker,
    java.lang.String addTime,
    java.lang.String loginTime,
    java.lang.String loginIp,
    java.lang.String deviceId,
    int deviceType,
    java.lang.String refreshToken,
    java.lang.String expiration)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.pwd = pwd;
    this.uName = uName;
    this.email = email;
    this.mobile = mobile;
    this.nicker = nicker;
    this.addTime = addTime;
    this.loginTime = loginTime;
    this.loginIp = loginIp;
    this.deviceId = deviceId;
    this.deviceType = deviceType;
    setDeviceTypeIsSet(true);
    this.refreshToken = refreshToken;
    this.expiration = expiration;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetPwd()) {
      this.pwd = other.pwd;
    }
    if (other.isSetUName()) {
      this.uName = other.uName;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetNicker()) {
      this.nicker = other.nicker;
    }
    if (other.isSetAddTime()) {
      this.addTime = other.addTime;
    }
    if (other.isSetLoginTime()) {
      this.loginTime = other.loginTime;
    }
    if (other.isSetLoginIp()) {
      this.loginIp = other.loginIp;
    }
    if (other.isSetDeviceId()) {
      this.deviceId = other.deviceId;
    }
    this.deviceType = other.deviceType;
    this.age = other.age;
    this.sex = other.sex;
    if (other.isSetRegion()) {
      this.region = other.region;
    }
    this.comment = other.comment;
    this.collection = other.collection;
    this.relay = other.relay;
    this.useDuration = other.useDuration;
    if (other.isSetBirthday()) {
      this.birthday = other.birthday;
    }
    if (other.isSetHead()) {
      this.head = other.head;
    }
    this.integral = other.integral;
    this.inviteId = other.inviteId;
    this.praise = other.praise;
    if (other.isSetPlatType()) {
      this.platType = other.platType;
    }
    if (other.isSetPlatuId()) {
      this.platuId = other.platuId;
    }
    if (other.isSetOpenId()) {
      this.openId = other.openId;
    }
    if (other.isSetUnionId()) {
      this.unionId = other.unionId;
    }
    if (other.isSetAccessToken()) {
      this.accessToken = other.accessToken;
    }
    if (other.isSetRefreshToken()) {
      this.refreshToken = other.refreshToken;
    }
    if (other.isSetExpiration()) {
      this.expiration = other.expiration;
    }
    if (other.isSetSignature()) {
      this.signature = other.signature;
    }
    this.todaySignIn = other.todaySignIn;
    this.signInDays = other.signInDays;
  }

  public User deepCopy() {
    return new User(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.pwd = null;
    this.uName = null;
    this.email = null;
    this.mobile = null;
    this.nicker = null;
    this.addTime = null;
    this.loginTime = null;
    this.loginIp = null;
    this.deviceId = null;
    setDeviceTypeIsSet(false);
    this.deviceType = 0;
    setAgeIsSet(false);
    this.age = 0;
    setSexIsSet(false);
    this.sex = 0;
    this.region = null;
    setCommentIsSet(false);
    this.comment = 0;
    setCollectionIsSet(false);
    this.collection = 0;
    setRelayIsSet(false);
    this.relay = 0;
    setUseDurationIsSet(false);
    this.useDuration = 0;
    this.birthday = null;
    this.head = null;
    setIntegralIsSet(false);
    this.integral = 0;
    setInviteIdIsSet(false);
    this.inviteId = 0;
    setPraiseIsSet(false);
    this.praise = 0;
    this.platType = null;
    this.platuId = null;
    this.openId = null;
    this.unionId = null;
    this.accessToken = null;
    this.refreshToken = null;
    this.expiration = null;
    this.signature = null;
    setTodaySignInIsSet(false);
    this.todaySignIn = 0;
    setSignInDaysIsSet(false);
    this.signInDays = 0;
  }

  public int getId() {
    return this.id;
  }

  public User setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getPwd() {
    return this.pwd;
  }

  public User setPwd(java.lang.String pwd) {
    this.pwd = pwd;
    return this;
  }

  public void unsetPwd() {
    this.pwd = null;
  }

  /** Returns true if field pwd is set (has been assigned a value) and false otherwise */
  public boolean isSetPwd() {
    return this.pwd != null;
  }

  public void setPwdIsSet(boolean value) {
    if (!value) {
      this.pwd = null;
    }
  }

  public java.lang.String getUName() {
    return this.uName;
  }

  public User setUName(java.lang.String uName) {
    this.uName = uName;
    return this;
  }

  public void unsetUName() {
    this.uName = null;
  }

  /** Returns true if field uName is set (has been assigned a value) and false otherwise */
  public boolean isSetUName() {
    return this.uName != null;
  }

  public void setUNameIsSet(boolean value) {
    if (!value) {
      this.uName = null;
    }
  }

  public java.lang.String getEmail() {
    return this.email;
  }

  public User setEmail(java.lang.String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public java.lang.String getMobile() {
    return this.mobile;
  }

  public User setMobile(java.lang.String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public java.lang.String getNicker() {
    return this.nicker;
  }

  public User setNicker(java.lang.String nicker) {
    this.nicker = nicker;
    return this;
  }

  public void unsetNicker() {
    this.nicker = null;
  }

  /** Returns true if field nicker is set (has been assigned a value) and false otherwise */
  public boolean isSetNicker() {
    return this.nicker != null;
  }

  public void setNickerIsSet(boolean value) {
    if (!value) {
      this.nicker = null;
    }
  }

  public java.lang.String getAddTime() {
    return this.addTime;
  }

  public User setAddTime(java.lang.String addTime) {
    this.addTime = addTime;
    return this;
  }

  public void unsetAddTime() {
    this.addTime = null;
  }

  /** Returns true if field addTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAddTime() {
    return this.addTime != null;
  }

  public void setAddTimeIsSet(boolean value) {
    if (!value) {
      this.addTime = null;
    }
  }

  public java.lang.String getLoginTime() {
    return this.loginTime;
  }

  public User setLoginTime(java.lang.String loginTime) {
    this.loginTime = loginTime;
    return this;
  }

  public void unsetLoginTime() {
    this.loginTime = null;
  }

  /** Returns true if field loginTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginTime() {
    return this.loginTime != null;
  }

  public void setLoginTimeIsSet(boolean value) {
    if (!value) {
      this.loginTime = null;
    }
  }

  public java.lang.String getLoginIp() {
    return this.loginIp;
  }

  public User setLoginIp(java.lang.String loginIp) {
    this.loginIp = loginIp;
    return this;
  }

  public void unsetLoginIp() {
    this.loginIp = null;
  }

  /** Returns true if field loginIp is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginIp() {
    return this.loginIp != null;
  }

  public void setLoginIpIsSet(boolean value) {
    if (!value) {
      this.loginIp = null;
    }
  }

  public java.lang.String getDeviceId() {
    return this.deviceId;
  }

  public User setDeviceId(java.lang.String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  public void unsetDeviceId() {
    this.deviceId = null;
  }

  /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceId() {
    return this.deviceId != null;
  }

  public void setDeviceIdIsSet(boolean value) {
    if (!value) {
      this.deviceId = null;
    }
  }

  public int getDeviceType() {
    return this.deviceType;
  }

  public User setDeviceType(int deviceType) {
    this.deviceType = deviceType;
    setDeviceTypeIsSet(true);
    return this;
  }

  public void unsetDeviceType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEVICETYPE_ISSET_ID);
  }

  /** Returns true if field deviceType is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEVICETYPE_ISSET_ID);
  }

  public void setDeviceTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEVICETYPE_ISSET_ID, value);
  }

  public int getAge() {
    return this.age;
  }

  public User setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public int getSex() {
    return this.sex;
  }

  public User setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public java.lang.String getRegion() {
    return this.region;
  }

  public User setRegion(java.lang.String region) {
    this.region = region;
    return this;
  }

  public void unsetRegion() {
    this.region = null;
  }

  /** Returns true if field region is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion() {
    return this.region != null;
  }

  public void setRegionIsSet(boolean value) {
    if (!value) {
      this.region = null;
    }
  }

  public int getComment() {
    return this.comment;
  }

  public User setComment(int comment) {
    this.comment = comment;
    setCommentIsSet(true);
    return this;
  }

  public void unsetComment() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMENT_ISSET_ID);
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMENT_ISSET_ID);
  }

  public void setCommentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMENT_ISSET_ID, value);
  }

  public int getCollection() {
    return this.collection;
  }

  public User setCollection(int collection) {
    this.collection = collection;
    setCollectionIsSet(true);
    return this;
  }

  public void unsetCollection() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLLECTION_ISSET_ID);
  }

  /** Returns true if field collection is set (has been assigned a value) and false otherwise */
  public boolean isSetCollection() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLLECTION_ISSET_ID);
  }

  public void setCollectionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLLECTION_ISSET_ID, value);
  }

  public int getRelay() {
    return this.relay;
  }

  public User setRelay(int relay) {
    this.relay = relay;
    setRelayIsSet(true);
    return this;
  }

  public void unsetRelay() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RELAY_ISSET_ID);
  }

  /** Returns true if field relay is set (has been assigned a value) and false otherwise */
  public boolean isSetRelay() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RELAY_ISSET_ID);
  }

  public void setRelayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RELAY_ISSET_ID, value);
  }

  public int getUseDuration() {
    return this.useDuration;
  }

  public User setUseDuration(int useDuration) {
    this.useDuration = useDuration;
    setUseDurationIsSet(true);
    return this;
  }

  public void unsetUseDuration() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USEDURATION_ISSET_ID);
  }

  /** Returns true if field useDuration is set (has been assigned a value) and false otherwise */
  public boolean isSetUseDuration() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USEDURATION_ISSET_ID);
  }

  public void setUseDurationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USEDURATION_ISSET_ID, value);
  }

  public java.lang.String getBirthday() {
    return this.birthday;
  }

  public User setBirthday(java.lang.String birthday) {
    this.birthday = birthday;
    return this;
  }

  public void unsetBirthday() {
    this.birthday = null;
  }

  /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return this.birthday != null;
  }

  public void setBirthdayIsSet(boolean value) {
    if (!value) {
      this.birthday = null;
    }
  }

  public java.lang.String getHead() {
    return this.head;
  }

  public User setHead(java.lang.String head) {
    this.head = head;
    return this;
  }

  public void unsetHead() {
    this.head = null;
  }

  /** Returns true if field head is set (has been assigned a value) and false otherwise */
  public boolean isSetHead() {
    return this.head != null;
  }

  public void setHeadIsSet(boolean value) {
    if (!value) {
      this.head = null;
    }
  }

  public int getIntegral() {
    return this.integral;
  }

  public User setIntegral(int integral) {
    this.integral = integral;
    setIntegralIsSet(true);
    return this;
  }

  public void unsetIntegral() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTEGRAL_ISSET_ID);
  }

  /** Returns true if field integral is set (has been assigned a value) and false otherwise */
  public boolean isSetIntegral() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTEGRAL_ISSET_ID);
  }

  public void setIntegralIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTEGRAL_ISSET_ID, value);
  }

  public int getInviteId() {
    return this.inviteId;
  }

  public User setInviteId(int inviteId) {
    this.inviteId = inviteId;
    setInviteIdIsSet(true);
    return this;
  }

  public void unsetInviteId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INVITEID_ISSET_ID);
  }

  /** Returns true if field inviteId is set (has been assigned a value) and false otherwise */
  public boolean isSetInviteId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INVITEID_ISSET_ID);
  }

  public void setInviteIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INVITEID_ISSET_ID, value);
  }

  public int getPraise() {
    return this.praise;
  }

  public User setPraise(int praise) {
    this.praise = praise;
    setPraiseIsSet(true);
    return this;
  }

  public void unsetPraise() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRAISE_ISSET_ID);
  }

  /** Returns true if field praise is set (has been assigned a value) and false otherwise */
  public boolean isSetPraise() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRAISE_ISSET_ID);
  }

  public void setPraiseIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRAISE_ISSET_ID, value);
  }

  public java.lang.String getPlatType() {
    return this.platType;
  }

  public User setPlatType(java.lang.String platType) {
    this.platType = platType;
    return this;
  }

  public void unsetPlatType() {
    this.platType = null;
  }

  /** Returns true if field platType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatType() {
    return this.platType != null;
  }

  public void setPlatTypeIsSet(boolean value) {
    if (!value) {
      this.platType = null;
    }
  }

  public java.lang.String getPlatuId() {
    return this.platuId;
  }

  public User setPlatuId(java.lang.String platuId) {
    this.platuId = platuId;
    return this;
  }

  public void unsetPlatuId() {
    this.platuId = null;
  }

  /** Returns true if field platuId is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatuId() {
    return this.platuId != null;
  }

  public void setPlatuIdIsSet(boolean value) {
    if (!value) {
      this.platuId = null;
    }
  }

  public java.lang.String getOpenId() {
    return this.openId;
  }

  public User setOpenId(java.lang.String openId) {
    this.openId = openId;
    return this;
  }

  public void unsetOpenId() {
    this.openId = null;
  }

  /** Returns true if field openId is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenId() {
    return this.openId != null;
  }

  public void setOpenIdIsSet(boolean value) {
    if (!value) {
      this.openId = null;
    }
  }

  public java.lang.String getUnionId() {
    return this.unionId;
  }

  public User setUnionId(java.lang.String unionId) {
    this.unionId = unionId;
    return this;
  }

  public void unsetUnionId() {
    this.unionId = null;
  }

  /** Returns true if field unionId is set (has been assigned a value) and false otherwise */
  public boolean isSetUnionId() {
    return this.unionId != null;
  }

  public void setUnionIdIsSet(boolean value) {
    if (!value) {
      this.unionId = null;
    }
  }

  public java.lang.String getAccessToken() {
    return this.accessToken;
  }

  public User setAccessToken(java.lang.String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  public void unsetAccessToken() {
    this.accessToken = null;
  }

  /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessToken() {
    return this.accessToken != null;
  }

  public void setAccessTokenIsSet(boolean value) {
    if (!value) {
      this.accessToken = null;
    }
  }

  public java.lang.String getRefreshToken() {
    return this.refreshToken;
  }

  public User setRefreshToken(java.lang.String refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

  public void unsetRefreshToken() {
    this.refreshToken = null;
  }

  /** Returns true if field refreshToken is set (has been assigned a value) and false otherwise */
  public boolean isSetRefreshToken() {
    return this.refreshToken != null;
  }

  public void setRefreshTokenIsSet(boolean value) {
    if (!value) {
      this.refreshToken = null;
    }
  }

  public java.lang.String getExpiration() {
    return this.expiration;
  }

  public User setExpiration(java.lang.String expiration) {
    this.expiration = expiration;
    return this;
  }

  public void unsetExpiration() {
    this.expiration = null;
  }

  /** Returns true if field expiration is set (has been assigned a value) and false otherwise */
  public boolean isSetExpiration() {
    return this.expiration != null;
  }

  public void setExpirationIsSet(boolean value) {
    if (!value) {
      this.expiration = null;
    }
  }

  public java.lang.String getSignature() {
    return this.signature;
  }

  public User setSignature(java.lang.String signature) {
    this.signature = signature;
    return this;
  }

  public void unsetSignature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return this.signature != null;
  }

  public void setSignatureIsSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  public int getTodaySignIn() {
    return this.todaySignIn;
  }

  public User setTodaySignIn(int todaySignIn) {
    this.todaySignIn = todaySignIn;
    setTodaySignInIsSet(true);
    return this;
  }

  public void unsetTodaySignIn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TODAYSIGNIN_ISSET_ID);
  }

  /** Returns true if field todaySignIn is set (has been assigned a value) and false otherwise */
  public boolean isSetTodaySignIn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TODAYSIGNIN_ISSET_ID);
  }

  public void setTodaySignInIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TODAYSIGNIN_ISSET_ID, value);
  }

  public int getSignInDays() {
    return this.signInDays;
  }

  public User setSignInDays(int signInDays) {
    this.signInDays = signInDays;
    setSignInDaysIsSet(true);
    return this;
  }

  public void unsetSignInDays() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIGNINDAYS_ISSET_ID);
  }

  /** Returns true if field signInDays is set (has been assigned a value) and false otherwise */
  public boolean isSetSignInDays() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIGNINDAYS_ISSET_ID);
  }

  public void setSignInDaysIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIGNINDAYS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case PWD:
      if (value == null) {
        unsetPwd();
      } else {
        setPwd((java.lang.String)value);
      }
      break;

    case U_NAME:
      if (value == null) {
        unsetUName();
      } else {
        setUName((java.lang.String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((java.lang.String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((java.lang.String)value);
      }
      break;

    case NICKER:
      if (value == null) {
        unsetNicker();
      } else {
        setNicker((java.lang.String)value);
      }
      break;

    case ADD_TIME:
      if (value == null) {
        unsetAddTime();
      } else {
        setAddTime((java.lang.String)value);
      }
      break;

    case LOGIN_TIME:
      if (value == null) {
        unsetLoginTime();
      } else {
        setLoginTime((java.lang.String)value);
      }
      break;

    case LOGIN_IP:
      if (value == null) {
        unsetLoginIp();
      } else {
        setLoginIp((java.lang.String)value);
      }
      break;

    case DEVICE_ID:
      if (value == null) {
        unsetDeviceId();
      } else {
        setDeviceId((java.lang.String)value);
      }
      break;

    case DEVICE_TYPE:
      if (value == null) {
        unsetDeviceType();
      } else {
        setDeviceType((java.lang.Integer)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((java.lang.Integer)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((java.lang.Integer)value);
      }
      break;

    case REGION:
      if (value == null) {
        unsetRegion();
      } else {
        setRegion((java.lang.String)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((java.lang.Integer)value);
      }
      break;

    case COLLECTION:
      if (value == null) {
        unsetCollection();
      } else {
        setCollection((java.lang.Integer)value);
      }
      break;

    case RELAY:
      if (value == null) {
        unsetRelay();
      } else {
        setRelay((java.lang.Integer)value);
      }
      break;

    case USE_DURATION:
      if (value == null) {
        unsetUseDuration();
      } else {
        setUseDuration((java.lang.Integer)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((java.lang.String)value);
      }
      break;

    case HEAD:
      if (value == null) {
        unsetHead();
      } else {
        setHead((java.lang.String)value);
      }
      break;

    case INTEGRAL:
      if (value == null) {
        unsetIntegral();
      } else {
        setIntegral((java.lang.Integer)value);
      }
      break;

    case INVITE_ID:
      if (value == null) {
        unsetInviteId();
      } else {
        setInviteId((java.lang.Integer)value);
      }
      break;

    case PRAISE:
      if (value == null) {
        unsetPraise();
      } else {
        setPraise((java.lang.Integer)value);
      }
      break;

    case PLAT_TYPE:
      if (value == null) {
        unsetPlatType();
      } else {
        setPlatType((java.lang.String)value);
      }
      break;

    case PLATU_ID:
      if (value == null) {
        unsetPlatuId();
      } else {
        setPlatuId((java.lang.String)value);
      }
      break;

    case OPEN_ID:
      if (value == null) {
        unsetOpenId();
      } else {
        setOpenId((java.lang.String)value);
      }
      break;

    case UNION_ID:
      if (value == null) {
        unsetUnionId();
      } else {
        setUnionId((java.lang.String)value);
      }
      break;

    case ACCESS_TOKEN:
      if (value == null) {
        unsetAccessToken();
      } else {
        setAccessToken((java.lang.String)value);
      }
      break;

    case REFRESH_TOKEN:
      if (value == null) {
        unsetRefreshToken();
      } else {
        setRefreshToken((java.lang.String)value);
      }
      break;

    case EXPIRATION:
      if (value == null) {
        unsetExpiration();
      } else {
        setExpiration((java.lang.String)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((java.lang.String)value);
      }
      break;

    case TODAY_SIGN_IN:
      if (value == null) {
        unsetTodaySignIn();
      } else {
        setTodaySignIn((java.lang.Integer)value);
      }
      break;

    case SIGN_IN_DAYS:
      if (value == null) {
        unsetSignInDays();
      } else {
        setSignInDays((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PWD:
      return getPwd();

    case U_NAME:
      return getUName();

    case EMAIL:
      return getEmail();

    case MOBILE:
      return getMobile();

    case NICKER:
      return getNicker();

    case ADD_TIME:
      return getAddTime();

    case LOGIN_TIME:
      return getLoginTime();

    case LOGIN_IP:
      return getLoginIp();

    case DEVICE_ID:
      return getDeviceId();

    case DEVICE_TYPE:
      return getDeviceType();

    case AGE:
      return getAge();

    case SEX:
      return getSex();

    case REGION:
      return getRegion();

    case COMMENT:
      return getComment();

    case COLLECTION:
      return getCollection();

    case RELAY:
      return getRelay();

    case USE_DURATION:
      return getUseDuration();

    case BIRTHDAY:
      return getBirthday();

    case HEAD:
      return getHead();

    case INTEGRAL:
      return getIntegral();

    case INVITE_ID:
      return getInviteId();

    case PRAISE:
      return getPraise();

    case PLAT_TYPE:
      return getPlatType();

    case PLATU_ID:
      return getPlatuId();

    case OPEN_ID:
      return getOpenId();

    case UNION_ID:
      return getUnionId();

    case ACCESS_TOKEN:
      return getAccessToken();

    case REFRESH_TOKEN:
      return getRefreshToken();

    case EXPIRATION:
      return getExpiration();

    case SIGNATURE:
      return getSignature();

    case TODAY_SIGN_IN:
      return getTodaySignIn();

    case SIGN_IN_DAYS:
      return getSignInDays();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PWD:
      return isSetPwd();
    case U_NAME:
      return isSetUName();
    case EMAIL:
      return isSetEmail();
    case MOBILE:
      return isSetMobile();
    case NICKER:
      return isSetNicker();
    case ADD_TIME:
      return isSetAddTime();
    case LOGIN_TIME:
      return isSetLoginTime();
    case LOGIN_IP:
      return isSetLoginIp();
    case DEVICE_ID:
      return isSetDeviceId();
    case DEVICE_TYPE:
      return isSetDeviceType();
    case AGE:
      return isSetAge();
    case SEX:
      return isSetSex();
    case REGION:
      return isSetRegion();
    case COMMENT:
      return isSetComment();
    case COLLECTION:
      return isSetCollection();
    case RELAY:
      return isSetRelay();
    case USE_DURATION:
      return isSetUseDuration();
    case BIRTHDAY:
      return isSetBirthday();
    case HEAD:
      return isSetHead();
    case INTEGRAL:
      return isSetIntegral();
    case INVITE_ID:
      return isSetInviteId();
    case PRAISE:
      return isSetPraise();
    case PLAT_TYPE:
      return isSetPlatType();
    case PLATU_ID:
      return isSetPlatuId();
    case OPEN_ID:
      return isSetOpenId();
    case UNION_ID:
      return isSetUnionId();
    case ACCESS_TOKEN:
      return isSetAccessToken();
    case REFRESH_TOKEN:
      return isSetRefreshToken();
    case EXPIRATION:
      return isSetExpiration();
    case SIGNATURE:
      return isSetSignature();
    case TODAY_SIGN_IN:
      return isSetTodaySignIn();
    case SIGN_IN_DAYS:
      return isSetSignInDays();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_pwd = true && this.isSetPwd();
    boolean that_present_pwd = true && that.isSetPwd();
    if (this_present_pwd || that_present_pwd) {
      if (!(this_present_pwd && that_present_pwd))
        return false;
      if (!this.pwd.equals(that.pwd))
        return false;
    }

    boolean this_present_uName = true && this.isSetUName();
    boolean that_present_uName = true && that.isSetUName();
    if (this_present_uName || that_present_uName) {
      if (!(this_present_uName && that_present_uName))
        return false;
      if (!this.uName.equals(that.uName))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_nicker = true && this.isSetNicker();
    boolean that_present_nicker = true && that.isSetNicker();
    if (this_present_nicker || that_present_nicker) {
      if (!(this_present_nicker && that_present_nicker))
        return false;
      if (!this.nicker.equals(that.nicker))
        return false;
    }

    boolean this_present_addTime = true && this.isSetAddTime();
    boolean that_present_addTime = true && that.isSetAddTime();
    if (this_present_addTime || that_present_addTime) {
      if (!(this_present_addTime && that_present_addTime))
        return false;
      if (!this.addTime.equals(that.addTime))
        return false;
    }

    boolean this_present_loginTime = true && this.isSetLoginTime();
    boolean that_present_loginTime = true && that.isSetLoginTime();
    if (this_present_loginTime || that_present_loginTime) {
      if (!(this_present_loginTime && that_present_loginTime))
        return false;
      if (!this.loginTime.equals(that.loginTime))
        return false;
    }

    boolean this_present_loginIp = true && this.isSetLoginIp();
    boolean that_present_loginIp = true && that.isSetLoginIp();
    if (this_present_loginIp || that_present_loginIp) {
      if (!(this_present_loginIp && that_present_loginIp))
        return false;
      if (!this.loginIp.equals(that.loginIp))
        return false;
    }

    boolean this_present_deviceId = true && this.isSetDeviceId();
    boolean that_present_deviceId = true && that.isSetDeviceId();
    if (this_present_deviceId || that_present_deviceId) {
      if (!(this_present_deviceId && that_present_deviceId))
        return false;
      if (!this.deviceId.equals(that.deviceId))
        return false;
    }

    boolean this_present_deviceType = true;
    boolean that_present_deviceType = true;
    if (this_present_deviceType || that_present_deviceType) {
      if (!(this_present_deviceType && that_present_deviceType))
        return false;
      if (this.deviceType != that.deviceType)
        return false;
    }

    boolean this_present_age = true && this.isSetAge();
    boolean that_present_age = true && that.isSetAge();
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_region = true && this.isSetRegion();
    boolean that_present_region = true && that.isSetRegion();
    if (this_present_region || that_present_region) {
      if (!(this_present_region && that_present_region))
        return false;
      if (!this.region.equals(that.region))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (this.comment != that.comment)
        return false;
    }

    boolean this_present_collection = true && this.isSetCollection();
    boolean that_present_collection = true && that.isSetCollection();
    if (this_present_collection || that_present_collection) {
      if (!(this_present_collection && that_present_collection))
        return false;
      if (this.collection != that.collection)
        return false;
    }

    boolean this_present_relay = true && this.isSetRelay();
    boolean that_present_relay = true && that.isSetRelay();
    if (this_present_relay || that_present_relay) {
      if (!(this_present_relay && that_present_relay))
        return false;
      if (this.relay != that.relay)
        return false;
    }

    boolean this_present_useDuration = true && this.isSetUseDuration();
    boolean that_present_useDuration = true && that.isSetUseDuration();
    if (this_present_useDuration || that_present_useDuration) {
      if (!(this_present_useDuration && that_present_useDuration))
        return false;
      if (this.useDuration != that.useDuration)
        return false;
    }

    boolean this_present_birthday = true && this.isSetBirthday();
    boolean that_present_birthday = true && that.isSetBirthday();
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (!this.birthday.equals(that.birthday))
        return false;
    }

    boolean this_present_head = true && this.isSetHead();
    boolean that_present_head = true && that.isSetHead();
    if (this_present_head || that_present_head) {
      if (!(this_present_head && that_present_head))
        return false;
      if (!this.head.equals(that.head))
        return false;
    }

    boolean this_present_integral = true && this.isSetIntegral();
    boolean that_present_integral = true && that.isSetIntegral();
    if (this_present_integral || that_present_integral) {
      if (!(this_present_integral && that_present_integral))
        return false;
      if (this.integral != that.integral)
        return false;
    }

    boolean this_present_inviteId = true && this.isSetInviteId();
    boolean that_present_inviteId = true && that.isSetInviteId();
    if (this_present_inviteId || that_present_inviteId) {
      if (!(this_present_inviteId && that_present_inviteId))
        return false;
      if (this.inviteId != that.inviteId)
        return false;
    }

    boolean this_present_praise = true && this.isSetPraise();
    boolean that_present_praise = true && that.isSetPraise();
    if (this_present_praise || that_present_praise) {
      if (!(this_present_praise && that_present_praise))
        return false;
      if (this.praise != that.praise)
        return false;
    }

    boolean this_present_platType = true && this.isSetPlatType();
    boolean that_present_platType = true && that.isSetPlatType();
    if (this_present_platType || that_present_platType) {
      if (!(this_present_platType && that_present_platType))
        return false;
      if (!this.platType.equals(that.platType))
        return false;
    }

    boolean this_present_platuId = true && this.isSetPlatuId();
    boolean that_present_platuId = true && that.isSetPlatuId();
    if (this_present_platuId || that_present_platuId) {
      if (!(this_present_platuId && that_present_platuId))
        return false;
      if (!this.platuId.equals(that.platuId))
        return false;
    }

    boolean this_present_openId = true && this.isSetOpenId();
    boolean that_present_openId = true && that.isSetOpenId();
    if (this_present_openId || that_present_openId) {
      if (!(this_present_openId && that_present_openId))
        return false;
      if (!this.openId.equals(that.openId))
        return false;
    }

    boolean this_present_unionId = true && this.isSetUnionId();
    boolean that_present_unionId = true && that.isSetUnionId();
    if (this_present_unionId || that_present_unionId) {
      if (!(this_present_unionId && that_present_unionId))
        return false;
      if (!this.unionId.equals(that.unionId))
        return false;
    }

    boolean this_present_accessToken = true && this.isSetAccessToken();
    boolean that_present_accessToken = true && that.isSetAccessToken();
    if (this_present_accessToken || that_present_accessToken) {
      if (!(this_present_accessToken && that_present_accessToken))
        return false;
      if (!this.accessToken.equals(that.accessToken))
        return false;
    }

    boolean this_present_refreshToken = true && this.isSetRefreshToken();
    boolean that_present_refreshToken = true && that.isSetRefreshToken();
    if (this_present_refreshToken || that_present_refreshToken) {
      if (!(this_present_refreshToken && that_present_refreshToken))
        return false;
      if (!this.refreshToken.equals(that.refreshToken))
        return false;
    }

    boolean this_present_expiration = true && this.isSetExpiration();
    boolean that_present_expiration = true && that.isSetExpiration();
    if (this_present_expiration || that_present_expiration) {
      if (!(this_present_expiration && that_present_expiration))
        return false;
      if (!this.expiration.equals(that.expiration))
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    boolean this_present_todaySignIn = true && this.isSetTodaySignIn();
    boolean that_present_todaySignIn = true && that.isSetTodaySignIn();
    if (this_present_todaySignIn || that_present_todaySignIn) {
      if (!(this_present_todaySignIn && that_present_todaySignIn))
        return false;
      if (this.todaySignIn != that.todaySignIn)
        return false;
    }

    boolean this_present_signInDays = true && this.isSetSignInDays();
    boolean that_present_signInDays = true && that.isSetSignInDays();
    if (this_present_signInDays || that_present_signInDays) {
      if (!(this_present_signInDays && that_present_signInDays))
        return false;
      if (this.signInDays != that.signInDays)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetPwd()) ? 131071 : 524287);
    if (isSetPwd())
      hashCode = hashCode * 8191 + pwd.hashCode();

    hashCode = hashCode * 8191 + ((isSetUName()) ? 131071 : 524287);
    if (isSetUName())
      hashCode = hashCode * 8191 + uName.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
    if (isSetEmail())
      hashCode = hashCode * 8191 + email.hashCode();

    hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
    if (isSetMobile())
      hashCode = hashCode * 8191 + mobile.hashCode();

    hashCode = hashCode * 8191 + ((isSetNicker()) ? 131071 : 524287);
    if (isSetNicker())
      hashCode = hashCode * 8191 + nicker.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddTime()) ? 131071 : 524287);
    if (isSetAddTime())
      hashCode = hashCode * 8191 + addTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoginTime()) ? 131071 : 524287);
    if (isSetLoginTime())
      hashCode = hashCode * 8191 + loginTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoginIp()) ? 131071 : 524287);
    if (isSetLoginIp())
      hashCode = hashCode * 8191 + loginIp.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeviceId()) ? 131071 : 524287);
    if (isSetDeviceId())
      hashCode = hashCode * 8191 + deviceId.hashCode();

    hashCode = hashCode * 8191 + deviceType;

    hashCode = hashCode * 8191 + ((isSetAge()) ? 131071 : 524287);
    if (isSetAge())
      hashCode = hashCode * 8191 + age;

    hashCode = hashCode * 8191 + ((isSetSex()) ? 131071 : 524287);
    if (isSetSex())
      hashCode = hashCode * 8191 + sex;

    hashCode = hashCode * 8191 + ((isSetRegion()) ? 131071 : 524287);
    if (isSetRegion())
      hashCode = hashCode * 8191 + region.hashCode();

    hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
    if (isSetComment())
      hashCode = hashCode * 8191 + comment;

    hashCode = hashCode * 8191 + ((isSetCollection()) ? 131071 : 524287);
    if (isSetCollection())
      hashCode = hashCode * 8191 + collection;

    hashCode = hashCode * 8191 + ((isSetRelay()) ? 131071 : 524287);
    if (isSetRelay())
      hashCode = hashCode * 8191 + relay;

    hashCode = hashCode * 8191 + ((isSetUseDuration()) ? 131071 : 524287);
    if (isSetUseDuration())
      hashCode = hashCode * 8191 + useDuration;

    hashCode = hashCode * 8191 + ((isSetBirthday()) ? 131071 : 524287);
    if (isSetBirthday())
      hashCode = hashCode * 8191 + birthday.hashCode();

    hashCode = hashCode * 8191 + ((isSetHead()) ? 131071 : 524287);
    if (isSetHead())
      hashCode = hashCode * 8191 + head.hashCode();

    hashCode = hashCode * 8191 + ((isSetIntegral()) ? 131071 : 524287);
    if (isSetIntegral())
      hashCode = hashCode * 8191 + integral;

    hashCode = hashCode * 8191 + ((isSetInviteId()) ? 131071 : 524287);
    if (isSetInviteId())
      hashCode = hashCode * 8191 + inviteId;

    hashCode = hashCode * 8191 + ((isSetPraise()) ? 131071 : 524287);
    if (isSetPraise())
      hashCode = hashCode * 8191 + praise;

    hashCode = hashCode * 8191 + ((isSetPlatType()) ? 131071 : 524287);
    if (isSetPlatType())
      hashCode = hashCode * 8191 + platType.hashCode();

    hashCode = hashCode * 8191 + ((isSetPlatuId()) ? 131071 : 524287);
    if (isSetPlatuId())
      hashCode = hashCode * 8191 + platuId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpenId()) ? 131071 : 524287);
    if (isSetOpenId())
      hashCode = hashCode * 8191 + openId.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnionId()) ? 131071 : 524287);
    if (isSetUnionId())
      hashCode = hashCode * 8191 + unionId.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
    if (isSetAccessToken())
      hashCode = hashCode * 8191 + accessToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetRefreshToken()) ? 131071 : 524287);
    if (isSetRefreshToken())
      hashCode = hashCode * 8191 + refreshToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetExpiration()) ? 131071 : 524287);
    if (isSetExpiration())
      hashCode = hashCode * 8191 + expiration.hashCode();

    hashCode = hashCode * 8191 + ((isSetSignature()) ? 131071 : 524287);
    if (isSetSignature())
      hashCode = hashCode * 8191 + signature.hashCode();

    hashCode = hashCode * 8191 + ((isSetTodaySignIn()) ? 131071 : 524287);
    if (isSetTodaySignIn())
      hashCode = hashCode * 8191 + todaySignIn;

    hashCode = hashCode * 8191 + ((isSetSignInDays()) ? 131071 : 524287);
    if (isSetSignInDays())
      hashCode = hashCode * 8191 + signInDays;

    return hashCode;
  }

  @Override
  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPwd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUName()).compareTo(other.isSetUName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uName, other.uName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNicker()).compareTo(other.isSetNicker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNicker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nicker, other.nicker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAddTime()).compareTo(other.isSetAddTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addTime, other.addTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLoginTime()).compareTo(other.isSetLoginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginTime, other.loginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLoginIp()).compareTo(other.isSetLoginIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginIp, other.loginIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeviceType()).compareTo(other.isSetDeviceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceType, other.deviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegion()).compareTo(other.isSetRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, other.region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCollection()).compareTo(other.isSetCollection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, other.collection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRelay()).compareTo(other.isSetRelay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relay, other.relay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUseDuration()).compareTo(other.isSetUseDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useDuration, other.useDuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBirthday()).compareTo(other.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, other.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHead()).compareTo(other.isSetHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head, other.head);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIntegral()).compareTo(other.isSetIntegral());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntegral()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.integral, other.integral);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInviteId()).compareTo(other.isSetInviteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInviteId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inviteId, other.inviteId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPraise()).compareTo(other.isSetPraise());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPraise()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.praise, other.praise);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPlatType()).compareTo(other.isSetPlatType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platType, other.platType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPlatuId()).compareTo(other.isSetPlatuId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatuId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platuId, other.platuId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpenId()).compareTo(other.isSetOpenId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openId, other.openId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnionId()).compareTo(other.isSetUnionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionId, other.unionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRefreshToken()).compareTo(other.isSetRefreshToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefreshToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refreshToken, other.refreshToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExpiration()).compareTo(other.isSetExpiration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpiration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expiration, other.expiration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSignature()).compareTo(other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTodaySignIn()).compareTo(other.isSetTodaySignIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTodaySignIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todaySignIn, other.todaySignIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSignInDays()).compareTo(other.isSetSignInDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignInDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signInDays, other.signInDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("User(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pwd:");
    if (this.pwd == null) {
      sb.append("null");
    } else {
      sb.append(this.pwd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uName:");
    if (this.uName == null) {
      sb.append("null");
    } else {
      sb.append(this.uName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nicker:");
    if (this.nicker == null) {
      sb.append("null");
    } else {
      sb.append(this.nicker);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addTime:");
    if (this.addTime == null) {
      sb.append("null");
    } else {
      sb.append(this.addTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginTime:");
    if (this.loginTime == null) {
      sb.append("null");
    } else {
      sb.append(this.loginTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginIp:");
    if (this.loginIp == null) {
      sb.append("null");
    } else {
      sb.append(this.loginIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceId:");
    if (this.deviceId == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceType:");
    sb.append(this.deviceType);
    first = false;
    if (isSetAge()) {
      if (!first) sb.append(", ");
      sb.append("age:");
      sb.append(this.age);
      first = false;
    }
    if (isSetSex()) {
      if (!first) sb.append(", ");
      sb.append("sex:");
      sb.append(this.sex);
      first = false;
    }
    if (isSetRegion()) {
      if (!first) sb.append(", ");
      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
    }
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      sb.append(this.comment);
      first = false;
    }
    if (isSetCollection()) {
      if (!first) sb.append(", ");
      sb.append("collection:");
      sb.append(this.collection);
      first = false;
    }
    if (isSetRelay()) {
      if (!first) sb.append(", ");
      sb.append("relay:");
      sb.append(this.relay);
      first = false;
    }
    if (isSetUseDuration()) {
      if (!first) sb.append(", ");
      sb.append("useDuration:");
      sb.append(this.useDuration);
      first = false;
    }
    if (isSetBirthday()) {
      if (!first) sb.append(", ");
      sb.append("birthday:");
      if (this.birthday == null) {
        sb.append("null");
      } else {
        sb.append(this.birthday);
      }
      first = false;
    }
    if (isSetHead()) {
      if (!first) sb.append(", ");
      sb.append("head:");
      if (this.head == null) {
        sb.append("null");
      } else {
        sb.append(this.head);
      }
      first = false;
    }
    if (isSetIntegral()) {
      if (!first) sb.append(", ");
      sb.append("integral:");
      sb.append(this.integral);
      first = false;
    }
    if (isSetInviteId()) {
      if (!first) sb.append(", ");
      sb.append("inviteId:");
      sb.append(this.inviteId);
      first = false;
    }
    if (isSetPraise()) {
      if (!first) sb.append(", ");
      sb.append("praise:");
      sb.append(this.praise);
      first = false;
    }
    if (isSetPlatType()) {
      if (!first) sb.append(", ");
      sb.append("platType:");
      if (this.platType == null) {
        sb.append("null");
      } else {
        sb.append(this.platType);
      }
      first = false;
    }
    if (isSetPlatuId()) {
      if (!first) sb.append(", ");
      sb.append("platuId:");
      if (this.platuId == null) {
        sb.append("null");
      } else {
        sb.append(this.platuId);
      }
      first = false;
    }
    if (isSetOpenId()) {
      if (!first) sb.append(", ");
      sb.append("openId:");
      if (this.openId == null) {
        sb.append("null");
      } else {
        sb.append(this.openId);
      }
      first = false;
    }
    if (isSetUnionId()) {
      if (!first) sb.append(", ");
      sb.append("unionId:");
      if (this.unionId == null) {
        sb.append("null");
      } else {
        sb.append(this.unionId);
      }
      first = false;
    }
    if (isSetAccessToken()) {
      if (!first) sb.append(", ");
      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("refreshToken:");
    if (this.refreshToken == null) {
      sb.append("null");
    } else {
      sb.append(this.refreshToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expiration:");
    if (this.expiration == null) {
      sb.append("null");
    } else {
      sb.append(this.expiration);
    }
    first = false;
    if (isSetSignature()) {
      if (!first) sb.append(", ");
      sb.append("signature:");
      if (this.signature == null) {
        sb.append("null");
      } else {
        sb.append(this.signature);
      }
      first = false;
    }
    if (isSetTodaySignIn()) {
      if (!first) sb.append(", ");
      sb.append("todaySignIn:");
      sb.append(this.todaySignIn);
      first = false;
    }
    if (isSetSignInDays()) {
      if (!first) sb.append(", ");
      sb.append("signInDays:");
      sb.append(this.signInDays);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (pwd == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pwd' was not present! Struct: " + toString());
    }
    if (uName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uName' was not present! Struct: " + toString());
    }
    if (email == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'email' was not present! Struct: " + toString());
    }
    if (mobile == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mobile' was not present! Struct: " + toString());
    }
    if (nicker == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nicker' was not present! Struct: " + toString());
    }
    if (addTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'addTime' was not present! Struct: " + toString());
    }
    if (loginTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'loginTime' was not present! Struct: " + toString());
    }
    if (loginIp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'loginIp' was not present! Struct: " + toString());
    }
    if (deviceId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deviceId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'deviceType' because it's a primitive and you chose the non-beans generator.
    if (refreshToken == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'refreshToken' was not present! Struct: " + toString());
    }
    if (expiration == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'expiration' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends org.apache.thrift.scheme.StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pwd = iprot.readString();
              struct.setPwdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // U_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uName = iprot.readString();
              struct.setUNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NICKER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nicker = iprot.readString();
              struct.setNickerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ADD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addTime = iprot.readString();
              struct.setAddTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOGIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginTime = iprot.readString();
              struct.setLoginTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOGIN_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginIp = iprot.readString();
              struct.setLoginIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceId = iprot.readString();
              struct.setDeviceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deviceType = iprot.readI32();
              struct.setDeviceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.region = iprot.readString();
              struct.setRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.comment = iprot.readI32();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // COLLECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.collection = iprot.readI32();
              struct.setCollectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relay = iprot.readI32();
              struct.setRelayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // USE_DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.useDuration = iprot.readI32();
              struct.setUseDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.birthday = iprot.readString();
              struct.setBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.head = iprot.readString();
              struct.setHeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // INTEGRAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.integral = iprot.readI32();
              struct.setIntegralIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // INVITE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.inviteId = iprot.readI32();
              struct.setInviteIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PRAISE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.praise = iprot.readI32();
              struct.setPraiseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PLAT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platType = iprot.readString();
              struct.setPlatTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PLATU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platuId = iprot.readString();
              struct.setPlatuIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // OPEN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openId = iprot.readString();
              struct.setOpenIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // UNION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unionId = iprot.readString();
              struct.setUnionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // ACCESS_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessToken = iprot.readString();
              struct.setAccessTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // REFRESH_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refreshToken = iprot.readString();
              struct.setRefreshTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // EXPIRATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expiration = iprot.readString();
              struct.setExpirationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readString();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // TODAY_SIGN_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.todaySignIn = iprot.readI32();
              struct.setTodaySignInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // SIGN_IN_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.signInDays = iprot.readI32();
              struct.setSignInDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDeviceType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'deviceType' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.pwd != null) {
        oprot.writeFieldBegin(PWD_FIELD_DESC);
        oprot.writeString(struct.pwd);
        oprot.writeFieldEnd();
      }
      if (struct.uName != null) {
        oprot.writeFieldBegin(U_NAME_FIELD_DESC);
        oprot.writeString(struct.uName);
        oprot.writeFieldEnd();
      }
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.nicker != null) {
        oprot.writeFieldBegin(NICKER_FIELD_DESC);
        oprot.writeString(struct.nicker);
        oprot.writeFieldEnd();
      }
      if (struct.addTime != null) {
        oprot.writeFieldBegin(ADD_TIME_FIELD_DESC);
        oprot.writeString(struct.addTime);
        oprot.writeFieldEnd();
      }
      if (struct.loginTime != null) {
        oprot.writeFieldBegin(LOGIN_TIME_FIELD_DESC);
        oprot.writeString(struct.loginTime);
        oprot.writeFieldEnd();
      }
      if (struct.loginIp != null) {
        oprot.writeFieldBegin(LOGIN_IP_FIELD_DESC);
        oprot.writeString(struct.loginIp);
        oprot.writeFieldEnd();
      }
      if (struct.deviceId != null) {
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeString(struct.deviceId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEVICE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.deviceType);
      oprot.writeFieldEnd();
      if (struct.isSetAge()) {
        oprot.writeFieldBegin(AGE_FIELD_DESC);
        oprot.writeI32(struct.age);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSex()) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeI32(struct.sex);
        oprot.writeFieldEnd();
      }
      if (struct.region != null) {
        if (struct.isSetRegion()) {
          oprot.writeFieldBegin(REGION_FIELD_DESC);
          oprot.writeString(struct.region);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetComment()) {
        oprot.writeFieldBegin(COMMENT_FIELD_DESC);
        oprot.writeI32(struct.comment);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCollection()) {
        oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
        oprot.writeI32(struct.collection);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRelay()) {
        oprot.writeFieldBegin(RELAY_FIELD_DESC);
        oprot.writeI32(struct.relay);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUseDuration()) {
        oprot.writeFieldBegin(USE_DURATION_FIELD_DESC);
        oprot.writeI32(struct.useDuration);
        oprot.writeFieldEnd();
      }
      if (struct.birthday != null) {
        if (struct.isSetBirthday()) {
          oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
          oprot.writeString(struct.birthday);
          oprot.writeFieldEnd();
        }
      }
      if (struct.head != null) {
        if (struct.isSetHead()) {
          oprot.writeFieldBegin(HEAD_FIELD_DESC);
          oprot.writeString(struct.head);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIntegral()) {
        oprot.writeFieldBegin(INTEGRAL_FIELD_DESC);
        oprot.writeI32(struct.integral);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInviteId()) {
        oprot.writeFieldBegin(INVITE_ID_FIELD_DESC);
        oprot.writeI32(struct.inviteId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPraise()) {
        oprot.writeFieldBegin(PRAISE_FIELD_DESC);
        oprot.writeI32(struct.praise);
        oprot.writeFieldEnd();
      }
      if (struct.platType != null) {
        if (struct.isSetPlatType()) {
          oprot.writeFieldBegin(PLAT_TYPE_FIELD_DESC);
          oprot.writeString(struct.platType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.platuId != null) {
        if (struct.isSetPlatuId()) {
          oprot.writeFieldBegin(PLATU_ID_FIELD_DESC);
          oprot.writeString(struct.platuId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.openId != null) {
        if (struct.isSetOpenId()) {
          oprot.writeFieldBegin(OPEN_ID_FIELD_DESC);
          oprot.writeString(struct.openId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.unionId != null) {
        if (struct.isSetUnionId()) {
          oprot.writeFieldBegin(UNION_ID_FIELD_DESC);
          oprot.writeString(struct.unionId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.accessToken != null) {
        if (struct.isSetAccessToken()) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.refreshToken != null) {
        oprot.writeFieldBegin(REFRESH_TOKEN_FIELD_DESC);
        oprot.writeString(struct.refreshToken);
        oprot.writeFieldEnd();
      }
      if (struct.expiration != null) {
        oprot.writeFieldBegin(EXPIRATION_FIELD_DESC);
        oprot.writeString(struct.expiration);
        oprot.writeFieldEnd();
      }
      if (struct.signature != null) {
        if (struct.isSetSignature()) {
          oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
          oprot.writeString(struct.signature);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTodaySignIn()) {
        oprot.writeFieldBegin(TODAY_SIGN_IN_FIELD_DESC);
        oprot.writeI32(struct.todaySignIn);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSignInDays()) {
        oprot.writeFieldBegin(SIGN_IN_DAYS_FIELD_DESC);
        oprot.writeI32(struct.signInDays);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends org.apache.thrift.scheme.TupleScheme<User> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeString(struct.pwd);
      oprot.writeString(struct.uName);
      oprot.writeString(struct.email);
      oprot.writeString(struct.mobile);
      oprot.writeString(struct.nicker);
      oprot.writeString(struct.addTime);
      oprot.writeString(struct.loginTime);
      oprot.writeString(struct.loginIp);
      oprot.writeString(struct.deviceId);
      oprot.writeI32(struct.deviceType);
      oprot.writeString(struct.refreshToken);
      oprot.writeString(struct.expiration);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAge()) {
        optionals.set(0);
      }
      if (struct.isSetSex()) {
        optionals.set(1);
      }
      if (struct.isSetRegion()) {
        optionals.set(2);
      }
      if (struct.isSetComment()) {
        optionals.set(3);
      }
      if (struct.isSetCollection()) {
        optionals.set(4);
      }
      if (struct.isSetRelay()) {
        optionals.set(5);
      }
      if (struct.isSetUseDuration()) {
        optionals.set(6);
      }
      if (struct.isSetBirthday()) {
        optionals.set(7);
      }
      if (struct.isSetHead()) {
        optionals.set(8);
      }
      if (struct.isSetIntegral()) {
        optionals.set(9);
      }
      if (struct.isSetInviteId()) {
        optionals.set(10);
      }
      if (struct.isSetPraise()) {
        optionals.set(11);
      }
      if (struct.isSetPlatType()) {
        optionals.set(12);
      }
      if (struct.isSetPlatuId()) {
        optionals.set(13);
      }
      if (struct.isSetOpenId()) {
        optionals.set(14);
      }
      if (struct.isSetUnionId()) {
        optionals.set(15);
      }
      if (struct.isSetAccessToken()) {
        optionals.set(16);
      }
      if (struct.isSetSignature()) {
        optionals.set(17);
      }
      if (struct.isSetTodaySignIn()) {
        optionals.set(18);
      }
      if (struct.isSetSignInDays()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex);
      }
      if (struct.isSetRegion()) {
        oprot.writeString(struct.region);
      }
      if (struct.isSetComment()) {
        oprot.writeI32(struct.comment);
      }
      if (struct.isSetCollection()) {
        oprot.writeI32(struct.collection);
      }
      if (struct.isSetRelay()) {
        oprot.writeI32(struct.relay);
      }
      if (struct.isSetUseDuration()) {
        oprot.writeI32(struct.useDuration);
      }
      if (struct.isSetBirthday()) {
        oprot.writeString(struct.birthday);
      }
      if (struct.isSetHead()) {
        oprot.writeString(struct.head);
      }
      if (struct.isSetIntegral()) {
        oprot.writeI32(struct.integral);
      }
      if (struct.isSetInviteId()) {
        oprot.writeI32(struct.inviteId);
      }
      if (struct.isSetPraise()) {
        oprot.writeI32(struct.praise);
      }
      if (struct.isSetPlatType()) {
        oprot.writeString(struct.platType);
      }
      if (struct.isSetPlatuId()) {
        oprot.writeString(struct.platuId);
      }
      if (struct.isSetOpenId()) {
        oprot.writeString(struct.openId);
      }
      if (struct.isSetUnionId()) {
        oprot.writeString(struct.unionId);
      }
      if (struct.isSetAccessToken()) {
        oprot.writeString(struct.accessToken);
      }
      if (struct.isSetSignature()) {
        oprot.writeString(struct.signature);
      }
      if (struct.isSetTodaySignIn()) {
        oprot.writeI32(struct.todaySignIn);
      }
      if (struct.isSetSignInDays()) {
        oprot.writeI32(struct.signInDays);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.pwd = iprot.readString();
      struct.setPwdIsSet(true);
      struct.uName = iprot.readString();
      struct.setUNameIsSet(true);
      struct.email = iprot.readString();
      struct.setEmailIsSet(true);
      struct.mobile = iprot.readString();
      struct.setMobileIsSet(true);
      struct.nicker = iprot.readString();
      struct.setNickerIsSet(true);
      struct.addTime = iprot.readString();
      struct.setAddTimeIsSet(true);
      struct.loginTime = iprot.readString();
      struct.setLoginTimeIsSet(true);
      struct.loginIp = iprot.readString();
      struct.setLoginIpIsSet(true);
      struct.deviceId = iprot.readString();
      struct.setDeviceIdIsSet(true);
      struct.deviceType = iprot.readI32();
      struct.setDeviceTypeIsSet(true);
      struct.refreshToken = iprot.readString();
      struct.setRefreshTokenIsSet(true);
      struct.expiration = iprot.readString();
      struct.setExpirationIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sex = iprot.readI32();
        struct.setSexIsSet(true);
      }
      if (incoming.get(2)) {
        struct.region = iprot.readString();
        struct.setRegionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.comment = iprot.readI32();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.collection = iprot.readI32();
        struct.setCollectionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.relay = iprot.readI32();
        struct.setRelayIsSet(true);
      }
      if (incoming.get(6)) {
        struct.useDuration = iprot.readI32();
        struct.setUseDurationIsSet(true);
      }
      if (incoming.get(7)) {
        struct.birthday = iprot.readString();
        struct.setBirthdayIsSet(true);
      }
      if (incoming.get(8)) {
        struct.head = iprot.readString();
        struct.setHeadIsSet(true);
      }
      if (incoming.get(9)) {
        struct.integral = iprot.readI32();
        struct.setIntegralIsSet(true);
      }
      if (incoming.get(10)) {
        struct.inviteId = iprot.readI32();
        struct.setInviteIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.praise = iprot.readI32();
        struct.setPraiseIsSet(true);
      }
      if (incoming.get(12)) {
        struct.platType = iprot.readString();
        struct.setPlatTypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.platuId = iprot.readString();
        struct.setPlatuIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.openId = iprot.readString();
        struct.setOpenIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.unionId = iprot.readString();
        struct.setUnionIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
      }
      if (incoming.get(17)) {
        struct.signature = iprot.readString();
        struct.setSignatureIsSet(true);
      }
      if (incoming.get(18)) {
        struct.todaySignIn = iprot.readI32();
        struct.setTodaySignInIsSet(true);
      }
      if (incoming.get(19)) {
        struct.signInDays = iprot.readI32();
        struct.setSignInDaysIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

