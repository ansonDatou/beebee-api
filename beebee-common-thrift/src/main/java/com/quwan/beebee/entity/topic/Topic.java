/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.quwan.beebee.entity.topic;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-12-20")
public class Topic implements org.apache.thrift.TBase<Topic, Topic._Fields>, java.io.Serializable, Cloneable, Comparable<Topic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Topic");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CLICK_FIELD_DESC = new org.apache.thrift.protocol.TField("click", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField RELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("relay", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PRAISE_FIELD_DESC = new org.apache.thrift.protocol.TField("praise", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField TODAY_CLICK_FIELD_DESC = new org.apache.thrift.protocol.TField("todayClick", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TODAY_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("todayComment", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField TODAY_COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("todayCollection", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField TODAY_RELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("todayRelay", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField TODAY_PRAISE_FIELD_DESC = new org.apache.thrift.protocol.TField("todayPraise", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField MALE_FIELD_DESC = new org.apache.thrift.protocol.TField("male", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField FEMALE_FIELD_DESC = new org.apache.thrift.protocol.TField("female", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField UNKNOWN_SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("unknownSex", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField ADD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("addTime", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField STOP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("stopTime", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField DEL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("delTime", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField ADD_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("addUserId", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField ADD_USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("addUserType", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField STOP_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stopUserId", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField DEL_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("delUserId", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("deleted", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("img", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField REPLIER_IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("replierIdentity", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField DEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("delType", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField MULTI_SELECT_FIELD_DESC = new org.apache.thrift.protocol.TField("multiSelect", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField UNQUALIFIED_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("unqualifiedReason", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField PUB_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("pubTime", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField TOPUB_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("topubTime", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField QUALIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("qualified", org.apache.thrift.protocol.TType.STRING, (short)36);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TopicStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TopicTupleSchemeFactory();

  public int id; // required
  public String title; // required
  public String content; // optional
  public int type; // required
  public int enable; // required
  public int click; // required
  public int comment; // required
  public int collection; // required
  public int relay; // required
  public int praise; // required
  public int todayClick; // required
  public int todayComment; // required
  public int todayCollection; // required
  public int todayRelay; // required
  public int todayPraise; // required
  public int male; // required
  public int female; // required
  public int unknownSex; // required
  public String addTime; // required
  public String stopTime; // optional
  public String delTime; // optional
  public int addUserId; // required
  public int addUserType; // required
  public int stopUserId; // required
  public int delUserId; // required
  public int deleted; // required
  public int sex; // required
  public String img; // required
  public String replierIdentity; // required
  public int delType; // required
  public int multiSelect; // required
  public int status; // required
  public String unqualifiedReason; // required
  public String pubTime; // required
  public String topubTime; // optional
  public String qualified; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    CONTENT((short)3, "content"),
    TYPE((short)4, "type"),
    ENABLE((short)5, "enable"),
    CLICK((short)6, "click"),
    COMMENT((short)7, "comment"),
    COLLECTION((short)8, "collection"),
    RELAY((short)9, "relay"),
    PRAISE((short)10, "praise"),
    TODAY_CLICK((short)11, "todayClick"),
    TODAY_COMMENT((short)12, "todayComment"),
    TODAY_COLLECTION((short)13, "todayCollection"),
    TODAY_RELAY((short)14, "todayRelay"),
    TODAY_PRAISE((short)15, "todayPraise"),
    MALE((short)16, "male"),
    FEMALE((short)17, "female"),
    UNKNOWN_SEX((short)18, "unknownSex"),
    ADD_TIME((short)19, "addTime"),
    STOP_TIME((short)20, "stopTime"),
    DEL_TIME((short)21, "delTime"),
    ADD_USER_ID((short)22, "addUserId"),
    ADD_USER_TYPE((short)23, "addUserType"),
    STOP_USER_ID((short)24, "stopUserId"),
    DEL_USER_ID((short)25, "delUserId"),
    DELETED((short)26, "deleted"),
    SEX((short)27, "sex"),
    IMG((short)28, "img"),
    REPLIER_IDENTITY((short)29, "replierIdentity"),
    DEL_TYPE((short)30, "delType"),
    MULTI_SELECT((short)31, "multiSelect"),
    STATUS((short)32, "status"),
    UNQUALIFIED_REASON((short)33, "unqualifiedReason"),
    PUB_TIME((short)34, "pubTime"),
    TOPUB_TIME((short)35, "topubTime"),
    QUALIFIED((short)36, "qualified");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // CONTENT
          return CONTENT;
        case 4: // TYPE
          return TYPE;
        case 5: // ENABLE
          return ENABLE;
        case 6: // CLICK
          return CLICK;
        case 7: // COMMENT
          return COMMENT;
        case 8: // COLLECTION
          return COLLECTION;
        case 9: // RELAY
          return RELAY;
        case 10: // PRAISE
          return PRAISE;
        case 11: // TODAY_CLICK
          return TODAY_CLICK;
        case 12: // TODAY_COMMENT
          return TODAY_COMMENT;
        case 13: // TODAY_COLLECTION
          return TODAY_COLLECTION;
        case 14: // TODAY_RELAY
          return TODAY_RELAY;
        case 15: // TODAY_PRAISE
          return TODAY_PRAISE;
        case 16: // MALE
          return MALE;
        case 17: // FEMALE
          return FEMALE;
        case 18: // UNKNOWN_SEX
          return UNKNOWN_SEX;
        case 19: // ADD_TIME
          return ADD_TIME;
        case 20: // STOP_TIME
          return STOP_TIME;
        case 21: // DEL_TIME
          return DEL_TIME;
        case 22: // ADD_USER_ID
          return ADD_USER_ID;
        case 23: // ADD_USER_TYPE
          return ADD_USER_TYPE;
        case 24: // STOP_USER_ID
          return STOP_USER_ID;
        case 25: // DEL_USER_ID
          return DEL_USER_ID;
        case 26: // DELETED
          return DELETED;
        case 27: // SEX
          return SEX;
        case 28: // IMG
          return IMG;
        case 29: // REPLIER_IDENTITY
          return REPLIER_IDENTITY;
        case 30: // DEL_TYPE
          return DEL_TYPE;
        case 31: // MULTI_SELECT
          return MULTI_SELECT;
        case 32: // STATUS
          return STATUS;
        case 33: // UNQUALIFIED_REASON
          return UNQUALIFIED_REASON;
        case 34: // PUB_TIME
          return PUB_TIME;
        case 35: // TOPUB_TIME
          return TOPUB_TIME;
        case 36: // QUALIFIED
          return QUALIFIED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __ENABLE_ISSET_ID = 2;
  private static final int __CLICK_ISSET_ID = 3;
  private static final int __COMMENT_ISSET_ID = 4;
  private static final int __COLLECTION_ISSET_ID = 5;
  private static final int __RELAY_ISSET_ID = 6;
  private static final int __PRAISE_ISSET_ID = 7;
  private static final int __TODAYCLICK_ISSET_ID = 8;
  private static final int __TODAYCOMMENT_ISSET_ID = 9;
  private static final int __TODAYCOLLECTION_ISSET_ID = 10;
  private static final int __TODAYRELAY_ISSET_ID = 11;
  private static final int __TODAYPRAISE_ISSET_ID = 12;
  private static final int __MALE_ISSET_ID = 13;
  private static final int __FEMALE_ISSET_ID = 14;
  private static final int __UNKNOWNSEX_ISSET_ID = 15;
  private static final int __ADDUSERID_ISSET_ID = 16;
  private static final int __ADDUSERTYPE_ISSET_ID = 17;
  private static final int __STOPUSERID_ISSET_ID = 18;
  private static final int __DELUSERID_ISSET_ID = 19;
  private static final int __DELETED_ISSET_ID = 20;
  private static final int __SEX_ISSET_ID = 21;
  private static final int __DELTYPE_ISSET_ID = 22;
  private static final int __MULTISELECT_ISSET_ID = 23;
  private static final int __STATUS_ISSET_ID = 24;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CONTENT, _Fields.STOP_TIME, _Fields.DEL_TIME, _Fields.TOPUB_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENABLE, new org.apache.thrift.meta_data.FieldMetaData("enable", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLICK, new org.apache.thrift.meta_data.FieldMetaData("click", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RELAY, new org.apache.thrift.meta_data.FieldMetaData("relay", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRAISE, new org.apache.thrift.meta_data.FieldMetaData("praise", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TODAY_CLICK, new org.apache.thrift.meta_data.FieldMetaData("todayClick", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TODAY_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("todayComment", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TODAY_COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("todayCollection", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TODAY_RELAY, new org.apache.thrift.meta_data.FieldMetaData("todayRelay", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TODAY_PRAISE, new org.apache.thrift.meta_data.FieldMetaData("todayPraise", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MALE, new org.apache.thrift.meta_data.FieldMetaData("male", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEMALE, new org.apache.thrift.meta_data.FieldMetaData("female", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNKNOWN_SEX, new org.apache.thrift.meta_data.FieldMetaData("unknownSex", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADD_TIME, new org.apache.thrift.meta_data.FieldMetaData("addTime", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOP_TIME, new org.apache.thrift.meta_data.FieldMetaData("stopTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEL_TIME, new org.apache.thrift.meta_data.FieldMetaData("delTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADD_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("addUserId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADD_USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("addUserType", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STOP_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("stopUserId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEL_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("delUserId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DELETED, new org.apache.thrift.meta_data.FieldMetaData("deleted", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMG, new org.apache.thrift.meta_data.FieldMetaData("img", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLIER_IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("replierIdentity", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("delType", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MULTI_SELECT, new org.apache.thrift.meta_data.FieldMetaData("multiSelect", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNQUALIFIED_REASON, new org.apache.thrift.meta_data.FieldMetaData("unqualifiedReason", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUB_TIME, new org.apache.thrift.meta_data.FieldMetaData("pubTime", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPUB_TIME, new org.apache.thrift.meta_data.FieldMetaData("topubTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUALIFIED, new org.apache.thrift.meta_data.FieldMetaData("qualified", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Topic.class, metaDataMap);
  }

  public Topic() {
  }

  public Topic(
    int id,
    String title,
    int type,
    int enable,
    int click,
    int comment,
    int collection,
    int relay,
    int praise,
    int todayClick,
    int todayComment,
    int todayCollection,
    int todayRelay,
    int todayPraise,
    int male,
    int female,
    int unknownSex,
    String addTime,
    int addUserId,
    int addUserType,
    int stopUserId,
    int delUserId,
    int deleted,
    int sex,
    String img,
    String replierIdentity,
    int delType,
    int multiSelect,
    int status,
    String unqualifiedReason,
    String pubTime,
    String qualified)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.title = title;
    this.type = type;
    setTypeIsSet(true);
    this.enable = enable;
    setEnableIsSet(true);
    this.click = click;
    setClickIsSet(true);
    this.comment = comment;
    setCommentIsSet(true);
    this.collection = collection;
    setCollectionIsSet(true);
    this.relay = relay;
    setRelayIsSet(true);
    this.praise = praise;
    setPraiseIsSet(true);
    this.todayClick = todayClick;
    setTodayClickIsSet(true);
    this.todayComment = todayComment;
    setTodayCommentIsSet(true);
    this.todayCollection = todayCollection;
    setTodayCollectionIsSet(true);
    this.todayRelay = todayRelay;
    setTodayRelayIsSet(true);
    this.todayPraise = todayPraise;
    setTodayPraiseIsSet(true);
    this.male = male;
    setMaleIsSet(true);
    this.female = female;
    setFemaleIsSet(true);
    this.unknownSex = unknownSex;
    setUnknownSexIsSet(true);
    this.addTime = addTime;
    this.addUserId = addUserId;
    setAddUserIdIsSet(true);
    this.addUserType = addUserType;
    setAddUserTypeIsSet(true);
    this.stopUserId = stopUserId;
    setStopUserIdIsSet(true);
    this.delUserId = delUserId;
    setDelUserIdIsSet(true);
    this.deleted = deleted;
    setDeletedIsSet(true);
    this.sex = sex;
    setSexIsSet(true);
    this.img = img;
    this.replierIdentity = replierIdentity;
    this.delType = delType;
    setDelTypeIsSet(true);
    this.multiSelect = multiSelect;
    setMultiSelectIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.unqualifiedReason = unqualifiedReason;
    this.pubTime = pubTime;
    this.qualified = qualified;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Topic(Topic other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.type = other.type;
    this.enable = other.enable;
    this.click = other.click;
    this.comment = other.comment;
    this.collection = other.collection;
    this.relay = other.relay;
    this.praise = other.praise;
    this.todayClick = other.todayClick;
    this.todayComment = other.todayComment;
    this.todayCollection = other.todayCollection;
    this.todayRelay = other.todayRelay;
    this.todayPraise = other.todayPraise;
    this.male = other.male;
    this.female = other.female;
    this.unknownSex = other.unknownSex;
    if (other.isSetAddTime()) {
      this.addTime = other.addTime;
    }
    if (other.isSetStopTime()) {
      this.stopTime = other.stopTime;
    }
    if (other.isSetDelTime()) {
      this.delTime = other.delTime;
    }
    this.addUserId = other.addUserId;
    this.addUserType = other.addUserType;
    this.stopUserId = other.stopUserId;
    this.delUserId = other.delUserId;
    this.deleted = other.deleted;
    this.sex = other.sex;
    if (other.isSetImg()) {
      this.img = other.img;
    }
    if (other.isSetReplierIdentity()) {
      this.replierIdentity = other.replierIdentity;
    }
    this.delType = other.delType;
    this.multiSelect = other.multiSelect;
    this.status = other.status;
    if (other.isSetUnqualifiedReason()) {
      this.unqualifiedReason = other.unqualifiedReason;
    }
    if (other.isSetPubTime()) {
      this.pubTime = other.pubTime;
    }
    if (other.isSetTopubTime()) {
      this.topubTime = other.topubTime;
    }
    if (other.isSetQualified()) {
      this.qualified = other.qualified;
    }
  }

  public Topic deepCopy() {
    return new Topic(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.title = null;
    this.content = null;
    setTypeIsSet(false);
    this.type = 0;
    setEnableIsSet(false);
    this.enable = 0;
    setClickIsSet(false);
    this.click = 0;
    setCommentIsSet(false);
    this.comment = 0;
    setCollectionIsSet(false);
    this.collection = 0;
    setRelayIsSet(false);
    this.relay = 0;
    setPraiseIsSet(false);
    this.praise = 0;
    setTodayClickIsSet(false);
    this.todayClick = 0;
    setTodayCommentIsSet(false);
    this.todayComment = 0;
    setTodayCollectionIsSet(false);
    this.todayCollection = 0;
    setTodayRelayIsSet(false);
    this.todayRelay = 0;
    setTodayPraiseIsSet(false);
    this.todayPraise = 0;
    setMaleIsSet(false);
    this.male = 0;
    setFemaleIsSet(false);
    this.female = 0;
    setUnknownSexIsSet(false);
    this.unknownSex = 0;
    this.addTime = null;
    this.stopTime = null;
    this.delTime = null;
    setAddUserIdIsSet(false);
    this.addUserId = 0;
    setAddUserTypeIsSet(false);
    this.addUserType = 0;
    setStopUserIdIsSet(false);
    this.stopUserId = 0;
    setDelUserIdIsSet(false);
    this.delUserId = 0;
    setDeletedIsSet(false);
    this.deleted = 0;
    setSexIsSet(false);
    this.sex = 0;
    this.img = null;
    this.replierIdentity = null;
    setDelTypeIsSet(false);
    this.delType = 0;
    setMultiSelectIsSet(false);
    this.multiSelect = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.unqualifiedReason = null;
    this.pubTime = null;
    this.topubTime = null;
    this.qualified = null;
  }

  public int getId() {
    return this.id;
  }

  public Topic setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public Topic setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public Topic setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public Topic setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getEnable() {
    return this.enable;
  }

  public Topic setEnable(int enable) {
    this.enable = enable;
    setEnableIsSet(true);
    return this;
  }

  public void unsetEnable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_ISSET_ID);
  }

  /** Returns true if field enable is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_ISSET_ID);
  }

  public void setEnableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_ISSET_ID, value);
  }

  public int getClick() {
    return this.click;
  }

  public Topic setClick(int click) {
    this.click = click;
    setClickIsSet(true);
    return this;
  }

  public void unsetClick() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLICK_ISSET_ID);
  }

  /** Returns true if field click is set (has been assigned a value) and false otherwise */
  public boolean isSetClick() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLICK_ISSET_ID);
  }

  public void setClickIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLICK_ISSET_ID, value);
  }

  public int getComment() {
    return this.comment;
  }

  public Topic setComment(int comment) {
    this.comment = comment;
    setCommentIsSet(true);
    return this;
  }

  public void unsetComment() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMENT_ISSET_ID);
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMENT_ISSET_ID);
  }

  public void setCommentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMENT_ISSET_ID, value);
  }

  public int getCollection() {
    return this.collection;
  }

  public Topic setCollection(int collection) {
    this.collection = collection;
    setCollectionIsSet(true);
    return this;
  }

  public void unsetCollection() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLLECTION_ISSET_ID);
  }

  /** Returns true if field collection is set (has been assigned a value) and false otherwise */
  public boolean isSetCollection() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLLECTION_ISSET_ID);
  }

  public void setCollectionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLLECTION_ISSET_ID, value);
  }

  public int getRelay() {
    return this.relay;
  }

  public Topic setRelay(int relay) {
    this.relay = relay;
    setRelayIsSet(true);
    return this;
  }

  public void unsetRelay() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RELAY_ISSET_ID);
  }

  /** Returns true if field relay is set (has been assigned a value) and false otherwise */
  public boolean isSetRelay() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RELAY_ISSET_ID);
  }

  public void setRelayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RELAY_ISSET_ID, value);
  }

  public int getPraise() {
    return this.praise;
  }

  public Topic setPraise(int praise) {
    this.praise = praise;
    setPraiseIsSet(true);
    return this;
  }

  public void unsetPraise() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRAISE_ISSET_ID);
  }

  /** Returns true if field praise is set (has been assigned a value) and false otherwise */
  public boolean isSetPraise() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRAISE_ISSET_ID);
  }

  public void setPraiseIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRAISE_ISSET_ID, value);
  }

  public int getTodayClick() {
    return this.todayClick;
  }

  public Topic setTodayClick(int todayClick) {
    this.todayClick = todayClick;
    setTodayClickIsSet(true);
    return this;
  }

  public void unsetTodayClick() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TODAYCLICK_ISSET_ID);
  }

  /** Returns true if field todayClick is set (has been assigned a value) and false otherwise */
  public boolean isSetTodayClick() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TODAYCLICK_ISSET_ID);
  }

  public void setTodayClickIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TODAYCLICK_ISSET_ID, value);
  }

  public int getTodayComment() {
    return this.todayComment;
  }

  public Topic setTodayComment(int todayComment) {
    this.todayComment = todayComment;
    setTodayCommentIsSet(true);
    return this;
  }

  public void unsetTodayComment() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TODAYCOMMENT_ISSET_ID);
  }

  /** Returns true if field todayComment is set (has been assigned a value) and false otherwise */
  public boolean isSetTodayComment() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TODAYCOMMENT_ISSET_ID);
  }

  public void setTodayCommentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TODAYCOMMENT_ISSET_ID, value);
  }

  public int getTodayCollection() {
    return this.todayCollection;
  }

  public Topic setTodayCollection(int todayCollection) {
    this.todayCollection = todayCollection;
    setTodayCollectionIsSet(true);
    return this;
  }

  public void unsetTodayCollection() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TODAYCOLLECTION_ISSET_ID);
  }

  /** Returns true if field todayCollection is set (has been assigned a value) and false otherwise */
  public boolean isSetTodayCollection() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TODAYCOLLECTION_ISSET_ID);
  }

  public void setTodayCollectionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TODAYCOLLECTION_ISSET_ID, value);
  }

  public int getTodayRelay() {
    return this.todayRelay;
  }

  public Topic setTodayRelay(int todayRelay) {
    this.todayRelay = todayRelay;
    setTodayRelayIsSet(true);
    return this;
  }

  public void unsetTodayRelay() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TODAYRELAY_ISSET_ID);
  }

  /** Returns true if field todayRelay is set (has been assigned a value) and false otherwise */
  public boolean isSetTodayRelay() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TODAYRELAY_ISSET_ID);
  }

  public void setTodayRelayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TODAYRELAY_ISSET_ID, value);
  }

  public int getTodayPraise() {
    return this.todayPraise;
  }

  public Topic setTodayPraise(int todayPraise) {
    this.todayPraise = todayPraise;
    setTodayPraiseIsSet(true);
    return this;
  }

  public void unsetTodayPraise() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TODAYPRAISE_ISSET_ID);
  }

  /** Returns true if field todayPraise is set (has been assigned a value) and false otherwise */
  public boolean isSetTodayPraise() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TODAYPRAISE_ISSET_ID);
  }

  public void setTodayPraiseIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TODAYPRAISE_ISSET_ID, value);
  }

  public int getMale() {
    return this.male;
  }

  public Topic setMale(int male) {
    this.male = male;
    setMaleIsSet(true);
    return this;
  }

  public void unsetMale() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MALE_ISSET_ID);
  }

  /** Returns true if field male is set (has been assigned a value) and false otherwise */
  public boolean isSetMale() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MALE_ISSET_ID);
  }

  public void setMaleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MALE_ISSET_ID, value);
  }

  public int getFemale() {
    return this.female;
  }

  public Topic setFemale(int female) {
    this.female = female;
    setFemaleIsSet(true);
    return this;
  }

  public void unsetFemale() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FEMALE_ISSET_ID);
  }

  /** Returns true if field female is set (has been assigned a value) and false otherwise */
  public boolean isSetFemale() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FEMALE_ISSET_ID);
  }

  public void setFemaleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FEMALE_ISSET_ID, value);
  }

  public int getUnknownSex() {
    return this.unknownSex;
  }

  public Topic setUnknownSex(int unknownSex) {
    this.unknownSex = unknownSex;
    setUnknownSexIsSet(true);
    return this;
  }

  public void unsetUnknownSex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNKNOWNSEX_ISSET_ID);
  }

  /** Returns true if field unknownSex is set (has been assigned a value) and false otherwise */
  public boolean isSetUnknownSex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNKNOWNSEX_ISSET_ID);
  }

  public void setUnknownSexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNKNOWNSEX_ISSET_ID, value);
  }

  public String getAddTime() {
    return this.addTime;
  }

  public Topic setAddTime(String addTime) {
    this.addTime = addTime;
    return this;
  }

  public void unsetAddTime() {
    this.addTime = null;
  }

  /** Returns true if field addTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAddTime() {
    return this.addTime != null;
  }

  public void setAddTimeIsSet(boolean value) {
    if (!value) {
      this.addTime = null;
    }
  }

  public String getStopTime() {
    return this.stopTime;
  }

  public Topic setStopTime(String stopTime) {
    this.stopTime = stopTime;
    return this;
  }

  public void unsetStopTime() {
    this.stopTime = null;
  }

  /** Returns true if field stopTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStopTime() {
    return this.stopTime != null;
  }

  public void setStopTimeIsSet(boolean value) {
    if (!value) {
      this.stopTime = null;
    }
  }

  public String getDelTime() {
    return this.delTime;
  }

  public Topic setDelTime(String delTime) {
    this.delTime = delTime;
    return this;
  }

  public void unsetDelTime() {
    this.delTime = null;
  }

  /** Returns true if field delTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDelTime() {
    return this.delTime != null;
  }

  public void setDelTimeIsSet(boolean value) {
    if (!value) {
      this.delTime = null;
    }
  }

  public int getAddUserId() {
    return this.addUserId;
  }

  public Topic setAddUserId(int addUserId) {
    this.addUserId = addUserId;
    setAddUserIdIsSet(true);
    return this;
  }

  public void unsetAddUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ADDUSERID_ISSET_ID);
  }

  /** Returns true if field addUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetAddUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ADDUSERID_ISSET_ID);
  }

  public void setAddUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ADDUSERID_ISSET_ID, value);
  }

  public int getAddUserType() {
    return this.addUserType;
  }

  public Topic setAddUserType(int addUserType) {
    this.addUserType = addUserType;
    setAddUserTypeIsSet(true);
    return this;
  }

  public void unsetAddUserType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ADDUSERTYPE_ISSET_ID);
  }

  /** Returns true if field addUserType is set (has been assigned a value) and false otherwise */
  public boolean isSetAddUserType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ADDUSERTYPE_ISSET_ID);
  }

  public void setAddUserTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ADDUSERTYPE_ISSET_ID, value);
  }

  public int getStopUserId() {
    return this.stopUserId;
  }

  public Topic setStopUserId(int stopUserId) {
    this.stopUserId = stopUserId;
    setStopUserIdIsSet(true);
    return this;
  }

  public void unsetStopUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STOPUSERID_ISSET_ID);
  }

  /** Returns true if field stopUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetStopUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STOPUSERID_ISSET_ID);
  }

  public void setStopUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STOPUSERID_ISSET_ID, value);
  }

  public int getDelUserId() {
    return this.delUserId;
  }

  public Topic setDelUserId(int delUserId) {
    this.delUserId = delUserId;
    setDelUserIdIsSet(true);
    return this;
  }

  public void unsetDelUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELUSERID_ISSET_ID);
  }

  /** Returns true if field delUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetDelUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELUSERID_ISSET_ID);
  }

  public void setDelUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELUSERID_ISSET_ID, value);
  }

  public int getDeleted() {
    return this.deleted;
  }

  public Topic setDeleted(int deleted) {
    this.deleted = deleted;
    setDeletedIsSet(true);
    return this;
  }

  public void unsetDeleted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  /** Returns true if field deleted is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  public void setDeletedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELETED_ISSET_ID, value);
  }

  public int getSex() {
    return this.sex;
  }

  public Topic setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public String getImg() {
    return this.img;
  }

  public Topic setImg(String img) {
    this.img = img;
    return this;
  }

  public void unsetImg() {
    this.img = null;
  }

  /** Returns true if field img is set (has been assigned a value) and false otherwise */
  public boolean isSetImg() {
    return this.img != null;
  }

  public void setImgIsSet(boolean value) {
    if (!value) {
      this.img = null;
    }
  }

  public String getReplierIdentity() {
    return this.replierIdentity;
  }

  public Topic setReplierIdentity(String replierIdentity) {
    this.replierIdentity = replierIdentity;
    return this;
  }

  public void unsetReplierIdentity() {
    this.replierIdentity = null;
  }

  /** Returns true if field replierIdentity is set (has been assigned a value) and false otherwise */
  public boolean isSetReplierIdentity() {
    return this.replierIdentity != null;
  }

  public void setReplierIdentityIsSet(boolean value) {
    if (!value) {
      this.replierIdentity = null;
    }
  }

  public int getDelType() {
    return this.delType;
  }

  public Topic setDelType(int delType) {
    this.delType = delType;
    setDelTypeIsSet(true);
    return this;
  }

  public void unsetDelType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELTYPE_ISSET_ID);
  }

  /** Returns true if field delType is set (has been assigned a value) and false otherwise */
  public boolean isSetDelType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELTYPE_ISSET_ID);
  }

  public void setDelTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELTYPE_ISSET_ID, value);
  }

  public int getMultiSelect() {
    return this.multiSelect;
  }

  public Topic setMultiSelect(int multiSelect) {
    this.multiSelect = multiSelect;
    setMultiSelectIsSet(true);
    return this;
  }

  public void unsetMultiSelect() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MULTISELECT_ISSET_ID);
  }

  /** Returns true if field multiSelect is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiSelect() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MULTISELECT_ISSET_ID);
  }

  public void setMultiSelectIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MULTISELECT_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public Topic setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getUnqualifiedReason() {
    return this.unqualifiedReason;
  }

  public Topic setUnqualifiedReason(String unqualifiedReason) {
    this.unqualifiedReason = unqualifiedReason;
    return this;
  }

  public void unsetUnqualifiedReason() {
    this.unqualifiedReason = null;
  }

  /** Returns true if field unqualifiedReason is set (has been assigned a value) and false otherwise */
  public boolean isSetUnqualifiedReason() {
    return this.unqualifiedReason != null;
  }

  public void setUnqualifiedReasonIsSet(boolean value) {
    if (!value) {
      this.unqualifiedReason = null;
    }
  }

  public String getPubTime() {
    return this.pubTime;
  }

  public Topic setPubTime(String pubTime) {
    this.pubTime = pubTime;
    return this;
  }

  public void unsetPubTime() {
    this.pubTime = null;
  }

  /** Returns true if field pubTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPubTime() {
    return this.pubTime != null;
  }

  public void setPubTimeIsSet(boolean value) {
    if (!value) {
      this.pubTime = null;
    }
  }

  public String getTopubTime() {
    return this.topubTime;
  }

  public Topic setTopubTime(String topubTime) {
    this.topubTime = topubTime;
    return this;
  }

  public void unsetTopubTime() {
    this.topubTime = null;
  }

  /** Returns true if field topubTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTopubTime() {
    return this.topubTime != null;
  }

  public void setTopubTimeIsSet(boolean value) {
    if (!value) {
      this.topubTime = null;
    }
  }

  public String getQualified() {
    return this.qualified;
  }

  public Topic setQualified(String qualified) {
    this.qualified = qualified;
    return this;
  }

  public void unsetQualified() {
    this.qualified = null;
  }

  /** Returns true if field qualified is set (has been assigned a value) and false otherwise */
  public boolean isSetQualified() {
    return this.qualified != null;
  }

  public void setQualifiedIsSet(boolean value) {
    if (!value) {
      this.qualified = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case ENABLE:
      if (value == null) {
        unsetEnable();
      } else {
        setEnable((Integer)value);
      }
      break;

    case CLICK:
      if (value == null) {
        unsetClick();
      } else {
        setClick((Integer)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((Integer)value);
      }
      break;

    case COLLECTION:
      if (value == null) {
        unsetCollection();
      } else {
        setCollection((Integer)value);
      }
      break;

    case RELAY:
      if (value == null) {
        unsetRelay();
      } else {
        setRelay((Integer)value);
      }
      break;

    case PRAISE:
      if (value == null) {
        unsetPraise();
      } else {
        setPraise((Integer)value);
      }
      break;

    case TODAY_CLICK:
      if (value == null) {
        unsetTodayClick();
      } else {
        setTodayClick((Integer)value);
      }
      break;

    case TODAY_COMMENT:
      if (value == null) {
        unsetTodayComment();
      } else {
        setTodayComment((Integer)value);
      }
      break;

    case TODAY_COLLECTION:
      if (value == null) {
        unsetTodayCollection();
      } else {
        setTodayCollection((Integer)value);
      }
      break;

    case TODAY_RELAY:
      if (value == null) {
        unsetTodayRelay();
      } else {
        setTodayRelay((Integer)value);
      }
      break;

    case TODAY_PRAISE:
      if (value == null) {
        unsetTodayPraise();
      } else {
        setTodayPraise((Integer)value);
      }
      break;

    case MALE:
      if (value == null) {
        unsetMale();
      } else {
        setMale((Integer)value);
      }
      break;

    case FEMALE:
      if (value == null) {
        unsetFemale();
      } else {
        setFemale((Integer)value);
      }
      break;

    case UNKNOWN_SEX:
      if (value == null) {
        unsetUnknownSex();
      } else {
        setUnknownSex((Integer)value);
      }
      break;

    case ADD_TIME:
      if (value == null) {
        unsetAddTime();
      } else {
        setAddTime((String)value);
      }
      break;

    case STOP_TIME:
      if (value == null) {
        unsetStopTime();
      } else {
        setStopTime((String)value);
      }
      break;

    case DEL_TIME:
      if (value == null) {
        unsetDelTime();
      } else {
        setDelTime((String)value);
      }
      break;

    case ADD_USER_ID:
      if (value == null) {
        unsetAddUserId();
      } else {
        setAddUserId((Integer)value);
      }
      break;

    case ADD_USER_TYPE:
      if (value == null) {
        unsetAddUserType();
      } else {
        setAddUserType((Integer)value);
      }
      break;

    case STOP_USER_ID:
      if (value == null) {
        unsetStopUserId();
      } else {
        setStopUserId((Integer)value);
      }
      break;

    case DEL_USER_ID:
      if (value == null) {
        unsetDelUserId();
      } else {
        setDelUserId((Integer)value);
      }
      break;

    case DELETED:
      if (value == null) {
        unsetDeleted();
      } else {
        setDeleted((Integer)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Integer)value);
      }
      break;

    case IMG:
      if (value == null) {
        unsetImg();
      } else {
        setImg((String)value);
      }
      break;

    case REPLIER_IDENTITY:
      if (value == null) {
        unsetReplierIdentity();
      } else {
        setReplierIdentity((String)value);
      }
      break;

    case DEL_TYPE:
      if (value == null) {
        unsetDelType();
      } else {
        setDelType((Integer)value);
      }
      break;

    case MULTI_SELECT:
      if (value == null) {
        unsetMultiSelect();
      } else {
        setMultiSelect((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case UNQUALIFIED_REASON:
      if (value == null) {
        unsetUnqualifiedReason();
      } else {
        setUnqualifiedReason((String)value);
      }
      break;

    case PUB_TIME:
      if (value == null) {
        unsetPubTime();
      } else {
        setPubTime((String)value);
      }
      break;

    case TOPUB_TIME:
      if (value == null) {
        unsetTopubTime();
      } else {
        setTopubTime((String)value);
      }
      break;

    case QUALIFIED:
      if (value == null) {
        unsetQualified();
      } else {
        setQualified((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case CONTENT:
      return getContent();

    case TYPE:
      return getType();

    case ENABLE:
      return getEnable();

    case CLICK:
      return getClick();

    case COMMENT:
      return getComment();

    case COLLECTION:
      return getCollection();

    case RELAY:
      return getRelay();

    case PRAISE:
      return getPraise();

    case TODAY_CLICK:
      return getTodayClick();

    case TODAY_COMMENT:
      return getTodayComment();

    case TODAY_COLLECTION:
      return getTodayCollection();

    case TODAY_RELAY:
      return getTodayRelay();

    case TODAY_PRAISE:
      return getTodayPraise();

    case MALE:
      return getMale();

    case FEMALE:
      return getFemale();

    case UNKNOWN_SEX:
      return getUnknownSex();

    case ADD_TIME:
      return getAddTime();

    case STOP_TIME:
      return getStopTime();

    case DEL_TIME:
      return getDelTime();

    case ADD_USER_ID:
      return getAddUserId();

    case ADD_USER_TYPE:
      return getAddUserType();

    case STOP_USER_ID:
      return getStopUserId();

    case DEL_USER_ID:
      return getDelUserId();

    case DELETED:
      return getDeleted();

    case SEX:
      return getSex();

    case IMG:
      return getImg();

    case REPLIER_IDENTITY:
      return getReplierIdentity();

    case DEL_TYPE:
      return getDelType();

    case MULTI_SELECT:
      return getMultiSelect();

    case STATUS:
      return getStatus();

    case UNQUALIFIED_REASON:
      return getUnqualifiedReason();

    case PUB_TIME:
      return getPubTime();

    case TOPUB_TIME:
      return getTopubTime();

    case QUALIFIED:
      return getQualified();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case CONTENT:
      return isSetContent();
    case TYPE:
      return isSetType();
    case ENABLE:
      return isSetEnable();
    case CLICK:
      return isSetClick();
    case COMMENT:
      return isSetComment();
    case COLLECTION:
      return isSetCollection();
    case RELAY:
      return isSetRelay();
    case PRAISE:
      return isSetPraise();
    case TODAY_CLICK:
      return isSetTodayClick();
    case TODAY_COMMENT:
      return isSetTodayComment();
    case TODAY_COLLECTION:
      return isSetTodayCollection();
    case TODAY_RELAY:
      return isSetTodayRelay();
    case TODAY_PRAISE:
      return isSetTodayPraise();
    case MALE:
      return isSetMale();
    case FEMALE:
      return isSetFemale();
    case UNKNOWN_SEX:
      return isSetUnknownSex();
    case ADD_TIME:
      return isSetAddTime();
    case STOP_TIME:
      return isSetStopTime();
    case DEL_TIME:
      return isSetDelTime();
    case ADD_USER_ID:
      return isSetAddUserId();
    case ADD_USER_TYPE:
      return isSetAddUserType();
    case STOP_USER_ID:
      return isSetStopUserId();
    case DEL_USER_ID:
      return isSetDelUserId();
    case DELETED:
      return isSetDeleted();
    case SEX:
      return isSetSex();
    case IMG:
      return isSetImg();
    case REPLIER_IDENTITY:
      return isSetReplierIdentity();
    case DEL_TYPE:
      return isSetDelType();
    case MULTI_SELECT:
      return isSetMultiSelect();
    case STATUS:
      return isSetStatus();
    case UNQUALIFIED_REASON:
      return isSetUnqualifiedReason();
    case PUB_TIME:
      return isSetPubTime();
    case TOPUB_TIME:
      return isSetTopubTime();
    case QUALIFIED:
      return isSetQualified();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Topic)
      return this.equals((Topic)that);
    return false;
  }

  public boolean equals(Topic that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_enable = true;
    boolean that_present_enable = true;
    if (this_present_enable || that_present_enable) {
      if (!(this_present_enable && that_present_enable))
        return false;
      if (this.enable != that.enable)
        return false;
    }

    boolean this_present_click = true;
    boolean that_present_click = true;
    if (this_present_click || that_present_click) {
      if (!(this_present_click && that_present_click))
        return false;
      if (this.click != that.click)
        return false;
    }

    boolean this_present_comment = true;
    boolean that_present_comment = true;
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (this.comment != that.comment)
        return false;
    }

    boolean this_present_collection = true;
    boolean that_present_collection = true;
    if (this_present_collection || that_present_collection) {
      if (!(this_present_collection && that_present_collection))
        return false;
      if (this.collection != that.collection)
        return false;
    }

    boolean this_present_relay = true;
    boolean that_present_relay = true;
    if (this_present_relay || that_present_relay) {
      if (!(this_present_relay && that_present_relay))
        return false;
      if (this.relay != that.relay)
        return false;
    }

    boolean this_present_praise = true;
    boolean that_present_praise = true;
    if (this_present_praise || that_present_praise) {
      if (!(this_present_praise && that_present_praise))
        return false;
      if (this.praise != that.praise)
        return false;
    }

    boolean this_present_todayClick = true;
    boolean that_present_todayClick = true;
    if (this_present_todayClick || that_present_todayClick) {
      if (!(this_present_todayClick && that_present_todayClick))
        return false;
      if (this.todayClick != that.todayClick)
        return false;
    }

    boolean this_present_todayComment = true;
    boolean that_present_todayComment = true;
    if (this_present_todayComment || that_present_todayComment) {
      if (!(this_present_todayComment && that_present_todayComment))
        return false;
      if (this.todayComment != that.todayComment)
        return false;
    }

    boolean this_present_todayCollection = true;
    boolean that_present_todayCollection = true;
    if (this_present_todayCollection || that_present_todayCollection) {
      if (!(this_present_todayCollection && that_present_todayCollection))
        return false;
      if (this.todayCollection != that.todayCollection)
        return false;
    }

    boolean this_present_todayRelay = true;
    boolean that_present_todayRelay = true;
    if (this_present_todayRelay || that_present_todayRelay) {
      if (!(this_present_todayRelay && that_present_todayRelay))
        return false;
      if (this.todayRelay != that.todayRelay)
        return false;
    }

    boolean this_present_todayPraise = true;
    boolean that_present_todayPraise = true;
    if (this_present_todayPraise || that_present_todayPraise) {
      if (!(this_present_todayPraise && that_present_todayPraise))
        return false;
      if (this.todayPraise != that.todayPraise)
        return false;
    }

    boolean this_present_male = true;
    boolean that_present_male = true;
    if (this_present_male || that_present_male) {
      if (!(this_present_male && that_present_male))
        return false;
      if (this.male != that.male)
        return false;
    }

    boolean this_present_female = true;
    boolean that_present_female = true;
    if (this_present_female || that_present_female) {
      if (!(this_present_female && that_present_female))
        return false;
      if (this.female != that.female)
        return false;
    }

    boolean this_present_unknownSex = true;
    boolean that_present_unknownSex = true;
    if (this_present_unknownSex || that_present_unknownSex) {
      if (!(this_present_unknownSex && that_present_unknownSex))
        return false;
      if (this.unknownSex != that.unknownSex)
        return false;
    }

    boolean this_present_addTime = true && this.isSetAddTime();
    boolean that_present_addTime = true && that.isSetAddTime();
    if (this_present_addTime || that_present_addTime) {
      if (!(this_present_addTime && that_present_addTime))
        return false;
      if (!this.addTime.equals(that.addTime))
        return false;
    }

    boolean this_present_stopTime = true && this.isSetStopTime();
    boolean that_present_stopTime = true && that.isSetStopTime();
    if (this_present_stopTime || that_present_stopTime) {
      if (!(this_present_stopTime && that_present_stopTime))
        return false;
      if (!this.stopTime.equals(that.stopTime))
        return false;
    }

    boolean this_present_delTime = true && this.isSetDelTime();
    boolean that_present_delTime = true && that.isSetDelTime();
    if (this_present_delTime || that_present_delTime) {
      if (!(this_present_delTime && that_present_delTime))
        return false;
      if (!this.delTime.equals(that.delTime))
        return false;
    }

    boolean this_present_addUserId = true;
    boolean that_present_addUserId = true;
    if (this_present_addUserId || that_present_addUserId) {
      if (!(this_present_addUserId && that_present_addUserId))
        return false;
      if (this.addUserId != that.addUserId)
        return false;
    }

    boolean this_present_addUserType = true;
    boolean that_present_addUserType = true;
    if (this_present_addUserType || that_present_addUserType) {
      if (!(this_present_addUserType && that_present_addUserType))
        return false;
      if (this.addUserType != that.addUserType)
        return false;
    }

    boolean this_present_stopUserId = true;
    boolean that_present_stopUserId = true;
    if (this_present_stopUserId || that_present_stopUserId) {
      if (!(this_present_stopUserId && that_present_stopUserId))
        return false;
      if (this.stopUserId != that.stopUserId)
        return false;
    }

    boolean this_present_delUserId = true;
    boolean that_present_delUserId = true;
    if (this_present_delUserId || that_present_delUserId) {
      if (!(this_present_delUserId && that_present_delUserId))
        return false;
      if (this.delUserId != that.delUserId)
        return false;
    }

    boolean this_present_deleted = true;
    boolean that_present_deleted = true;
    if (this_present_deleted || that_present_deleted) {
      if (!(this_present_deleted && that_present_deleted))
        return false;
      if (this.deleted != that.deleted)
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_img = true && this.isSetImg();
    boolean that_present_img = true && that.isSetImg();
    if (this_present_img || that_present_img) {
      if (!(this_present_img && that_present_img))
        return false;
      if (!this.img.equals(that.img))
        return false;
    }

    boolean this_present_replierIdentity = true && this.isSetReplierIdentity();
    boolean that_present_replierIdentity = true && that.isSetReplierIdentity();
    if (this_present_replierIdentity || that_present_replierIdentity) {
      if (!(this_present_replierIdentity && that_present_replierIdentity))
        return false;
      if (!this.replierIdentity.equals(that.replierIdentity))
        return false;
    }

    boolean this_present_delType = true;
    boolean that_present_delType = true;
    if (this_present_delType || that_present_delType) {
      if (!(this_present_delType && that_present_delType))
        return false;
      if (this.delType != that.delType)
        return false;
    }

    boolean this_present_multiSelect = true;
    boolean that_present_multiSelect = true;
    if (this_present_multiSelect || that_present_multiSelect) {
      if (!(this_present_multiSelect && that_present_multiSelect))
        return false;
      if (this.multiSelect != that.multiSelect)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_unqualifiedReason = true && this.isSetUnqualifiedReason();
    boolean that_present_unqualifiedReason = true && that.isSetUnqualifiedReason();
    if (this_present_unqualifiedReason || that_present_unqualifiedReason) {
      if (!(this_present_unqualifiedReason && that_present_unqualifiedReason))
        return false;
      if (!this.unqualifiedReason.equals(that.unqualifiedReason))
        return false;
    }

    boolean this_present_pubTime = true && this.isSetPubTime();
    boolean that_present_pubTime = true && that.isSetPubTime();
    if (this_present_pubTime || that_present_pubTime) {
      if (!(this_present_pubTime && that_present_pubTime))
        return false;
      if (!this.pubTime.equals(that.pubTime))
        return false;
    }

    boolean this_present_topubTime = true && this.isSetTopubTime();
    boolean that_present_topubTime = true && that.isSetTopubTime();
    if (this_present_topubTime || that_present_topubTime) {
      if (!(this_present_topubTime && that_present_topubTime))
        return false;
      if (!this.topubTime.equals(that.topubTime))
        return false;
    }

    boolean this_present_qualified = true && this.isSetQualified();
    boolean that_present_qualified = true && that.isSetQualified();
    if (this_present_qualified || that_present_qualified) {
      if (!(this_present_qualified && that_present_qualified))
        return false;
      if (!this.qualified.equals(that.qualified))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + type;

    hashCode = hashCode * 8191 + enable;

    hashCode = hashCode * 8191 + click;

    hashCode = hashCode * 8191 + comment;

    hashCode = hashCode * 8191 + collection;

    hashCode = hashCode * 8191 + relay;

    hashCode = hashCode * 8191 + praise;

    hashCode = hashCode * 8191 + todayClick;

    hashCode = hashCode * 8191 + todayComment;

    hashCode = hashCode * 8191 + todayCollection;

    hashCode = hashCode * 8191 + todayRelay;

    hashCode = hashCode * 8191 + todayPraise;

    hashCode = hashCode * 8191 + male;

    hashCode = hashCode * 8191 + female;

    hashCode = hashCode * 8191 + unknownSex;

    hashCode = hashCode * 8191 + ((isSetAddTime()) ? 131071 : 524287);
    if (isSetAddTime())
      hashCode = hashCode * 8191 + addTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetStopTime()) ? 131071 : 524287);
    if (isSetStopTime())
      hashCode = hashCode * 8191 + stopTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetDelTime()) ? 131071 : 524287);
    if (isSetDelTime())
      hashCode = hashCode * 8191 + delTime.hashCode();

    hashCode = hashCode * 8191 + addUserId;

    hashCode = hashCode * 8191 + addUserType;

    hashCode = hashCode * 8191 + stopUserId;

    hashCode = hashCode * 8191 + delUserId;

    hashCode = hashCode * 8191 + deleted;

    hashCode = hashCode * 8191 + sex;

    hashCode = hashCode * 8191 + ((isSetImg()) ? 131071 : 524287);
    if (isSetImg())
      hashCode = hashCode * 8191 + img.hashCode();

    hashCode = hashCode * 8191 + ((isSetReplierIdentity()) ? 131071 : 524287);
    if (isSetReplierIdentity())
      hashCode = hashCode * 8191 + replierIdentity.hashCode();

    hashCode = hashCode * 8191 + delType;

    hashCode = hashCode * 8191 + multiSelect;

    hashCode = hashCode * 8191 + status;

    hashCode = hashCode * 8191 + ((isSetUnqualifiedReason()) ? 131071 : 524287);
    if (isSetUnqualifiedReason())
      hashCode = hashCode * 8191 + unqualifiedReason.hashCode();

    hashCode = hashCode * 8191 + ((isSetPubTime()) ? 131071 : 524287);
    if (isSetPubTime())
      hashCode = hashCode * 8191 + pubTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetTopubTime()) ? 131071 : 524287);
    if (isSetTopubTime())
      hashCode = hashCode * 8191 + topubTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetQualified()) ? 131071 : 524287);
    if (isSetQualified())
      hashCode = hashCode * 8191 + qualified.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Topic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnable()).compareTo(other.isSetEnable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable, other.enable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClick()).compareTo(other.isSetClick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.click, other.click);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollection()).compareTo(other.isSetCollection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, other.collection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelay()).compareTo(other.isSetRelay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relay, other.relay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPraise()).compareTo(other.isSetPraise());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPraise()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.praise, other.praise);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTodayClick()).compareTo(other.isSetTodayClick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTodayClick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todayClick, other.todayClick);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTodayComment()).compareTo(other.isSetTodayComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTodayComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todayComment, other.todayComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTodayCollection()).compareTo(other.isSetTodayCollection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTodayCollection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todayCollection, other.todayCollection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTodayRelay()).compareTo(other.isSetTodayRelay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTodayRelay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todayRelay, other.todayRelay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTodayPraise()).compareTo(other.isSetTodayPraise());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTodayPraise()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.todayPraise, other.todayPraise);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMale()).compareTo(other.isSetMale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.male, other.male);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFemale()).compareTo(other.isSetFemale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFemale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.female, other.female);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnknownSex()).compareTo(other.isSetUnknownSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnknownSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknownSex, other.unknownSex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddTime()).compareTo(other.isSetAddTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addTime, other.addTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopTime()).compareTo(other.isSetStopTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopTime, other.stopTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDelTime()).compareTo(other.isSetDelTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delTime, other.delTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddUserId()).compareTo(other.isSetAddUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addUserId, other.addUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddUserType()).compareTo(other.isSetAddUserType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddUserType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addUserType, other.addUserType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopUserId()).compareTo(other.isSetStopUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopUserId, other.stopUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDelUserId()).compareTo(other.isSetDelUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delUserId, other.delUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted()).compareTo(other.isSetDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleted, other.deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImg()).compareTo(other.isSetImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img, other.img);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplierIdentity()).compareTo(other.isSetReplierIdentity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplierIdentity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replierIdentity, other.replierIdentity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDelType()).compareTo(other.isSetDelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delType, other.delType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiSelect()).compareTo(other.isSetMultiSelect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiSelect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiSelect, other.multiSelect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnqualifiedReason()).compareTo(other.isSetUnqualifiedReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnqualifiedReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unqualifiedReason, other.unqualifiedReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPubTime()).compareTo(other.isSetPubTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPubTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubTime, other.pubTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopubTime()).compareTo(other.isSetTopubTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopubTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topubTime, other.topubTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQualified()).compareTo(other.isSetQualified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQualified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qualified, other.qualified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Topic(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enable:");
    sb.append(this.enable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("click:");
    sb.append(this.click);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    sb.append(this.comment);
    first = false;
    if (!first) sb.append(", ");
    sb.append("collection:");
    sb.append(this.collection);
    first = false;
    if (!first) sb.append(", ");
    sb.append("relay:");
    sb.append(this.relay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("praise:");
    sb.append(this.praise);
    first = false;
    if (!first) sb.append(", ");
    sb.append("todayClick:");
    sb.append(this.todayClick);
    first = false;
    if (!first) sb.append(", ");
    sb.append("todayComment:");
    sb.append(this.todayComment);
    first = false;
    if (!first) sb.append(", ");
    sb.append("todayCollection:");
    sb.append(this.todayCollection);
    first = false;
    if (!first) sb.append(", ");
    sb.append("todayRelay:");
    sb.append(this.todayRelay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("todayPraise:");
    sb.append(this.todayPraise);
    first = false;
    if (!first) sb.append(", ");
    sb.append("male:");
    sb.append(this.male);
    first = false;
    if (!first) sb.append(", ");
    sb.append("female:");
    sb.append(this.female);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unknownSex:");
    sb.append(this.unknownSex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("addTime:");
    if (this.addTime == null) {
      sb.append("null");
    } else {
      sb.append(this.addTime);
    }
    first = false;
    if (isSetStopTime()) {
      if (!first) sb.append(", ");
      sb.append("stopTime:");
      if (this.stopTime == null) {
        sb.append("null");
      } else {
        sb.append(this.stopTime);
      }
      first = false;
    }
    if (isSetDelTime()) {
      if (!first) sb.append(", ");
      sb.append("delTime:");
      if (this.delTime == null) {
        sb.append("null");
      } else {
        sb.append(this.delTime);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("addUserId:");
    sb.append(this.addUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("addUserType:");
    sb.append(this.addUserType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stopUserId:");
    sb.append(this.stopUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("delUserId:");
    sb.append(this.delUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deleted:");
    sb.append(this.deleted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("img:");
    if (this.img == null) {
      sb.append("null");
    } else {
      sb.append(this.img);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replierIdentity:");
    if (this.replierIdentity == null) {
      sb.append("null");
    } else {
      sb.append(this.replierIdentity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("delType:");
    sb.append(this.delType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("multiSelect:");
    sb.append(this.multiSelect);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unqualifiedReason:");
    if (this.unqualifiedReason == null) {
      sb.append("null");
    } else {
      sb.append(this.unqualifiedReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pubTime:");
    if (this.pubTime == null) {
      sb.append("null");
    } else {
      sb.append(this.pubTime);
    }
    first = false;
    if (isSetTopubTime()) {
      if (!first) sb.append(", ");
      sb.append("topubTime:");
      if (this.topubTime == null) {
        sb.append("null");
      } else {
        sb.append(this.topubTime);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("qualified:");
    if (this.qualified == null) {
      sb.append("null");
    } else {
      sb.append(this.qualified);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (title == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'type' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'enable' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'click' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'comment' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'collection' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'relay' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'praise' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'todayClick' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'todayComment' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'todayCollection' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'todayRelay' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'todayPraise' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'male' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'female' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'unknownSex' because it's a primitive and you chose the non-beans generator.
    if (addTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'addTime' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'addUserId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'addUserType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'stopUserId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'delUserId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'deleted' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sex' because it's a primitive and you chose the non-beans generator.
    if (img == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'img' was not present! Struct: " + toString());
    }
    if (replierIdentity == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'replierIdentity' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'delType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'multiSelect' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
    if (unqualifiedReason == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unqualifiedReason' was not present! Struct: " + toString());
    }
    if (pubTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pubTime' was not present! Struct: " + toString());
    }
    if (qualified == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'qualified' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopicStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopicStandardScheme getScheme() {
      return new TopicStandardScheme();
    }
  }

  private static class TopicStandardScheme extends org.apache.thrift.scheme.StandardScheme<Topic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Topic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enable = iprot.readI32();
              struct.setEnableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLICK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.click = iprot.readI32();
              struct.setClickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.comment = iprot.readI32();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COLLECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.collection = iprot.readI32();
              struct.setCollectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relay = iprot.readI32();
              struct.setRelayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRAISE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.praise = iprot.readI32();
              struct.setPraiseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TODAY_CLICK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.todayClick = iprot.readI32();
              struct.setTodayClickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TODAY_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.todayComment = iprot.readI32();
              struct.setTodayCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TODAY_COLLECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.todayCollection = iprot.readI32();
              struct.setTodayCollectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TODAY_RELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.todayRelay = iprot.readI32();
              struct.setTodayRelayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TODAY_PRAISE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.todayPraise = iprot.readI32();
              struct.setTodayPraiseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.male = iprot.readI32();
              struct.setMaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FEMALE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.female = iprot.readI32();
              struct.setFemaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // UNKNOWN_SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unknownSex = iprot.readI32();
              struct.setUnknownSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ADD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addTime = iprot.readString();
              struct.setAddTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // STOP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stopTime = iprot.readString();
              struct.setStopTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DEL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.delTime = iprot.readString();
              struct.setDelTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ADD_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.addUserId = iprot.readI32();
              struct.setAddUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // ADD_USER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.addUserType = iprot.readI32();
              struct.setAddUserTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // STOP_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stopUserId = iprot.readI32();
              struct.setStopUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // DEL_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.delUserId = iprot.readI32();
              struct.setDelUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deleted = iprot.readI32();
              struct.setDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.img = iprot.readString();
              struct.setImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // REPLIER_IDENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.replierIdentity = iprot.readString();
              struct.setReplierIdentityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // DEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.delType = iprot.readI32();
              struct.setDelTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // MULTI_SELECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.multiSelect = iprot.readI32();
              struct.setMultiSelectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // UNQUALIFIED_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unqualifiedReason = iprot.readString();
              struct.setUnqualifiedReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // PUB_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pubTime = iprot.readString();
              struct.setPubTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // TOPUB_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topubTime = iprot.readString();
              struct.setTopubTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // QUALIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qualified = iprot.readString();
              struct.setQualifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEnable()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'enable' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetClick()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'click' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetComment()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'comment' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCollection()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'collection' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRelay()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'relay' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPraise()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'praise' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTodayClick()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'todayClick' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTodayComment()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'todayComment' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTodayCollection()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'todayCollection' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTodayRelay()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'todayRelay' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTodayPraise()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'todayPraise' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMale()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'male' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFemale()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'female' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUnknownSex()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'unknownSex' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAddUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'addUserId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAddUserType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'addUserType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStopUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'stopUserId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDelUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'delUserId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDeleted()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'deleted' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSex()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sex' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDelType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'delType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMultiSelect()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'multiSelect' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Topic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENABLE_FIELD_DESC);
      oprot.writeI32(struct.enable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLICK_FIELD_DESC);
      oprot.writeI32(struct.click);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMENT_FIELD_DESC);
      oprot.writeI32(struct.comment);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
      oprot.writeI32(struct.collection);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RELAY_FIELD_DESC);
      oprot.writeI32(struct.relay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRAISE_FIELD_DESC);
      oprot.writeI32(struct.praise);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TODAY_CLICK_FIELD_DESC);
      oprot.writeI32(struct.todayClick);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TODAY_COMMENT_FIELD_DESC);
      oprot.writeI32(struct.todayComment);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TODAY_COLLECTION_FIELD_DESC);
      oprot.writeI32(struct.todayCollection);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TODAY_RELAY_FIELD_DESC);
      oprot.writeI32(struct.todayRelay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TODAY_PRAISE_FIELD_DESC);
      oprot.writeI32(struct.todayPraise);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MALE_FIELD_DESC);
      oprot.writeI32(struct.male);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FEMALE_FIELD_DESC);
      oprot.writeI32(struct.female);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNKNOWN_SEX_FIELD_DESC);
      oprot.writeI32(struct.unknownSex);
      oprot.writeFieldEnd();
      if (struct.addTime != null) {
        oprot.writeFieldBegin(ADD_TIME_FIELD_DESC);
        oprot.writeString(struct.addTime);
        oprot.writeFieldEnd();
      }
      if (struct.stopTime != null) {
        if (struct.isSetStopTime()) {
          oprot.writeFieldBegin(STOP_TIME_FIELD_DESC);
          oprot.writeString(struct.stopTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.delTime != null) {
        if (struct.isSetDelTime()) {
          oprot.writeFieldBegin(DEL_TIME_FIELD_DESC);
          oprot.writeString(struct.delTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(ADD_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.addUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADD_USER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.addUserType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STOP_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.stopUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEL_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.delUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELETED_FIELD_DESC);
      oprot.writeI32(struct.deleted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeI32(struct.sex);
      oprot.writeFieldEnd();
      if (struct.img != null) {
        oprot.writeFieldBegin(IMG_FIELD_DESC);
        oprot.writeString(struct.img);
        oprot.writeFieldEnd();
      }
      if (struct.replierIdentity != null) {
        oprot.writeFieldBegin(REPLIER_IDENTITY_FIELD_DESC);
        oprot.writeString(struct.replierIdentity);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEL_TYPE_FIELD_DESC);
      oprot.writeI32(struct.delType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MULTI_SELECT_FIELD_DESC);
      oprot.writeI32(struct.multiSelect);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.unqualifiedReason != null) {
        oprot.writeFieldBegin(UNQUALIFIED_REASON_FIELD_DESC);
        oprot.writeString(struct.unqualifiedReason);
        oprot.writeFieldEnd();
      }
      if (struct.pubTime != null) {
        oprot.writeFieldBegin(PUB_TIME_FIELD_DESC);
        oprot.writeString(struct.pubTime);
        oprot.writeFieldEnd();
      }
      if (struct.topubTime != null) {
        if (struct.isSetTopubTime()) {
          oprot.writeFieldBegin(TOPUB_TIME_FIELD_DESC);
          oprot.writeString(struct.topubTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.qualified != null) {
        oprot.writeFieldBegin(QUALIFIED_FIELD_DESC);
        oprot.writeString(struct.qualified);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopicTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopicTupleScheme getScheme() {
      return new TopicTupleScheme();
    }
  }

  private static class TopicTupleScheme extends org.apache.thrift.scheme.TupleScheme<Topic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Topic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeString(struct.title);
      oprot.writeI32(struct.type);
      oprot.writeI32(struct.enable);
      oprot.writeI32(struct.click);
      oprot.writeI32(struct.comment);
      oprot.writeI32(struct.collection);
      oprot.writeI32(struct.relay);
      oprot.writeI32(struct.praise);
      oprot.writeI32(struct.todayClick);
      oprot.writeI32(struct.todayComment);
      oprot.writeI32(struct.todayCollection);
      oprot.writeI32(struct.todayRelay);
      oprot.writeI32(struct.todayPraise);
      oprot.writeI32(struct.male);
      oprot.writeI32(struct.female);
      oprot.writeI32(struct.unknownSex);
      oprot.writeString(struct.addTime);
      oprot.writeI32(struct.addUserId);
      oprot.writeI32(struct.addUserType);
      oprot.writeI32(struct.stopUserId);
      oprot.writeI32(struct.delUserId);
      oprot.writeI32(struct.deleted);
      oprot.writeI32(struct.sex);
      oprot.writeString(struct.img);
      oprot.writeString(struct.replierIdentity);
      oprot.writeI32(struct.delType);
      oprot.writeI32(struct.multiSelect);
      oprot.writeI32(struct.status);
      oprot.writeString(struct.unqualifiedReason);
      oprot.writeString(struct.pubTime);
      oprot.writeString(struct.qualified);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetContent()) {
        optionals.set(0);
      }
      if (struct.isSetStopTime()) {
        optionals.set(1);
      }
      if (struct.isSetDelTime()) {
        optionals.set(2);
      }
      if (struct.isSetTopubTime()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetStopTime()) {
        oprot.writeString(struct.stopTime);
      }
      if (struct.isSetDelTime()) {
        oprot.writeString(struct.delTime);
      }
      if (struct.isSetTopubTime()) {
        oprot.writeString(struct.topubTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Topic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.title = iprot.readString();
      struct.setTitleIsSet(true);
      struct.type = iprot.readI32();
      struct.setTypeIsSet(true);
      struct.enable = iprot.readI32();
      struct.setEnableIsSet(true);
      struct.click = iprot.readI32();
      struct.setClickIsSet(true);
      struct.comment = iprot.readI32();
      struct.setCommentIsSet(true);
      struct.collection = iprot.readI32();
      struct.setCollectionIsSet(true);
      struct.relay = iprot.readI32();
      struct.setRelayIsSet(true);
      struct.praise = iprot.readI32();
      struct.setPraiseIsSet(true);
      struct.todayClick = iprot.readI32();
      struct.setTodayClickIsSet(true);
      struct.todayComment = iprot.readI32();
      struct.setTodayCommentIsSet(true);
      struct.todayCollection = iprot.readI32();
      struct.setTodayCollectionIsSet(true);
      struct.todayRelay = iprot.readI32();
      struct.setTodayRelayIsSet(true);
      struct.todayPraise = iprot.readI32();
      struct.setTodayPraiseIsSet(true);
      struct.male = iprot.readI32();
      struct.setMaleIsSet(true);
      struct.female = iprot.readI32();
      struct.setFemaleIsSet(true);
      struct.unknownSex = iprot.readI32();
      struct.setUnknownSexIsSet(true);
      struct.addTime = iprot.readString();
      struct.setAddTimeIsSet(true);
      struct.addUserId = iprot.readI32();
      struct.setAddUserIdIsSet(true);
      struct.addUserType = iprot.readI32();
      struct.setAddUserTypeIsSet(true);
      struct.stopUserId = iprot.readI32();
      struct.setStopUserIdIsSet(true);
      struct.delUserId = iprot.readI32();
      struct.setDelUserIdIsSet(true);
      struct.deleted = iprot.readI32();
      struct.setDeletedIsSet(true);
      struct.sex = iprot.readI32();
      struct.setSexIsSet(true);
      struct.img = iprot.readString();
      struct.setImgIsSet(true);
      struct.replierIdentity = iprot.readString();
      struct.setReplierIdentityIsSet(true);
      struct.delType = iprot.readI32();
      struct.setDelTypeIsSet(true);
      struct.multiSelect = iprot.readI32();
      struct.setMultiSelectIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.unqualifiedReason = iprot.readString();
      struct.setUnqualifiedReasonIsSet(true);
      struct.pubTime = iprot.readString();
      struct.setPubTimeIsSet(true);
      struct.qualified = iprot.readString();
      struct.setQualifiedIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stopTime = iprot.readString();
        struct.setStopTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.delTime = iprot.readString();
        struct.setDelTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.topubTime = iprot.readString();
        struct.setTopubTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

