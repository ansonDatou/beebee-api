/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.quwan.beebee.entity.topic;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-02-24")
public class TopicComment implements org.apache.thrift.TBase<TopicComment, TopicComment._Fields>, java.io.Serializable, Cloneable, Comparable<TopicComment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopicComment");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REPLIER_IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("replierIdentity", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IDENTITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("identityId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PARENT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentUserId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PRAISE_FIELD_DESC = new org.apache.thrift.protocol.TField("praise", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ADD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("addTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("img", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TopicCommentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TopicCommentTupleSchemeFactory();

  public int id; // required
  public int topicId; // required
  public int userId; // required
  public String content; // required
  public String replierIdentity; // optional
  public int identityId; // optional
  public int parentId; // required
  public int parentUserId; // required
  public int praise; // required
  public String addTime; // required
  public String img; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TOPIC_ID((short)2, "topicId"),
    USER_ID((short)3, "userId"),
    CONTENT((short)4, "content"),
    REPLIER_IDENTITY((short)5, "replierIdentity"),
    IDENTITY_ID((short)6, "identityId"),
    PARENT_ID((short)7, "parentId"),
    PARENT_USER_ID((short)8, "parentUserId"),
    PRAISE((short)9, "praise"),
    ADD_TIME((short)10, "addTime"),
    IMG((short)11, "img");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TOPIC_ID
          return TOPIC_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // CONTENT
          return CONTENT;
        case 5: // REPLIER_IDENTITY
          return REPLIER_IDENTITY;
        case 6: // IDENTITY_ID
          return IDENTITY_ID;
        case 7: // PARENT_ID
          return PARENT_ID;
        case 8: // PARENT_USER_ID
          return PARENT_USER_ID;
        case 9: // PRAISE
          return PRAISE;
        case 10: // ADD_TIME
          return ADD_TIME;
        case 11: // IMG
          return IMG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TOPICID_ISSET_ID = 1;
  private static final int __USERID_ISSET_ID = 2;
  private static final int __IDENTITYID_ISSET_ID = 3;
  private static final int __PARENTID_ISSET_ID = 4;
  private static final int __PARENTUSERID_ISSET_ID = 5;
  private static final int __PRAISE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REPLIER_IDENTITY, _Fields.IDENTITY_ID, _Fields.IMG};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLIER_IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("replierIdentity", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_ID, new org.apache.thrift.meta_data.FieldMetaData("identityId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("parentUserId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRAISE, new org.apache.thrift.meta_data.FieldMetaData("praise", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADD_TIME, new org.apache.thrift.meta_data.FieldMetaData("addTime", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG, new org.apache.thrift.meta_data.FieldMetaData("img", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopicComment.class, metaDataMap);
  }

  public TopicComment() {
  }

  public TopicComment(
    int id,
    int topicId,
    int userId,
    String content,
    int parentId,
    int parentUserId,
    int praise,
    String addTime)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.topicId = topicId;
    setTopicIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.content = content;
    this.parentId = parentId;
    setParentIdIsSet(true);
    this.parentUserId = parentUserId;
    setParentUserIdIsSet(true);
    this.praise = praise;
    setPraiseIsSet(true);
    this.addTime = addTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TopicComment(TopicComment other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.topicId = other.topicId;
    this.userId = other.userId;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetReplierIdentity()) {
      this.replierIdentity = other.replierIdentity;
    }
    this.identityId = other.identityId;
    this.parentId = other.parentId;
    this.parentUserId = other.parentUserId;
    this.praise = other.praise;
    if (other.isSetAddTime()) {
      this.addTime = other.addTime;
    }
    if (other.isSetImg()) {
      this.img = other.img;
    }
  }

  public TopicComment deepCopy() {
    return new TopicComment(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setTopicIdIsSet(false);
    this.topicId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.content = null;
    this.replierIdentity = null;
    setIdentityIdIsSet(false);
    this.identityId = 0;
    setParentIdIsSet(false);
    this.parentId = 0;
    setParentUserIdIsSet(false);
    this.parentUserId = 0;
    setPraiseIsSet(false);
    this.praise = 0;
    this.addTime = null;
    this.img = null;
  }

  public int getId() {
    return this.id;
  }

  public TopicComment setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getTopicId() {
    return this.topicId;
  }

  public TopicComment setTopicId(int topicId) {
    this.topicId = topicId;
    setTopicIdIsSet(true);
    return this;
  }

  public void unsetTopicId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
  }

  /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
  }

  public void setTopicIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public TopicComment setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public TopicComment setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getReplierIdentity() {
    return this.replierIdentity;
  }

  public TopicComment setReplierIdentity(String replierIdentity) {
    this.replierIdentity = replierIdentity;
    return this;
  }

  public void unsetReplierIdentity() {
    this.replierIdentity = null;
  }

  /** Returns true if field replierIdentity is set (has been assigned a value) and false otherwise */
  public boolean isSetReplierIdentity() {
    return this.replierIdentity != null;
  }

  public void setReplierIdentityIsSet(boolean value) {
    if (!value) {
      this.replierIdentity = null;
    }
  }

  public int getIdentityId() {
    return this.identityId;
  }

  public TopicComment setIdentityId(int identityId) {
    this.identityId = identityId;
    setIdentityIdIsSet(true);
    return this;
  }

  public void unsetIdentityId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDENTITYID_ISSET_ID);
  }

  /** Returns true if field identityId is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDENTITYID_ISSET_ID);
  }

  public void setIdentityIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDENTITYID_ISSET_ID, value);
  }

  public int getParentId() {
    return this.parentId;
  }

  public TopicComment setParentId(int parentId) {
    this.parentId = parentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  public int getParentUserId() {
    return this.parentUserId;
  }

  public TopicComment setParentUserId(int parentUserId) {
    this.parentUserId = parentUserId;
    setParentUserIdIsSet(true);
    return this;
  }

  public void unsetParentUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENTUSERID_ISSET_ID);
  }

  /** Returns true if field parentUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENTUSERID_ISSET_ID);
  }

  public void setParentUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENTUSERID_ISSET_ID, value);
  }

  public int getPraise() {
    return this.praise;
  }

  public TopicComment setPraise(int praise) {
    this.praise = praise;
    setPraiseIsSet(true);
    return this;
  }

  public void unsetPraise() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRAISE_ISSET_ID);
  }

  /** Returns true if field praise is set (has been assigned a value) and false otherwise */
  public boolean isSetPraise() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRAISE_ISSET_ID);
  }

  public void setPraiseIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRAISE_ISSET_ID, value);
  }

  public String getAddTime() {
    return this.addTime;
  }

  public TopicComment setAddTime(String addTime) {
    this.addTime = addTime;
    return this;
  }

  public void unsetAddTime() {
    this.addTime = null;
  }

  /** Returns true if field addTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAddTime() {
    return this.addTime != null;
  }

  public void setAddTimeIsSet(boolean value) {
    if (!value) {
      this.addTime = null;
    }
  }

  public String getImg() {
    return this.img;
  }

  public TopicComment setImg(String img) {
    this.img = img;
    return this;
  }

  public void unsetImg() {
    this.img = null;
  }

  /** Returns true if field img is set (has been assigned a value) and false otherwise */
  public boolean isSetImg() {
    return this.img != null;
  }

  public void setImgIsSet(boolean value) {
    if (!value) {
      this.img = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case TOPIC_ID:
      if (value == null) {
        unsetTopicId();
      } else {
        setTopicId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case REPLIER_IDENTITY:
      if (value == null) {
        unsetReplierIdentity();
      } else {
        setReplierIdentity((String)value);
      }
      break;

    case IDENTITY_ID:
      if (value == null) {
        unsetIdentityId();
      } else {
        setIdentityId((Integer)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((Integer)value);
      }
      break;

    case PARENT_USER_ID:
      if (value == null) {
        unsetParentUserId();
      } else {
        setParentUserId((Integer)value);
      }
      break;

    case PRAISE:
      if (value == null) {
        unsetPraise();
      } else {
        setPraise((Integer)value);
      }
      break;

    case ADD_TIME:
      if (value == null) {
        unsetAddTime();
      } else {
        setAddTime((String)value);
      }
      break;

    case IMG:
      if (value == null) {
        unsetImg();
      } else {
        setImg((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TOPIC_ID:
      return getTopicId();

    case USER_ID:
      return getUserId();

    case CONTENT:
      return getContent();

    case REPLIER_IDENTITY:
      return getReplierIdentity();

    case IDENTITY_ID:
      return getIdentityId();

    case PARENT_ID:
      return getParentId();

    case PARENT_USER_ID:
      return getParentUserId();

    case PRAISE:
      return getPraise();

    case ADD_TIME:
      return getAddTime();

    case IMG:
      return getImg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TOPIC_ID:
      return isSetTopicId();
    case USER_ID:
      return isSetUserId();
    case CONTENT:
      return isSetContent();
    case REPLIER_IDENTITY:
      return isSetReplierIdentity();
    case IDENTITY_ID:
      return isSetIdentityId();
    case PARENT_ID:
      return isSetParentId();
    case PARENT_USER_ID:
      return isSetParentUserId();
    case PRAISE:
      return isSetPraise();
    case ADD_TIME:
      return isSetAddTime();
    case IMG:
      return isSetImg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TopicComment)
      return this.equals((TopicComment)that);
    return false;
  }

  public boolean equals(TopicComment that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_topicId = true;
    boolean that_present_topicId = true;
    if (this_present_topicId || that_present_topicId) {
      if (!(this_present_topicId && that_present_topicId))
        return false;
      if (this.topicId != that.topicId)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_replierIdentity = true && this.isSetReplierIdentity();
    boolean that_present_replierIdentity = true && that.isSetReplierIdentity();
    if (this_present_replierIdentity || that_present_replierIdentity) {
      if (!(this_present_replierIdentity && that_present_replierIdentity))
        return false;
      if (!this.replierIdentity.equals(that.replierIdentity))
        return false;
    }

    boolean this_present_identityId = true && this.isSetIdentityId();
    boolean that_present_identityId = true && that.isSetIdentityId();
    if (this_present_identityId || that_present_identityId) {
      if (!(this_present_identityId && that_present_identityId))
        return false;
      if (this.identityId != that.identityId)
        return false;
    }

    boolean this_present_parentId = true;
    boolean that_present_parentId = true;
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    boolean this_present_parentUserId = true;
    boolean that_present_parentUserId = true;
    if (this_present_parentUserId || that_present_parentUserId) {
      if (!(this_present_parentUserId && that_present_parentUserId))
        return false;
      if (this.parentUserId != that.parentUserId)
        return false;
    }

    boolean this_present_praise = true;
    boolean that_present_praise = true;
    if (this_present_praise || that_present_praise) {
      if (!(this_present_praise && that_present_praise))
        return false;
      if (this.praise != that.praise)
        return false;
    }

    boolean this_present_addTime = true && this.isSetAddTime();
    boolean that_present_addTime = true && that.isSetAddTime();
    if (this_present_addTime || that_present_addTime) {
      if (!(this_present_addTime && that_present_addTime))
        return false;
      if (!this.addTime.equals(that.addTime))
        return false;
    }

    boolean this_present_img = true && this.isSetImg();
    boolean that_present_img = true && that.isSetImg();
    if (this_present_img || that_present_img) {
      if (!(this_present_img && that_present_img))
        return false;
      if (!this.img.equals(that.img))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + topicId;

    hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + ((isSetReplierIdentity()) ? 131071 : 524287);
    if (isSetReplierIdentity())
      hashCode = hashCode * 8191 + replierIdentity.hashCode();

    hashCode = hashCode * 8191 + ((isSetIdentityId()) ? 131071 : 524287);
    if (isSetIdentityId())
      hashCode = hashCode * 8191 + identityId;

    hashCode = hashCode * 8191 + parentId;

    hashCode = hashCode * 8191 + parentUserId;

    hashCode = hashCode * 8191 + praise;

    hashCode = hashCode * 8191 + ((isSetAddTime()) ? 131071 : 524287);
    if (isSetAddTime())
      hashCode = hashCode * 8191 + addTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetImg()) ? 131071 : 524287);
    if (isSetImg())
      hashCode = hashCode * 8191 + img.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TopicComment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplierIdentity()).compareTo(other.isSetReplierIdentity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplierIdentity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replierIdentity, other.replierIdentity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityId()).compareTo(other.isSetIdentityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityId, other.identityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentUserId()).compareTo(other.isSetParentUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentUserId, other.parentUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPraise()).compareTo(other.isSetPraise());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPraise()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.praise, other.praise);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddTime()).compareTo(other.isSetAddTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addTime, other.addTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImg()).compareTo(other.isSetImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img, other.img);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TopicComment(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("topicId:");
    sb.append(this.topicId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (isSetReplierIdentity()) {
      if (!first) sb.append(", ");
      sb.append("replierIdentity:");
      if (this.replierIdentity == null) {
        sb.append("null");
      } else {
        sb.append(this.replierIdentity);
      }
      first = false;
    }
    if (isSetIdentityId()) {
      if (!first) sb.append(", ");
      sb.append("identityId:");
      sb.append(this.identityId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("parentId:");
    sb.append(this.parentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentUserId:");
    sb.append(this.parentUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("praise:");
    sb.append(this.praise);
    first = false;
    if (!first) sb.append(", ");
    sb.append("addTime:");
    if (this.addTime == null) {
      sb.append("null");
    } else {
      sb.append(this.addTime);
    }
    first = false;
    if (isSetImg()) {
      if (!first) sb.append(", ");
      sb.append("img:");
      if (this.img == null) {
        sb.append("null");
      } else {
        sb.append(this.img);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'topicId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
    if (content == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'content' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'parentId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'parentUserId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'praise' because it's a primitive and you chose the non-beans generator.
    if (addTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'addTime' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopicCommentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopicCommentStandardScheme getScheme() {
      return new TopicCommentStandardScheme();
    }
  }

  private static class TopicCommentStandardScheme extends org.apache.thrift.scheme.StandardScheme<TopicComment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TopicComment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOPIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.topicId = iprot.readI32();
              struct.setTopicIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REPLIER_IDENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.replierIdentity = iprot.readString();
              struct.setReplierIdentityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IDENTITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.identityId = iprot.readI32();
              struct.setIdentityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentId = iprot.readI32();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARENT_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentUserId = iprot.readI32();
              struct.setParentUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRAISE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.praise = iprot.readI32();
              struct.setPraiseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ADD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addTime = iprot.readString();
              struct.setAddTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.img = iprot.readString();
              struct.setImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTopicId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'topicId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetParentId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'parentId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetParentUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'parentUserId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPraise()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'praise' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TopicComment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
      oprot.writeI32(struct.topicId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.replierIdentity != null) {
        if (struct.isSetReplierIdentity()) {
          oprot.writeFieldBegin(REPLIER_IDENTITY_FIELD_DESC);
          oprot.writeString(struct.replierIdentity);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIdentityId()) {
        oprot.writeFieldBegin(IDENTITY_ID_FIELD_DESC);
        oprot.writeI32(struct.identityId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
      oprot.writeI32(struct.parentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.parentUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRAISE_FIELD_DESC);
      oprot.writeI32(struct.praise);
      oprot.writeFieldEnd();
      if (struct.addTime != null) {
        oprot.writeFieldBegin(ADD_TIME_FIELD_DESC);
        oprot.writeString(struct.addTime);
        oprot.writeFieldEnd();
      }
      if (struct.img != null) {
        if (struct.isSetImg()) {
          oprot.writeFieldBegin(IMG_FIELD_DESC);
          oprot.writeString(struct.img);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopicCommentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopicCommentTupleScheme getScheme() {
      return new TopicCommentTupleScheme();
    }
  }

  private static class TopicCommentTupleScheme extends org.apache.thrift.scheme.TupleScheme<TopicComment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TopicComment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeI32(struct.topicId);
      oprot.writeI32(struct.userId);
      oprot.writeString(struct.content);
      oprot.writeI32(struct.parentId);
      oprot.writeI32(struct.parentUserId);
      oprot.writeI32(struct.praise);
      oprot.writeString(struct.addTime);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReplierIdentity()) {
        optionals.set(0);
      }
      if (struct.isSetIdentityId()) {
        optionals.set(1);
      }
      if (struct.isSetImg()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetReplierIdentity()) {
        oprot.writeString(struct.replierIdentity);
      }
      if (struct.isSetIdentityId()) {
        oprot.writeI32(struct.identityId);
      }
      if (struct.isSetImg()) {
        oprot.writeString(struct.img);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TopicComment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.topicId = iprot.readI32();
      struct.setTopicIdIsSet(true);
      struct.userId = iprot.readI32();
      struct.setUserIdIsSet(true);
      struct.content = iprot.readString();
      struct.setContentIsSet(true);
      struct.parentId = iprot.readI32();
      struct.setParentIdIsSet(true);
      struct.parentUserId = iprot.readI32();
      struct.setParentUserIdIsSet(true);
      struct.praise = iprot.readI32();
      struct.setPraiseIsSet(true);
      struct.addTime = iprot.readString();
      struct.setAddTimeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.replierIdentity = iprot.readString();
        struct.setReplierIdentityIsSet(true);
      }
      if (incoming.get(1)) {
        struct.identityId = iprot.readI32();
        struct.setIdentityIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.img = iprot.readString();
        struct.setImgIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

