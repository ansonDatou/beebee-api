/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.quwan.beebee.entity.archives;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-03-02")
public class Archives implements org.apache.thrift.TBase<Archives, Archives._Fields>, java.io.Serializable, Cloneable, Comparable<Archives> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Archives");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CLICK_FIELD_DESC = new org.apache.thrift.protocol.TField("click", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("relay", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField READ_FINISHED_FIELD_DESC = new org.apache.thrift.protocol.TField("readFinished", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField READ_UNFINISHED_FIELD_DESC = new org.apache.thrift.protocol.TField("readUnfinished", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SORTRANK_FIELD_DESC = new org.apache.thrift.protocol.TField("sortrank", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SHORTTITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("shorttitle", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField WRITER_FIELD_DESC = new org.apache.thrift.protocol.TField("writer", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField LARGEPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("largepic", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField LITPIC1_FIELD_DESC = new org.apache.thrift.protocol.TField("litpic1", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField LITPIC2_FIELD_DESC = new org.apache.thrift.protocol.TField("litpic2", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField LITPIC3_FIELD_DESC = new org.apache.thrift.protocol.TField("litpic3", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField KAPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("kapic", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PUBTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("pubtime", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ADDTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("addtime", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField DELTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("deltime", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField ADDUSER_FIELD_DESC = new org.apache.thrift.protocol.TField("adduser", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField ADDUSERID_FIELD_DESC = new org.apache.thrift.protocol.TField("adduserid", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField SOURCEURL_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceurl", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField CAT1_FIELD_DESC = new org.apache.thrift.protocol.TField("cat1", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField CAT2_FIELD_DESC = new org.apache.thrift.protocol.TField("cat2", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField IS_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("isDelete", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField IS_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("isTop", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField TOPTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("toptime", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField SOURCE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceKey", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField PUBUSERID_FIELD_DESC = new org.apache.thrift.protocol.TField("pubuserid", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField ORG_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("orgTags", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quality", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField VIDEOURL_FIELD_DESC = new org.apache.thrift.protocol.TField("videourl", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField SOURCETYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sourcetype", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField QUALIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("qualified", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField ONCE_UNQUALIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("onceUnqualified", org.apache.thrift.protocol.TType.I32, (short)41);
  private static final org.apache.thrift.protocol.TField LITPIC4_FIELD_DESC = new org.apache.thrift.protocol.TField("litpic4", org.apache.thrift.protocol.TType.I32, (short)42);
  private static final org.apache.thrift.protocol.TField LITPIC5_FIELD_DESC = new org.apache.thrift.protocol.TField("litpic5", org.apache.thrift.protocol.TType.I32, (short)43);
  private static final org.apache.thrift.protocol.TField LITPIC6_FIELD_DESC = new org.apache.thrift.protocol.TField("litpic6", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField UNQUALIFIED_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("unqualifiedReason", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)46);
  private static final org.apache.thrift.protocol.TField PRAISE_FIELD_DESC = new org.apache.thrift.protocol.TField("praise", org.apache.thrift.protocol.TType.I32, (short)47);
  private static final org.apache.thrift.protocol.TField READ_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("readUserId", org.apache.thrift.protocol.TType.STRING, (short)48);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArchivesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArchivesTupleSchemeFactory();

  public int id; // required
  public String body; // optional
  public int click; // required
  public int comment; // required
  public int collection; // required
  public int relay; // required
  public int readFinished; // required
  public int readUnfinished; // required
  public int sortrank; // required
  public String title; // required
  public String shorttitle; // optional
  public String writer; // optional
  public String source; // optional
  public String largepic; // optional
  public String litpic1; // optional
  public String litpic2; // optional
  public String litpic3; // optional
  public String kapic; // optional
  public String pubtime; // optional
  public String addtime; // optional
  public String deltime; // optional
  public String keywords; // optional
  public String tags; // optional
  public String adduser; // optional
  public int adduserid; // optional
  public String sourceurl; // optional
  public String cat1; // optional
  public String cat2; // optional
  public int isDelete; // required
  public int isTop; // required
  public String toptime; // optional
  public String sourceKey; // optional
  public int pubuserid; // optional
  public String orgTags; // optional
  public int quality; // required
  public String videourl; // optional
  public String content; // optional
  public int sourcetype; // required
  public String desc; // optional
  public String qualified; // optional
  public int onceUnqualified; // optional
  public int litpic4; // optional
  public int litpic5; // optional
  public int litpic6; // optional
  public String unqualifiedReason; // optional
  public int sex; // optional
  public int praise; // optional
  public String readUserId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    BODY((short)2, "body"),
    CLICK((short)3, "click"),
    COMMENT((short)4, "comment"),
    COLLECTION((short)5, "collection"),
    RELAY((short)6, "relay"),
    READ_FINISHED((short)7, "readFinished"),
    READ_UNFINISHED((short)8, "readUnfinished"),
    SORTRANK((short)9, "sortrank"),
    TITLE((short)10, "title"),
    SHORTTITLE((short)11, "shorttitle"),
    WRITER((short)12, "writer"),
    SOURCE((short)13, "source"),
    LARGEPIC((short)14, "largepic"),
    LITPIC1((short)15, "litpic1"),
    LITPIC2((short)16, "litpic2"),
    LITPIC3((short)17, "litpic3"),
    KAPIC((short)18, "kapic"),
    PUBTIME((short)19, "pubtime"),
    ADDTIME((short)20, "addtime"),
    DELTIME((short)21, "deltime"),
    KEYWORDS((short)22, "keywords"),
    TAGS((short)23, "tags"),
    ADDUSER((short)24, "adduser"),
    ADDUSERID((short)25, "adduserid"),
    SOURCEURL((short)26, "sourceurl"),
    CAT1((short)27, "cat1"),
    CAT2((short)28, "cat2"),
    IS_DELETE((short)29, "isDelete"),
    IS_TOP((short)30, "isTop"),
    TOPTIME((short)31, "toptime"),
    SOURCE_KEY((short)32, "sourceKey"),
    PUBUSERID((short)33, "pubuserid"),
    ORG_TAGS((short)34, "orgTags"),
    QUALITY((short)35, "quality"),
    VIDEOURL((short)36, "videourl"),
    CONTENT((short)37, "content"),
    SOURCETYPE((short)38, "sourcetype"),
    DESC((short)39, "desc"),
    QUALIFIED((short)40, "qualified"),
    ONCE_UNQUALIFIED((short)41, "onceUnqualified"),
    LITPIC4((short)42, "litpic4"),
    LITPIC5((short)43, "litpic5"),
    LITPIC6((short)44, "litpic6"),
    UNQUALIFIED_REASON((short)45, "unqualifiedReason"),
    SEX((short)46, "sex"),
    PRAISE((short)47, "praise"),
    READ_USER_ID((short)48, "readUserId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // BODY
          return BODY;
        case 3: // CLICK
          return CLICK;
        case 4: // COMMENT
          return COMMENT;
        case 5: // COLLECTION
          return COLLECTION;
        case 6: // RELAY
          return RELAY;
        case 7: // READ_FINISHED
          return READ_FINISHED;
        case 8: // READ_UNFINISHED
          return READ_UNFINISHED;
        case 9: // SORTRANK
          return SORTRANK;
        case 10: // TITLE
          return TITLE;
        case 11: // SHORTTITLE
          return SHORTTITLE;
        case 12: // WRITER
          return WRITER;
        case 13: // SOURCE
          return SOURCE;
        case 14: // LARGEPIC
          return LARGEPIC;
        case 15: // LITPIC1
          return LITPIC1;
        case 16: // LITPIC2
          return LITPIC2;
        case 17: // LITPIC3
          return LITPIC3;
        case 18: // KAPIC
          return KAPIC;
        case 19: // PUBTIME
          return PUBTIME;
        case 20: // ADDTIME
          return ADDTIME;
        case 21: // DELTIME
          return DELTIME;
        case 22: // KEYWORDS
          return KEYWORDS;
        case 23: // TAGS
          return TAGS;
        case 24: // ADDUSER
          return ADDUSER;
        case 25: // ADDUSERID
          return ADDUSERID;
        case 26: // SOURCEURL
          return SOURCEURL;
        case 27: // CAT1
          return CAT1;
        case 28: // CAT2
          return CAT2;
        case 29: // IS_DELETE
          return IS_DELETE;
        case 30: // IS_TOP
          return IS_TOP;
        case 31: // TOPTIME
          return TOPTIME;
        case 32: // SOURCE_KEY
          return SOURCE_KEY;
        case 33: // PUBUSERID
          return PUBUSERID;
        case 34: // ORG_TAGS
          return ORG_TAGS;
        case 35: // QUALITY
          return QUALITY;
        case 36: // VIDEOURL
          return VIDEOURL;
        case 37: // CONTENT
          return CONTENT;
        case 38: // SOURCETYPE
          return SOURCETYPE;
        case 39: // DESC
          return DESC;
        case 40: // QUALIFIED
          return QUALIFIED;
        case 41: // ONCE_UNQUALIFIED
          return ONCE_UNQUALIFIED;
        case 42: // LITPIC4
          return LITPIC4;
        case 43: // LITPIC5
          return LITPIC5;
        case 44: // LITPIC6
          return LITPIC6;
        case 45: // UNQUALIFIED_REASON
          return UNQUALIFIED_REASON;
        case 46: // SEX
          return SEX;
        case 47: // PRAISE
          return PRAISE;
        case 48: // READ_USER_ID
          return READ_USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CLICK_ISSET_ID = 1;
  private static final int __COMMENT_ISSET_ID = 2;
  private static final int __COLLECTION_ISSET_ID = 3;
  private static final int __RELAY_ISSET_ID = 4;
  private static final int __READFINISHED_ISSET_ID = 5;
  private static final int __READUNFINISHED_ISSET_ID = 6;
  private static final int __SORTRANK_ISSET_ID = 7;
  private static final int __ADDUSERID_ISSET_ID = 8;
  private static final int __ISDELETE_ISSET_ID = 9;
  private static final int __ISTOP_ISSET_ID = 10;
  private static final int __PUBUSERID_ISSET_ID = 11;
  private static final int __QUALITY_ISSET_ID = 12;
  private static final int __SOURCETYPE_ISSET_ID = 13;
  private static final int __ONCEUNQUALIFIED_ISSET_ID = 14;
  private static final int __LITPIC4_ISSET_ID = 15;
  private static final int __LITPIC5_ISSET_ID = 16;
  private static final int __LITPIC6_ISSET_ID = 17;
  private static final int __SEX_ISSET_ID = 18;
  private static final int __PRAISE_ISSET_ID = 19;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BODY, _Fields.SHORTTITLE, _Fields.WRITER, _Fields.SOURCE, _Fields.LARGEPIC, _Fields.LITPIC1, _Fields.LITPIC2, _Fields.LITPIC3, _Fields.KAPIC, _Fields.PUBTIME, _Fields.ADDTIME, _Fields.DELTIME, _Fields.KEYWORDS, _Fields.TAGS, _Fields.ADDUSER, _Fields.ADDUSERID, _Fields.SOURCEURL, _Fields.CAT1, _Fields.CAT2, _Fields.TOPTIME, _Fields.SOURCE_KEY, _Fields.PUBUSERID, _Fields.ORG_TAGS, _Fields.VIDEOURL, _Fields.CONTENT, _Fields.DESC, _Fields.QUALIFIED, _Fields.ONCE_UNQUALIFIED, _Fields.LITPIC4, _Fields.LITPIC5, _Fields.LITPIC6, _Fields.UNQUALIFIED_REASON, _Fields.SEX, _Fields.PRAISE, _Fields.READ_USER_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLICK, new org.apache.thrift.meta_data.FieldMetaData("click", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RELAY, new org.apache.thrift.meta_data.FieldMetaData("relay", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.READ_FINISHED, new org.apache.thrift.meta_data.FieldMetaData("readFinished", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.READ_UNFINISHED, new org.apache.thrift.meta_data.FieldMetaData("readUnfinished", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SORTRANK, new org.apache.thrift.meta_data.FieldMetaData("sortrank", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHORTTITLE, new org.apache.thrift.meta_data.FieldMetaData("shorttitle", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WRITER, new org.apache.thrift.meta_data.FieldMetaData("writer", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LARGEPIC, new org.apache.thrift.meta_data.FieldMetaData("largepic", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LITPIC1, new org.apache.thrift.meta_data.FieldMetaData("litpic1", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LITPIC2, new org.apache.thrift.meta_data.FieldMetaData("litpic2", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LITPIC3, new org.apache.thrift.meta_data.FieldMetaData("litpic3", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KAPIC, new org.apache.thrift.meta_data.FieldMetaData("kapic", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBTIME, new org.apache.thrift.meta_data.FieldMetaData("pubtime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDTIME, new org.apache.thrift.meta_data.FieldMetaData("addtime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELTIME, new org.apache.thrift.meta_data.FieldMetaData("deltime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDUSER, new org.apache.thrift.meta_data.FieldMetaData("adduser", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDUSERID, new org.apache.thrift.meta_data.FieldMetaData("adduserid", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCEURL, new org.apache.thrift.meta_data.FieldMetaData("sourceurl", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAT1, new org.apache.thrift.meta_data.FieldMetaData("cat1", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAT2, new org.apache.thrift.meta_data.FieldMetaData("cat2", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_DELETE, new org.apache.thrift.meta_data.FieldMetaData("isDelete", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_TOP, new org.apache.thrift.meta_data.FieldMetaData("isTop", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOPTIME, new org.apache.thrift.meta_data.FieldMetaData("toptime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_KEY, new org.apache.thrift.meta_data.FieldMetaData("sourceKey", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBUSERID, new org.apache.thrift.meta_data.FieldMetaData("pubuserid", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_TAGS, new org.apache.thrift.meta_data.FieldMetaData("orgTags", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUALITY, new org.apache.thrift.meta_data.FieldMetaData("quality", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIDEOURL, new org.apache.thrift.meta_data.FieldMetaData("videourl", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCETYPE, new org.apache.thrift.meta_data.FieldMetaData("sourcetype", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUALIFIED, new org.apache.thrift.meta_data.FieldMetaData("qualified", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ONCE_UNQUALIFIED, new org.apache.thrift.meta_data.FieldMetaData("onceUnqualified", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LITPIC4, new org.apache.thrift.meta_data.FieldMetaData("litpic4", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LITPIC5, new org.apache.thrift.meta_data.FieldMetaData("litpic5", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LITPIC6, new org.apache.thrift.meta_data.FieldMetaData("litpic6", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNQUALIFIED_REASON, new org.apache.thrift.meta_data.FieldMetaData("unqualifiedReason", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRAISE, new org.apache.thrift.meta_data.FieldMetaData("praise", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.READ_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("readUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Archives.class, metaDataMap);
  }

  public Archives() {
  }

  public Archives(
    int id,
    int click,
    int comment,
    int collection,
    int relay,
    int readFinished,
    int readUnfinished,
    int sortrank,
    String title,
    int isDelete,
    int isTop,
    int quality,
    int sourcetype)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.click = click;
    setClickIsSet(true);
    this.comment = comment;
    setCommentIsSet(true);
    this.collection = collection;
    setCollectionIsSet(true);
    this.relay = relay;
    setRelayIsSet(true);
    this.readFinished = readFinished;
    setReadFinishedIsSet(true);
    this.readUnfinished = readUnfinished;
    setReadUnfinishedIsSet(true);
    this.sortrank = sortrank;
    setSortrankIsSet(true);
    this.title = title;
    this.isDelete = isDelete;
    setIsDeleteIsSet(true);
    this.isTop = isTop;
    setIsTopIsSet(true);
    this.quality = quality;
    setQualityIsSet(true);
    this.sourcetype = sourcetype;
    setSourcetypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Archives(Archives other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetBody()) {
      this.body = other.body;
    }
    this.click = other.click;
    this.comment = other.comment;
    this.collection = other.collection;
    this.relay = other.relay;
    this.readFinished = other.readFinished;
    this.readUnfinished = other.readUnfinished;
    this.sortrank = other.sortrank;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetShorttitle()) {
      this.shorttitle = other.shorttitle;
    }
    if (other.isSetWriter()) {
      this.writer = other.writer;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
    if (other.isSetLargepic()) {
      this.largepic = other.largepic;
    }
    if (other.isSetLitpic1()) {
      this.litpic1 = other.litpic1;
    }
    if (other.isSetLitpic2()) {
      this.litpic2 = other.litpic2;
    }
    if (other.isSetLitpic3()) {
      this.litpic3 = other.litpic3;
    }
    if (other.isSetKapic()) {
      this.kapic = other.kapic;
    }
    if (other.isSetPubtime()) {
      this.pubtime = other.pubtime;
    }
    if (other.isSetAddtime()) {
      this.addtime = other.addtime;
    }
    if (other.isSetDeltime()) {
      this.deltime = other.deltime;
    }
    if (other.isSetKeywords()) {
      this.keywords = other.keywords;
    }
    if (other.isSetTags()) {
      this.tags = other.tags;
    }
    if (other.isSetAdduser()) {
      this.adduser = other.adduser;
    }
    this.adduserid = other.adduserid;
    if (other.isSetSourceurl()) {
      this.sourceurl = other.sourceurl;
    }
    if (other.isSetCat1()) {
      this.cat1 = other.cat1;
    }
    if (other.isSetCat2()) {
      this.cat2 = other.cat2;
    }
    this.isDelete = other.isDelete;
    this.isTop = other.isTop;
    if (other.isSetToptime()) {
      this.toptime = other.toptime;
    }
    if (other.isSetSourceKey()) {
      this.sourceKey = other.sourceKey;
    }
    this.pubuserid = other.pubuserid;
    if (other.isSetOrgTags()) {
      this.orgTags = other.orgTags;
    }
    this.quality = other.quality;
    if (other.isSetVideourl()) {
      this.videourl = other.videourl;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.sourcetype = other.sourcetype;
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetQualified()) {
      this.qualified = other.qualified;
    }
    this.onceUnqualified = other.onceUnqualified;
    this.litpic4 = other.litpic4;
    this.litpic5 = other.litpic5;
    this.litpic6 = other.litpic6;
    if (other.isSetUnqualifiedReason()) {
      this.unqualifiedReason = other.unqualifiedReason;
    }
    this.sex = other.sex;
    this.praise = other.praise;
    if (other.isSetReadUserId()) {
      this.readUserId = other.readUserId;
    }
  }

  public Archives deepCopy() {
    return new Archives(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.body = null;
    setClickIsSet(false);
    this.click = 0;
    setCommentIsSet(false);
    this.comment = 0;
    setCollectionIsSet(false);
    this.collection = 0;
    setRelayIsSet(false);
    this.relay = 0;
    setReadFinishedIsSet(false);
    this.readFinished = 0;
    setReadUnfinishedIsSet(false);
    this.readUnfinished = 0;
    setSortrankIsSet(false);
    this.sortrank = 0;
    this.title = null;
    this.shorttitle = null;
    this.writer = null;
    this.source = null;
    this.largepic = null;
    this.litpic1 = null;
    this.litpic2 = null;
    this.litpic3 = null;
    this.kapic = null;
    this.pubtime = null;
    this.addtime = null;
    this.deltime = null;
    this.keywords = null;
    this.tags = null;
    this.adduser = null;
    setAdduseridIsSet(false);
    this.adduserid = 0;
    this.sourceurl = null;
    this.cat1 = null;
    this.cat2 = null;
    setIsDeleteIsSet(false);
    this.isDelete = 0;
    setIsTopIsSet(false);
    this.isTop = 0;
    this.toptime = null;
    this.sourceKey = null;
    setPubuseridIsSet(false);
    this.pubuserid = 0;
    this.orgTags = null;
    setQualityIsSet(false);
    this.quality = 0;
    this.videourl = null;
    this.content = null;
    setSourcetypeIsSet(false);
    this.sourcetype = 0;
    this.desc = null;
    this.qualified = null;
    setOnceUnqualifiedIsSet(false);
    this.onceUnqualified = 0;
    setLitpic4IsSet(false);
    this.litpic4 = 0;
    setLitpic5IsSet(false);
    this.litpic5 = 0;
    setLitpic6IsSet(false);
    this.litpic6 = 0;
    this.unqualifiedReason = null;
    setSexIsSet(false);
    this.sex = 0;
    setPraiseIsSet(false);
    this.praise = 0;
    this.readUserId = null;
  }

  public int getId() {
    return this.id;
  }

  public Archives setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getBody() {
    return this.body;
  }

  public Archives setBody(String body) {
    this.body = body;
    return this;
  }

  public void unsetBody() {
    this.body = null;
  }

  /** Returns true if field body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return this.body != null;
  }

  public void setBodyIsSet(boolean value) {
    if (!value) {
      this.body = null;
    }
  }

  public int getClick() {
    return this.click;
  }

  public Archives setClick(int click) {
    this.click = click;
    setClickIsSet(true);
    return this;
  }

  public void unsetClick() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLICK_ISSET_ID);
  }

  /** Returns true if field click is set (has been assigned a value) and false otherwise */
  public boolean isSetClick() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLICK_ISSET_ID);
  }

  public void setClickIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLICK_ISSET_ID, value);
  }

  public int getComment() {
    return this.comment;
  }

  public Archives setComment(int comment) {
    this.comment = comment;
    setCommentIsSet(true);
    return this;
  }

  public void unsetComment() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMENT_ISSET_ID);
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMENT_ISSET_ID);
  }

  public void setCommentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMENT_ISSET_ID, value);
  }

  public int getCollection() {
    return this.collection;
  }

  public Archives setCollection(int collection) {
    this.collection = collection;
    setCollectionIsSet(true);
    return this;
  }

  public void unsetCollection() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLLECTION_ISSET_ID);
  }

  /** Returns true if field collection is set (has been assigned a value) and false otherwise */
  public boolean isSetCollection() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLLECTION_ISSET_ID);
  }

  public void setCollectionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLLECTION_ISSET_ID, value);
  }

  public int getRelay() {
    return this.relay;
  }

  public Archives setRelay(int relay) {
    this.relay = relay;
    setRelayIsSet(true);
    return this;
  }

  public void unsetRelay() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RELAY_ISSET_ID);
  }

  /** Returns true if field relay is set (has been assigned a value) and false otherwise */
  public boolean isSetRelay() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RELAY_ISSET_ID);
  }

  public void setRelayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RELAY_ISSET_ID, value);
  }

  public int getReadFinished() {
    return this.readFinished;
  }

  public Archives setReadFinished(int readFinished) {
    this.readFinished = readFinished;
    setReadFinishedIsSet(true);
    return this;
  }

  public void unsetReadFinished() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __READFINISHED_ISSET_ID);
  }

  /** Returns true if field readFinished is set (has been assigned a value) and false otherwise */
  public boolean isSetReadFinished() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __READFINISHED_ISSET_ID);
  }

  public void setReadFinishedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __READFINISHED_ISSET_ID, value);
  }

  public int getReadUnfinished() {
    return this.readUnfinished;
  }

  public Archives setReadUnfinished(int readUnfinished) {
    this.readUnfinished = readUnfinished;
    setReadUnfinishedIsSet(true);
    return this;
  }

  public void unsetReadUnfinished() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __READUNFINISHED_ISSET_ID);
  }

  /** Returns true if field readUnfinished is set (has been assigned a value) and false otherwise */
  public boolean isSetReadUnfinished() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __READUNFINISHED_ISSET_ID);
  }

  public void setReadUnfinishedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __READUNFINISHED_ISSET_ID, value);
  }

  public int getSortrank() {
    return this.sortrank;
  }

  public Archives setSortrank(int sortrank) {
    this.sortrank = sortrank;
    setSortrankIsSet(true);
    return this;
  }

  public void unsetSortrank() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SORTRANK_ISSET_ID);
  }

  /** Returns true if field sortrank is set (has been assigned a value) and false otherwise */
  public boolean isSetSortrank() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SORTRANK_ISSET_ID);
  }

  public void setSortrankIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SORTRANK_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public Archives setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getShorttitle() {
    return this.shorttitle;
  }

  public Archives setShorttitle(String shorttitle) {
    this.shorttitle = shorttitle;
    return this;
  }

  public void unsetShorttitle() {
    this.shorttitle = null;
  }

  /** Returns true if field shorttitle is set (has been assigned a value) and false otherwise */
  public boolean isSetShorttitle() {
    return this.shorttitle != null;
  }

  public void setShorttitleIsSet(boolean value) {
    if (!value) {
      this.shorttitle = null;
    }
  }

  public String getWriter() {
    return this.writer;
  }

  public Archives setWriter(String writer) {
    this.writer = writer;
    return this;
  }

  public void unsetWriter() {
    this.writer = null;
  }

  /** Returns true if field writer is set (has been assigned a value) and false otherwise */
  public boolean isSetWriter() {
    return this.writer != null;
  }

  public void setWriterIsSet(boolean value) {
    if (!value) {
      this.writer = null;
    }
  }

  public String getSource() {
    return this.source;
  }

  public Archives setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public String getLargepic() {
    return this.largepic;
  }

  public Archives setLargepic(String largepic) {
    this.largepic = largepic;
    return this;
  }

  public void unsetLargepic() {
    this.largepic = null;
  }

  /** Returns true if field largepic is set (has been assigned a value) and false otherwise */
  public boolean isSetLargepic() {
    return this.largepic != null;
  }

  public void setLargepicIsSet(boolean value) {
    if (!value) {
      this.largepic = null;
    }
  }

  public String getLitpic1() {
    return this.litpic1;
  }

  public Archives setLitpic1(String litpic1) {
    this.litpic1 = litpic1;
    return this;
  }

  public void unsetLitpic1() {
    this.litpic1 = null;
  }

  /** Returns true if field litpic1 is set (has been assigned a value) and false otherwise */
  public boolean isSetLitpic1() {
    return this.litpic1 != null;
  }

  public void setLitpic1IsSet(boolean value) {
    if (!value) {
      this.litpic1 = null;
    }
  }

  public String getLitpic2() {
    return this.litpic2;
  }

  public Archives setLitpic2(String litpic2) {
    this.litpic2 = litpic2;
    return this;
  }

  public void unsetLitpic2() {
    this.litpic2 = null;
  }

  /** Returns true if field litpic2 is set (has been assigned a value) and false otherwise */
  public boolean isSetLitpic2() {
    return this.litpic2 != null;
  }

  public void setLitpic2IsSet(boolean value) {
    if (!value) {
      this.litpic2 = null;
    }
  }

  public String getLitpic3() {
    return this.litpic3;
  }

  public Archives setLitpic3(String litpic3) {
    this.litpic3 = litpic3;
    return this;
  }

  public void unsetLitpic3() {
    this.litpic3 = null;
  }

  /** Returns true if field litpic3 is set (has been assigned a value) and false otherwise */
  public boolean isSetLitpic3() {
    return this.litpic3 != null;
  }

  public void setLitpic3IsSet(boolean value) {
    if (!value) {
      this.litpic3 = null;
    }
  }

  public String getKapic() {
    return this.kapic;
  }

  public Archives setKapic(String kapic) {
    this.kapic = kapic;
    return this;
  }

  public void unsetKapic() {
    this.kapic = null;
  }

  /** Returns true if field kapic is set (has been assigned a value) and false otherwise */
  public boolean isSetKapic() {
    return this.kapic != null;
  }

  public void setKapicIsSet(boolean value) {
    if (!value) {
      this.kapic = null;
    }
  }

  public String getPubtime() {
    return this.pubtime;
  }

  public Archives setPubtime(String pubtime) {
    this.pubtime = pubtime;
    return this;
  }

  public void unsetPubtime() {
    this.pubtime = null;
  }

  /** Returns true if field pubtime is set (has been assigned a value) and false otherwise */
  public boolean isSetPubtime() {
    return this.pubtime != null;
  }

  public void setPubtimeIsSet(boolean value) {
    if (!value) {
      this.pubtime = null;
    }
  }

  public String getAddtime() {
    return this.addtime;
  }

  public Archives setAddtime(String addtime) {
    this.addtime = addtime;
    return this;
  }

  public void unsetAddtime() {
    this.addtime = null;
  }

  /** Returns true if field addtime is set (has been assigned a value) and false otherwise */
  public boolean isSetAddtime() {
    return this.addtime != null;
  }

  public void setAddtimeIsSet(boolean value) {
    if (!value) {
      this.addtime = null;
    }
  }

  public String getDeltime() {
    return this.deltime;
  }

  public Archives setDeltime(String deltime) {
    this.deltime = deltime;
    return this;
  }

  public void unsetDeltime() {
    this.deltime = null;
  }

  /** Returns true if field deltime is set (has been assigned a value) and false otherwise */
  public boolean isSetDeltime() {
    return this.deltime != null;
  }

  public void setDeltimeIsSet(boolean value) {
    if (!value) {
      this.deltime = null;
    }
  }

  public String getKeywords() {
    return this.keywords;
  }

  public Archives setKeywords(String keywords) {
    this.keywords = keywords;
    return this;
  }

  public void unsetKeywords() {
    this.keywords = null;
  }

  /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
  public boolean isSetKeywords() {
    return this.keywords != null;
  }

  public void setKeywordsIsSet(boolean value) {
    if (!value) {
      this.keywords = null;
    }
  }

  public String getTags() {
    return this.tags;
  }

  public Archives setTags(String tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public String getAdduser() {
    return this.adduser;
  }

  public Archives setAdduser(String adduser) {
    this.adduser = adduser;
    return this;
  }

  public void unsetAdduser() {
    this.adduser = null;
  }

  /** Returns true if field adduser is set (has been assigned a value) and false otherwise */
  public boolean isSetAdduser() {
    return this.adduser != null;
  }

  public void setAdduserIsSet(boolean value) {
    if (!value) {
      this.adduser = null;
    }
  }

  public int getAdduserid() {
    return this.adduserid;
  }

  public Archives setAdduserid(int adduserid) {
    this.adduserid = adduserid;
    setAdduseridIsSet(true);
    return this;
  }

  public void unsetAdduserid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ADDUSERID_ISSET_ID);
  }

  /** Returns true if field adduserid is set (has been assigned a value) and false otherwise */
  public boolean isSetAdduserid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ADDUSERID_ISSET_ID);
  }

  public void setAdduseridIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ADDUSERID_ISSET_ID, value);
  }

  public String getSourceurl() {
    return this.sourceurl;
  }

  public Archives setSourceurl(String sourceurl) {
    this.sourceurl = sourceurl;
    return this;
  }

  public void unsetSourceurl() {
    this.sourceurl = null;
  }

  /** Returns true if field sourceurl is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceurl() {
    return this.sourceurl != null;
  }

  public void setSourceurlIsSet(boolean value) {
    if (!value) {
      this.sourceurl = null;
    }
  }

  public String getCat1() {
    return this.cat1;
  }

  public Archives setCat1(String cat1) {
    this.cat1 = cat1;
    return this;
  }

  public void unsetCat1() {
    this.cat1 = null;
  }

  /** Returns true if field cat1 is set (has been assigned a value) and false otherwise */
  public boolean isSetCat1() {
    return this.cat1 != null;
  }

  public void setCat1IsSet(boolean value) {
    if (!value) {
      this.cat1 = null;
    }
  }

  public String getCat2() {
    return this.cat2;
  }

  public Archives setCat2(String cat2) {
    this.cat2 = cat2;
    return this;
  }

  public void unsetCat2() {
    this.cat2 = null;
  }

  /** Returns true if field cat2 is set (has been assigned a value) and false otherwise */
  public boolean isSetCat2() {
    return this.cat2 != null;
  }

  public void setCat2IsSet(boolean value) {
    if (!value) {
      this.cat2 = null;
    }
  }

  public int getIsDelete() {
    return this.isDelete;
  }

  public Archives setIsDelete(int isDelete) {
    this.isDelete = isDelete;
    setIsDeleteIsSet(true);
    return this;
  }

  public void unsetIsDelete() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDELETE_ISSET_ID);
  }

  /** Returns true if field isDelete is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDelete() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDELETE_ISSET_ID);
  }

  public void setIsDeleteIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDELETE_ISSET_ID, value);
  }

  public int getIsTop() {
    return this.isTop;
  }

  public Archives setIsTop(int isTop) {
    this.isTop = isTop;
    setIsTopIsSet(true);
    return this;
  }

  public void unsetIsTop() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISTOP_ISSET_ID);
  }

  /** Returns true if field isTop is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTop() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISTOP_ISSET_ID);
  }

  public void setIsTopIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISTOP_ISSET_ID, value);
  }

  public String getToptime() {
    return this.toptime;
  }

  public Archives setToptime(String toptime) {
    this.toptime = toptime;
    return this;
  }

  public void unsetToptime() {
    this.toptime = null;
  }

  /** Returns true if field toptime is set (has been assigned a value) and false otherwise */
  public boolean isSetToptime() {
    return this.toptime != null;
  }

  public void setToptimeIsSet(boolean value) {
    if (!value) {
      this.toptime = null;
    }
  }

  public String getSourceKey() {
    return this.sourceKey;
  }

  public Archives setSourceKey(String sourceKey) {
    this.sourceKey = sourceKey;
    return this;
  }

  public void unsetSourceKey() {
    this.sourceKey = null;
  }

  /** Returns true if field sourceKey is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceKey() {
    return this.sourceKey != null;
  }

  public void setSourceKeyIsSet(boolean value) {
    if (!value) {
      this.sourceKey = null;
    }
  }

  public int getPubuserid() {
    return this.pubuserid;
  }

  public Archives setPubuserid(int pubuserid) {
    this.pubuserid = pubuserid;
    setPubuseridIsSet(true);
    return this;
  }

  public void unsetPubuserid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PUBUSERID_ISSET_ID);
  }

  /** Returns true if field pubuserid is set (has been assigned a value) and false otherwise */
  public boolean isSetPubuserid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PUBUSERID_ISSET_ID);
  }

  public void setPubuseridIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PUBUSERID_ISSET_ID, value);
  }

  public String getOrgTags() {
    return this.orgTags;
  }

  public Archives setOrgTags(String orgTags) {
    this.orgTags = orgTags;
    return this;
  }

  public void unsetOrgTags() {
    this.orgTags = null;
  }

  /** Returns true if field orgTags is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgTags() {
    return this.orgTags != null;
  }

  public void setOrgTagsIsSet(boolean value) {
    if (!value) {
      this.orgTags = null;
    }
  }

  public int getQuality() {
    return this.quality;
  }

  public Archives setQuality(int quality) {
    this.quality = quality;
    setQualityIsSet(true);
    return this;
  }

  public void unsetQuality() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUALITY_ISSET_ID);
  }

  /** Returns true if field quality is set (has been assigned a value) and false otherwise */
  public boolean isSetQuality() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUALITY_ISSET_ID);
  }

  public void setQualityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUALITY_ISSET_ID, value);
  }

  public String getVideourl() {
    return this.videourl;
  }

  public Archives setVideourl(String videourl) {
    this.videourl = videourl;
    return this;
  }

  public void unsetVideourl() {
    this.videourl = null;
  }

  /** Returns true if field videourl is set (has been assigned a value) and false otherwise */
  public boolean isSetVideourl() {
    return this.videourl != null;
  }

  public void setVideourlIsSet(boolean value) {
    if (!value) {
      this.videourl = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public Archives setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public int getSourcetype() {
    return this.sourcetype;
  }

  public Archives setSourcetype(int sourcetype) {
    this.sourcetype = sourcetype;
    setSourcetypeIsSet(true);
    return this;
  }

  public void unsetSourcetype() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SOURCETYPE_ISSET_ID);
  }

  /** Returns true if field sourcetype is set (has been assigned a value) and false otherwise */
  public boolean isSetSourcetype() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SOURCETYPE_ISSET_ID);
  }

  public void setSourcetypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SOURCETYPE_ISSET_ID, value);
  }

  public String getDesc() {
    return this.desc;
  }

  public Archives setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getQualified() {
    return this.qualified;
  }

  public Archives setQualified(String qualified) {
    this.qualified = qualified;
    return this;
  }

  public void unsetQualified() {
    this.qualified = null;
  }

  /** Returns true if field qualified is set (has been assigned a value) and false otherwise */
  public boolean isSetQualified() {
    return this.qualified != null;
  }

  public void setQualifiedIsSet(boolean value) {
    if (!value) {
      this.qualified = null;
    }
  }

  public int getOnceUnqualified() {
    return this.onceUnqualified;
  }

  public Archives setOnceUnqualified(int onceUnqualified) {
    this.onceUnqualified = onceUnqualified;
    setOnceUnqualifiedIsSet(true);
    return this;
  }

  public void unsetOnceUnqualified() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ONCEUNQUALIFIED_ISSET_ID);
  }

  /** Returns true if field onceUnqualified is set (has been assigned a value) and false otherwise */
  public boolean isSetOnceUnqualified() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ONCEUNQUALIFIED_ISSET_ID);
  }

  public void setOnceUnqualifiedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ONCEUNQUALIFIED_ISSET_ID, value);
  }

  public int getLitpic4() {
    return this.litpic4;
  }

  public Archives setLitpic4(int litpic4) {
    this.litpic4 = litpic4;
    setLitpic4IsSet(true);
    return this;
  }

  public void unsetLitpic4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LITPIC4_ISSET_ID);
  }

  /** Returns true if field litpic4 is set (has been assigned a value) and false otherwise */
  public boolean isSetLitpic4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LITPIC4_ISSET_ID);
  }

  public void setLitpic4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LITPIC4_ISSET_ID, value);
  }

  public int getLitpic5() {
    return this.litpic5;
  }

  public Archives setLitpic5(int litpic5) {
    this.litpic5 = litpic5;
    setLitpic5IsSet(true);
    return this;
  }

  public void unsetLitpic5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LITPIC5_ISSET_ID);
  }

  /** Returns true if field litpic5 is set (has been assigned a value) and false otherwise */
  public boolean isSetLitpic5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LITPIC5_ISSET_ID);
  }

  public void setLitpic5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LITPIC5_ISSET_ID, value);
  }

  public int getLitpic6() {
    return this.litpic6;
  }

  public Archives setLitpic6(int litpic6) {
    this.litpic6 = litpic6;
    setLitpic6IsSet(true);
    return this;
  }

  public void unsetLitpic6() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LITPIC6_ISSET_ID);
  }

  /** Returns true if field litpic6 is set (has been assigned a value) and false otherwise */
  public boolean isSetLitpic6() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LITPIC6_ISSET_ID);
  }

  public void setLitpic6IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LITPIC6_ISSET_ID, value);
  }

  public String getUnqualifiedReason() {
    return this.unqualifiedReason;
  }

  public Archives setUnqualifiedReason(String unqualifiedReason) {
    this.unqualifiedReason = unqualifiedReason;
    return this;
  }

  public void unsetUnqualifiedReason() {
    this.unqualifiedReason = null;
  }

  /** Returns true if field unqualifiedReason is set (has been assigned a value) and false otherwise */
  public boolean isSetUnqualifiedReason() {
    return this.unqualifiedReason != null;
  }

  public void setUnqualifiedReasonIsSet(boolean value) {
    if (!value) {
      this.unqualifiedReason = null;
    }
  }

  public int getSex() {
    return this.sex;
  }

  public Archives setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public int getPraise() {
    return this.praise;
  }

  public Archives setPraise(int praise) {
    this.praise = praise;
    setPraiseIsSet(true);
    return this;
  }

  public void unsetPraise() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRAISE_ISSET_ID);
  }

  /** Returns true if field praise is set (has been assigned a value) and false otherwise */
  public boolean isSetPraise() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRAISE_ISSET_ID);
  }

  public void setPraiseIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRAISE_ISSET_ID, value);
  }

  public String getReadUserId() {
    return this.readUserId;
  }

  public Archives setReadUserId(String readUserId) {
    this.readUserId = readUserId;
    return this;
  }

  public void unsetReadUserId() {
    this.readUserId = null;
  }

  /** Returns true if field readUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetReadUserId() {
    return this.readUserId != null;
  }

  public void setReadUserIdIsSet(boolean value) {
    if (!value) {
      this.readUserId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((String)value);
      }
      break;

    case CLICK:
      if (value == null) {
        unsetClick();
      } else {
        setClick((Integer)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((Integer)value);
      }
      break;

    case COLLECTION:
      if (value == null) {
        unsetCollection();
      } else {
        setCollection((Integer)value);
      }
      break;

    case RELAY:
      if (value == null) {
        unsetRelay();
      } else {
        setRelay((Integer)value);
      }
      break;

    case READ_FINISHED:
      if (value == null) {
        unsetReadFinished();
      } else {
        setReadFinished((Integer)value);
      }
      break;

    case READ_UNFINISHED:
      if (value == null) {
        unsetReadUnfinished();
      } else {
        setReadUnfinished((Integer)value);
      }
      break;

    case SORTRANK:
      if (value == null) {
        unsetSortrank();
      } else {
        setSortrank((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case SHORTTITLE:
      if (value == null) {
        unsetShorttitle();
      } else {
        setShorttitle((String)value);
      }
      break;

    case WRITER:
      if (value == null) {
        unsetWriter();
      } else {
        setWriter((String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case LARGEPIC:
      if (value == null) {
        unsetLargepic();
      } else {
        setLargepic((String)value);
      }
      break;

    case LITPIC1:
      if (value == null) {
        unsetLitpic1();
      } else {
        setLitpic1((String)value);
      }
      break;

    case LITPIC2:
      if (value == null) {
        unsetLitpic2();
      } else {
        setLitpic2((String)value);
      }
      break;

    case LITPIC3:
      if (value == null) {
        unsetLitpic3();
      } else {
        setLitpic3((String)value);
      }
      break;

    case KAPIC:
      if (value == null) {
        unsetKapic();
      } else {
        setKapic((String)value);
      }
      break;

    case PUBTIME:
      if (value == null) {
        unsetPubtime();
      } else {
        setPubtime((String)value);
      }
      break;

    case ADDTIME:
      if (value == null) {
        unsetAddtime();
      } else {
        setAddtime((String)value);
      }
      break;

    case DELTIME:
      if (value == null) {
        unsetDeltime();
      } else {
        setDeltime((String)value);
      }
      break;

    case KEYWORDS:
      if (value == null) {
        unsetKeywords();
      } else {
        setKeywords((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((String)value);
      }
      break;

    case ADDUSER:
      if (value == null) {
        unsetAdduser();
      } else {
        setAdduser((String)value);
      }
      break;

    case ADDUSERID:
      if (value == null) {
        unsetAdduserid();
      } else {
        setAdduserid((Integer)value);
      }
      break;

    case SOURCEURL:
      if (value == null) {
        unsetSourceurl();
      } else {
        setSourceurl((String)value);
      }
      break;

    case CAT1:
      if (value == null) {
        unsetCat1();
      } else {
        setCat1((String)value);
      }
      break;

    case CAT2:
      if (value == null) {
        unsetCat2();
      } else {
        setCat2((String)value);
      }
      break;

    case IS_DELETE:
      if (value == null) {
        unsetIsDelete();
      } else {
        setIsDelete((Integer)value);
      }
      break;

    case IS_TOP:
      if (value == null) {
        unsetIsTop();
      } else {
        setIsTop((Integer)value);
      }
      break;

    case TOPTIME:
      if (value == null) {
        unsetToptime();
      } else {
        setToptime((String)value);
      }
      break;

    case SOURCE_KEY:
      if (value == null) {
        unsetSourceKey();
      } else {
        setSourceKey((String)value);
      }
      break;

    case PUBUSERID:
      if (value == null) {
        unsetPubuserid();
      } else {
        setPubuserid((Integer)value);
      }
      break;

    case ORG_TAGS:
      if (value == null) {
        unsetOrgTags();
      } else {
        setOrgTags((String)value);
      }
      break;

    case QUALITY:
      if (value == null) {
        unsetQuality();
      } else {
        setQuality((Integer)value);
      }
      break;

    case VIDEOURL:
      if (value == null) {
        unsetVideourl();
      } else {
        setVideourl((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case SOURCETYPE:
      if (value == null) {
        unsetSourcetype();
      } else {
        setSourcetype((Integer)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case QUALIFIED:
      if (value == null) {
        unsetQualified();
      } else {
        setQualified((String)value);
      }
      break;

    case ONCE_UNQUALIFIED:
      if (value == null) {
        unsetOnceUnqualified();
      } else {
        setOnceUnqualified((Integer)value);
      }
      break;

    case LITPIC4:
      if (value == null) {
        unsetLitpic4();
      } else {
        setLitpic4((Integer)value);
      }
      break;

    case LITPIC5:
      if (value == null) {
        unsetLitpic5();
      } else {
        setLitpic5((Integer)value);
      }
      break;

    case LITPIC6:
      if (value == null) {
        unsetLitpic6();
      } else {
        setLitpic6((Integer)value);
      }
      break;

    case UNQUALIFIED_REASON:
      if (value == null) {
        unsetUnqualifiedReason();
      } else {
        setUnqualifiedReason((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Integer)value);
      }
      break;

    case PRAISE:
      if (value == null) {
        unsetPraise();
      } else {
        setPraise((Integer)value);
      }
      break;

    case READ_USER_ID:
      if (value == null) {
        unsetReadUserId();
      } else {
        setReadUserId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case BODY:
      return getBody();

    case CLICK:
      return getClick();

    case COMMENT:
      return getComment();

    case COLLECTION:
      return getCollection();

    case RELAY:
      return getRelay();

    case READ_FINISHED:
      return getReadFinished();

    case READ_UNFINISHED:
      return getReadUnfinished();

    case SORTRANK:
      return getSortrank();

    case TITLE:
      return getTitle();

    case SHORTTITLE:
      return getShorttitle();

    case WRITER:
      return getWriter();

    case SOURCE:
      return getSource();

    case LARGEPIC:
      return getLargepic();

    case LITPIC1:
      return getLitpic1();

    case LITPIC2:
      return getLitpic2();

    case LITPIC3:
      return getLitpic3();

    case KAPIC:
      return getKapic();

    case PUBTIME:
      return getPubtime();

    case ADDTIME:
      return getAddtime();

    case DELTIME:
      return getDeltime();

    case KEYWORDS:
      return getKeywords();

    case TAGS:
      return getTags();

    case ADDUSER:
      return getAdduser();

    case ADDUSERID:
      return getAdduserid();

    case SOURCEURL:
      return getSourceurl();

    case CAT1:
      return getCat1();

    case CAT2:
      return getCat2();

    case IS_DELETE:
      return getIsDelete();

    case IS_TOP:
      return getIsTop();

    case TOPTIME:
      return getToptime();

    case SOURCE_KEY:
      return getSourceKey();

    case PUBUSERID:
      return getPubuserid();

    case ORG_TAGS:
      return getOrgTags();

    case QUALITY:
      return getQuality();

    case VIDEOURL:
      return getVideourl();

    case CONTENT:
      return getContent();

    case SOURCETYPE:
      return getSourcetype();

    case DESC:
      return getDesc();

    case QUALIFIED:
      return getQualified();

    case ONCE_UNQUALIFIED:
      return getOnceUnqualified();

    case LITPIC4:
      return getLitpic4();

    case LITPIC5:
      return getLitpic5();

    case LITPIC6:
      return getLitpic6();

    case UNQUALIFIED_REASON:
      return getUnqualifiedReason();

    case SEX:
      return getSex();

    case PRAISE:
      return getPraise();

    case READ_USER_ID:
      return getReadUserId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case BODY:
      return isSetBody();
    case CLICK:
      return isSetClick();
    case COMMENT:
      return isSetComment();
    case COLLECTION:
      return isSetCollection();
    case RELAY:
      return isSetRelay();
    case READ_FINISHED:
      return isSetReadFinished();
    case READ_UNFINISHED:
      return isSetReadUnfinished();
    case SORTRANK:
      return isSetSortrank();
    case TITLE:
      return isSetTitle();
    case SHORTTITLE:
      return isSetShorttitle();
    case WRITER:
      return isSetWriter();
    case SOURCE:
      return isSetSource();
    case LARGEPIC:
      return isSetLargepic();
    case LITPIC1:
      return isSetLitpic1();
    case LITPIC2:
      return isSetLitpic2();
    case LITPIC3:
      return isSetLitpic3();
    case KAPIC:
      return isSetKapic();
    case PUBTIME:
      return isSetPubtime();
    case ADDTIME:
      return isSetAddtime();
    case DELTIME:
      return isSetDeltime();
    case KEYWORDS:
      return isSetKeywords();
    case TAGS:
      return isSetTags();
    case ADDUSER:
      return isSetAdduser();
    case ADDUSERID:
      return isSetAdduserid();
    case SOURCEURL:
      return isSetSourceurl();
    case CAT1:
      return isSetCat1();
    case CAT2:
      return isSetCat2();
    case IS_DELETE:
      return isSetIsDelete();
    case IS_TOP:
      return isSetIsTop();
    case TOPTIME:
      return isSetToptime();
    case SOURCE_KEY:
      return isSetSourceKey();
    case PUBUSERID:
      return isSetPubuserid();
    case ORG_TAGS:
      return isSetOrgTags();
    case QUALITY:
      return isSetQuality();
    case VIDEOURL:
      return isSetVideourl();
    case CONTENT:
      return isSetContent();
    case SOURCETYPE:
      return isSetSourcetype();
    case DESC:
      return isSetDesc();
    case QUALIFIED:
      return isSetQualified();
    case ONCE_UNQUALIFIED:
      return isSetOnceUnqualified();
    case LITPIC4:
      return isSetLitpic4();
    case LITPIC5:
      return isSetLitpic5();
    case LITPIC6:
      return isSetLitpic6();
    case UNQUALIFIED_REASON:
      return isSetUnqualifiedReason();
    case SEX:
      return isSetSex();
    case PRAISE:
      return isSetPraise();
    case READ_USER_ID:
      return isSetReadUserId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Archives)
      return this.equals((Archives)that);
    return false;
  }

  public boolean equals(Archives that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_body = true && this.isSetBody();
    boolean that_present_body = true && that.isSetBody();
    if (this_present_body || that_present_body) {
      if (!(this_present_body && that_present_body))
        return false;
      if (!this.body.equals(that.body))
        return false;
    }

    boolean this_present_click = true;
    boolean that_present_click = true;
    if (this_present_click || that_present_click) {
      if (!(this_present_click && that_present_click))
        return false;
      if (this.click != that.click)
        return false;
    }

    boolean this_present_comment = true;
    boolean that_present_comment = true;
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (this.comment != that.comment)
        return false;
    }

    boolean this_present_collection = true;
    boolean that_present_collection = true;
    if (this_present_collection || that_present_collection) {
      if (!(this_present_collection && that_present_collection))
        return false;
      if (this.collection != that.collection)
        return false;
    }

    boolean this_present_relay = true;
    boolean that_present_relay = true;
    if (this_present_relay || that_present_relay) {
      if (!(this_present_relay && that_present_relay))
        return false;
      if (this.relay != that.relay)
        return false;
    }

    boolean this_present_readFinished = true;
    boolean that_present_readFinished = true;
    if (this_present_readFinished || that_present_readFinished) {
      if (!(this_present_readFinished && that_present_readFinished))
        return false;
      if (this.readFinished != that.readFinished)
        return false;
    }

    boolean this_present_readUnfinished = true;
    boolean that_present_readUnfinished = true;
    if (this_present_readUnfinished || that_present_readUnfinished) {
      if (!(this_present_readUnfinished && that_present_readUnfinished))
        return false;
      if (this.readUnfinished != that.readUnfinished)
        return false;
    }

    boolean this_present_sortrank = true;
    boolean that_present_sortrank = true;
    if (this_present_sortrank || that_present_sortrank) {
      if (!(this_present_sortrank && that_present_sortrank))
        return false;
      if (this.sortrank != that.sortrank)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_shorttitle = true && this.isSetShorttitle();
    boolean that_present_shorttitle = true && that.isSetShorttitle();
    if (this_present_shorttitle || that_present_shorttitle) {
      if (!(this_present_shorttitle && that_present_shorttitle))
        return false;
      if (!this.shorttitle.equals(that.shorttitle))
        return false;
    }

    boolean this_present_writer = true && this.isSetWriter();
    boolean that_present_writer = true && that.isSetWriter();
    if (this_present_writer || that_present_writer) {
      if (!(this_present_writer && that_present_writer))
        return false;
      if (!this.writer.equals(that.writer))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_largepic = true && this.isSetLargepic();
    boolean that_present_largepic = true && that.isSetLargepic();
    if (this_present_largepic || that_present_largepic) {
      if (!(this_present_largepic && that_present_largepic))
        return false;
      if (!this.largepic.equals(that.largepic))
        return false;
    }

    boolean this_present_litpic1 = true && this.isSetLitpic1();
    boolean that_present_litpic1 = true && that.isSetLitpic1();
    if (this_present_litpic1 || that_present_litpic1) {
      if (!(this_present_litpic1 && that_present_litpic1))
        return false;
      if (!this.litpic1.equals(that.litpic1))
        return false;
    }

    boolean this_present_litpic2 = true && this.isSetLitpic2();
    boolean that_present_litpic2 = true && that.isSetLitpic2();
    if (this_present_litpic2 || that_present_litpic2) {
      if (!(this_present_litpic2 && that_present_litpic2))
        return false;
      if (!this.litpic2.equals(that.litpic2))
        return false;
    }

    boolean this_present_litpic3 = true && this.isSetLitpic3();
    boolean that_present_litpic3 = true && that.isSetLitpic3();
    if (this_present_litpic3 || that_present_litpic3) {
      if (!(this_present_litpic3 && that_present_litpic3))
        return false;
      if (!this.litpic3.equals(that.litpic3))
        return false;
    }

    boolean this_present_kapic = true && this.isSetKapic();
    boolean that_present_kapic = true && that.isSetKapic();
    if (this_present_kapic || that_present_kapic) {
      if (!(this_present_kapic && that_present_kapic))
        return false;
      if (!this.kapic.equals(that.kapic))
        return false;
    }

    boolean this_present_pubtime = true && this.isSetPubtime();
    boolean that_present_pubtime = true && that.isSetPubtime();
    if (this_present_pubtime || that_present_pubtime) {
      if (!(this_present_pubtime && that_present_pubtime))
        return false;
      if (!this.pubtime.equals(that.pubtime))
        return false;
    }

    boolean this_present_addtime = true && this.isSetAddtime();
    boolean that_present_addtime = true && that.isSetAddtime();
    if (this_present_addtime || that_present_addtime) {
      if (!(this_present_addtime && that_present_addtime))
        return false;
      if (!this.addtime.equals(that.addtime))
        return false;
    }

    boolean this_present_deltime = true && this.isSetDeltime();
    boolean that_present_deltime = true && that.isSetDeltime();
    if (this_present_deltime || that_present_deltime) {
      if (!(this_present_deltime && that_present_deltime))
        return false;
      if (!this.deltime.equals(that.deltime))
        return false;
    }

    boolean this_present_keywords = true && this.isSetKeywords();
    boolean that_present_keywords = true && that.isSetKeywords();
    if (this_present_keywords || that_present_keywords) {
      if (!(this_present_keywords && that_present_keywords))
        return false;
      if (!this.keywords.equals(that.keywords))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_adduser = true && this.isSetAdduser();
    boolean that_present_adduser = true && that.isSetAdduser();
    if (this_present_adduser || that_present_adduser) {
      if (!(this_present_adduser && that_present_adduser))
        return false;
      if (!this.adduser.equals(that.adduser))
        return false;
    }

    boolean this_present_adduserid = true && this.isSetAdduserid();
    boolean that_present_adduserid = true && that.isSetAdduserid();
    if (this_present_adduserid || that_present_adduserid) {
      if (!(this_present_adduserid && that_present_adduserid))
        return false;
      if (this.adduserid != that.adduserid)
        return false;
    }

    boolean this_present_sourceurl = true && this.isSetSourceurl();
    boolean that_present_sourceurl = true && that.isSetSourceurl();
    if (this_present_sourceurl || that_present_sourceurl) {
      if (!(this_present_sourceurl && that_present_sourceurl))
        return false;
      if (!this.sourceurl.equals(that.sourceurl))
        return false;
    }

    boolean this_present_cat1 = true && this.isSetCat1();
    boolean that_present_cat1 = true && that.isSetCat1();
    if (this_present_cat1 || that_present_cat1) {
      if (!(this_present_cat1 && that_present_cat1))
        return false;
      if (!this.cat1.equals(that.cat1))
        return false;
    }

    boolean this_present_cat2 = true && this.isSetCat2();
    boolean that_present_cat2 = true && that.isSetCat2();
    if (this_present_cat2 || that_present_cat2) {
      if (!(this_present_cat2 && that_present_cat2))
        return false;
      if (!this.cat2.equals(that.cat2))
        return false;
    }

    boolean this_present_isDelete = true;
    boolean that_present_isDelete = true;
    if (this_present_isDelete || that_present_isDelete) {
      if (!(this_present_isDelete && that_present_isDelete))
        return false;
      if (this.isDelete != that.isDelete)
        return false;
    }

    boolean this_present_isTop = true;
    boolean that_present_isTop = true;
    if (this_present_isTop || that_present_isTop) {
      if (!(this_present_isTop && that_present_isTop))
        return false;
      if (this.isTop != that.isTop)
        return false;
    }

    boolean this_present_toptime = true && this.isSetToptime();
    boolean that_present_toptime = true && that.isSetToptime();
    if (this_present_toptime || that_present_toptime) {
      if (!(this_present_toptime && that_present_toptime))
        return false;
      if (!this.toptime.equals(that.toptime))
        return false;
    }

    boolean this_present_sourceKey = true && this.isSetSourceKey();
    boolean that_present_sourceKey = true && that.isSetSourceKey();
    if (this_present_sourceKey || that_present_sourceKey) {
      if (!(this_present_sourceKey && that_present_sourceKey))
        return false;
      if (!this.sourceKey.equals(that.sourceKey))
        return false;
    }

    boolean this_present_pubuserid = true && this.isSetPubuserid();
    boolean that_present_pubuserid = true && that.isSetPubuserid();
    if (this_present_pubuserid || that_present_pubuserid) {
      if (!(this_present_pubuserid && that_present_pubuserid))
        return false;
      if (this.pubuserid != that.pubuserid)
        return false;
    }

    boolean this_present_orgTags = true && this.isSetOrgTags();
    boolean that_present_orgTags = true && that.isSetOrgTags();
    if (this_present_orgTags || that_present_orgTags) {
      if (!(this_present_orgTags && that_present_orgTags))
        return false;
      if (!this.orgTags.equals(that.orgTags))
        return false;
    }

    boolean this_present_quality = true;
    boolean that_present_quality = true;
    if (this_present_quality || that_present_quality) {
      if (!(this_present_quality && that_present_quality))
        return false;
      if (this.quality != that.quality)
        return false;
    }

    boolean this_present_videourl = true && this.isSetVideourl();
    boolean that_present_videourl = true && that.isSetVideourl();
    if (this_present_videourl || that_present_videourl) {
      if (!(this_present_videourl && that_present_videourl))
        return false;
      if (!this.videourl.equals(that.videourl))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_sourcetype = true;
    boolean that_present_sourcetype = true;
    if (this_present_sourcetype || that_present_sourcetype) {
      if (!(this_present_sourcetype && that_present_sourcetype))
        return false;
      if (this.sourcetype != that.sourcetype)
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_qualified = true && this.isSetQualified();
    boolean that_present_qualified = true && that.isSetQualified();
    if (this_present_qualified || that_present_qualified) {
      if (!(this_present_qualified && that_present_qualified))
        return false;
      if (!this.qualified.equals(that.qualified))
        return false;
    }

    boolean this_present_onceUnqualified = true && this.isSetOnceUnqualified();
    boolean that_present_onceUnqualified = true && that.isSetOnceUnqualified();
    if (this_present_onceUnqualified || that_present_onceUnqualified) {
      if (!(this_present_onceUnqualified && that_present_onceUnqualified))
        return false;
      if (this.onceUnqualified != that.onceUnqualified)
        return false;
    }

    boolean this_present_litpic4 = true && this.isSetLitpic4();
    boolean that_present_litpic4 = true && that.isSetLitpic4();
    if (this_present_litpic4 || that_present_litpic4) {
      if (!(this_present_litpic4 && that_present_litpic4))
        return false;
      if (this.litpic4 != that.litpic4)
        return false;
    }

    boolean this_present_litpic5 = true && this.isSetLitpic5();
    boolean that_present_litpic5 = true && that.isSetLitpic5();
    if (this_present_litpic5 || that_present_litpic5) {
      if (!(this_present_litpic5 && that_present_litpic5))
        return false;
      if (this.litpic5 != that.litpic5)
        return false;
    }

    boolean this_present_litpic6 = true && this.isSetLitpic6();
    boolean that_present_litpic6 = true && that.isSetLitpic6();
    if (this_present_litpic6 || that_present_litpic6) {
      if (!(this_present_litpic6 && that_present_litpic6))
        return false;
      if (this.litpic6 != that.litpic6)
        return false;
    }

    boolean this_present_unqualifiedReason = true && this.isSetUnqualifiedReason();
    boolean that_present_unqualifiedReason = true && that.isSetUnqualifiedReason();
    if (this_present_unqualifiedReason || that_present_unqualifiedReason) {
      if (!(this_present_unqualifiedReason && that_present_unqualifiedReason))
        return false;
      if (!this.unqualifiedReason.equals(that.unqualifiedReason))
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_praise = true && this.isSetPraise();
    boolean that_present_praise = true && that.isSetPraise();
    if (this_present_praise || that_present_praise) {
      if (!(this_present_praise && that_present_praise))
        return false;
      if (this.praise != that.praise)
        return false;
    }

    boolean this_present_readUserId = true && this.isSetReadUserId();
    boolean that_present_readUserId = true && that.isSetReadUserId();
    if (this_present_readUserId || that_present_readUserId) {
      if (!(this_present_readUserId && that_present_readUserId))
        return false;
      if (!this.readUserId.equals(that.readUserId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetBody()) ? 131071 : 524287);
    if (isSetBody())
      hashCode = hashCode * 8191 + body.hashCode();

    hashCode = hashCode * 8191 + click;

    hashCode = hashCode * 8191 + comment;

    hashCode = hashCode * 8191 + collection;

    hashCode = hashCode * 8191 + relay;

    hashCode = hashCode * 8191 + readFinished;

    hashCode = hashCode * 8191 + readUnfinished;

    hashCode = hashCode * 8191 + sortrank;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetShorttitle()) ? 131071 : 524287);
    if (isSetShorttitle())
      hashCode = hashCode * 8191 + shorttitle.hashCode();

    hashCode = hashCode * 8191 + ((isSetWriter()) ? 131071 : 524287);
    if (isSetWriter())
      hashCode = hashCode * 8191 + writer.hashCode();

    hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
    if (isSetSource())
      hashCode = hashCode * 8191 + source.hashCode();

    hashCode = hashCode * 8191 + ((isSetLargepic()) ? 131071 : 524287);
    if (isSetLargepic())
      hashCode = hashCode * 8191 + largepic.hashCode();

    hashCode = hashCode * 8191 + ((isSetLitpic1()) ? 131071 : 524287);
    if (isSetLitpic1())
      hashCode = hashCode * 8191 + litpic1.hashCode();

    hashCode = hashCode * 8191 + ((isSetLitpic2()) ? 131071 : 524287);
    if (isSetLitpic2())
      hashCode = hashCode * 8191 + litpic2.hashCode();

    hashCode = hashCode * 8191 + ((isSetLitpic3()) ? 131071 : 524287);
    if (isSetLitpic3())
      hashCode = hashCode * 8191 + litpic3.hashCode();

    hashCode = hashCode * 8191 + ((isSetKapic()) ? 131071 : 524287);
    if (isSetKapic())
      hashCode = hashCode * 8191 + kapic.hashCode();

    hashCode = hashCode * 8191 + ((isSetPubtime()) ? 131071 : 524287);
    if (isSetPubtime())
      hashCode = hashCode * 8191 + pubtime.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddtime()) ? 131071 : 524287);
    if (isSetAddtime())
      hashCode = hashCode * 8191 + addtime.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeltime()) ? 131071 : 524287);
    if (isSetDeltime())
      hashCode = hashCode * 8191 + deltime.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeywords()) ? 131071 : 524287);
    if (isSetKeywords())
      hashCode = hashCode * 8191 + keywords.hashCode();

    hashCode = hashCode * 8191 + ((isSetTags()) ? 131071 : 524287);
    if (isSetTags())
      hashCode = hashCode * 8191 + tags.hashCode();

    hashCode = hashCode * 8191 + ((isSetAdduser()) ? 131071 : 524287);
    if (isSetAdduser())
      hashCode = hashCode * 8191 + adduser.hashCode();

    hashCode = hashCode * 8191 + ((isSetAdduserid()) ? 131071 : 524287);
    if (isSetAdduserid())
      hashCode = hashCode * 8191 + adduserid;

    hashCode = hashCode * 8191 + ((isSetSourceurl()) ? 131071 : 524287);
    if (isSetSourceurl())
      hashCode = hashCode * 8191 + sourceurl.hashCode();

    hashCode = hashCode * 8191 + ((isSetCat1()) ? 131071 : 524287);
    if (isSetCat1())
      hashCode = hashCode * 8191 + cat1.hashCode();

    hashCode = hashCode * 8191 + ((isSetCat2()) ? 131071 : 524287);
    if (isSetCat2())
      hashCode = hashCode * 8191 + cat2.hashCode();

    hashCode = hashCode * 8191 + isDelete;

    hashCode = hashCode * 8191 + isTop;

    hashCode = hashCode * 8191 + ((isSetToptime()) ? 131071 : 524287);
    if (isSetToptime())
      hashCode = hashCode * 8191 + toptime.hashCode();

    hashCode = hashCode * 8191 + ((isSetSourceKey()) ? 131071 : 524287);
    if (isSetSourceKey())
      hashCode = hashCode * 8191 + sourceKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetPubuserid()) ? 131071 : 524287);
    if (isSetPubuserid())
      hashCode = hashCode * 8191 + pubuserid;

    hashCode = hashCode * 8191 + ((isSetOrgTags()) ? 131071 : 524287);
    if (isSetOrgTags())
      hashCode = hashCode * 8191 + orgTags.hashCode();

    hashCode = hashCode * 8191 + quality;

    hashCode = hashCode * 8191 + ((isSetVideourl()) ? 131071 : 524287);
    if (isSetVideourl())
      hashCode = hashCode * 8191 + videourl.hashCode();

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + sourcetype;

    hashCode = hashCode * 8191 + ((isSetDesc()) ? 131071 : 524287);
    if (isSetDesc())
      hashCode = hashCode * 8191 + desc.hashCode();

    hashCode = hashCode * 8191 + ((isSetQualified()) ? 131071 : 524287);
    if (isSetQualified())
      hashCode = hashCode * 8191 + qualified.hashCode();

    hashCode = hashCode * 8191 + ((isSetOnceUnqualified()) ? 131071 : 524287);
    if (isSetOnceUnqualified())
      hashCode = hashCode * 8191 + onceUnqualified;

    hashCode = hashCode * 8191 + ((isSetLitpic4()) ? 131071 : 524287);
    if (isSetLitpic4())
      hashCode = hashCode * 8191 + litpic4;

    hashCode = hashCode * 8191 + ((isSetLitpic5()) ? 131071 : 524287);
    if (isSetLitpic5())
      hashCode = hashCode * 8191 + litpic5;

    hashCode = hashCode * 8191 + ((isSetLitpic6()) ? 131071 : 524287);
    if (isSetLitpic6())
      hashCode = hashCode * 8191 + litpic6;

    hashCode = hashCode * 8191 + ((isSetUnqualifiedReason()) ? 131071 : 524287);
    if (isSetUnqualifiedReason())
      hashCode = hashCode * 8191 + unqualifiedReason.hashCode();

    hashCode = hashCode * 8191 + ((isSetSex()) ? 131071 : 524287);
    if (isSetSex())
      hashCode = hashCode * 8191 + sex;

    hashCode = hashCode * 8191 + ((isSetPraise()) ? 131071 : 524287);
    if (isSetPraise())
      hashCode = hashCode * 8191 + praise;

    hashCode = hashCode * 8191 + ((isSetReadUserId()) ? 131071 : 524287);
    if (isSetReadUserId())
      hashCode = hashCode * 8191 + readUserId.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Archives other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClick()).compareTo(other.isSetClick());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClick()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.click, other.click);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollection()).compareTo(other.isSetCollection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, other.collection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelay()).compareTo(other.isSetRelay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relay, other.relay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadFinished()).compareTo(other.isSetReadFinished());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadFinished()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readFinished, other.readFinished);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadUnfinished()).compareTo(other.isSetReadUnfinished());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadUnfinished()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readUnfinished, other.readUnfinished);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortrank()).compareTo(other.isSetSortrank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortrank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortrank, other.sortrank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShorttitle()).compareTo(other.isSetShorttitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShorttitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shorttitle, other.shorttitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWriter()).compareTo(other.isSetWriter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writer, other.writer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLargepic()).compareTo(other.isSetLargepic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLargepic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.largepic, other.largepic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLitpic1()).compareTo(other.isSetLitpic1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLitpic1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.litpic1, other.litpic1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLitpic2()).compareTo(other.isSetLitpic2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLitpic2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.litpic2, other.litpic2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLitpic3()).compareTo(other.isSetLitpic3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLitpic3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.litpic3, other.litpic3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKapic()).compareTo(other.isSetKapic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKapic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kapic, other.kapic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPubtime()).compareTo(other.isSetPubtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPubtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubtime, other.pubtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddtime()).compareTo(other.isSetAddtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addtime, other.addtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeltime()).compareTo(other.isSetDeltime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeltime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deltime, other.deltime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeywords()).compareTo(other.isSetKeywords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeywords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, other.keywords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdduser()).compareTo(other.isSetAdduser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdduser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adduser, other.adduser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdduserid()).compareTo(other.isSetAdduserid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdduserid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adduserid, other.adduserid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceurl()).compareTo(other.isSetSourceurl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceurl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceurl, other.sourceurl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCat1()).compareTo(other.isSetCat1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCat1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cat1, other.cat1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCat2()).compareTo(other.isSetCat2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCat2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cat2, other.cat2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDelete()).compareTo(other.isSetIsDelete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDelete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelete, other.isDelete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTop()).compareTo(other.isSetIsTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTop, other.isTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToptime()).compareTo(other.isSetToptime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToptime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toptime, other.toptime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceKey()).compareTo(other.isSetSourceKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceKey, other.sourceKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPubuserid()).compareTo(other.isSetPubuserid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPubuserid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubuserid, other.pubuserid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgTags()).compareTo(other.isSetOrgTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgTags, other.orgTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuality()).compareTo(other.isSetQuality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quality, other.quality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVideourl()).compareTo(other.isSetVideourl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVideourl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.videourl, other.videourl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourcetype()).compareTo(other.isSetSourcetype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourcetype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourcetype, other.sourcetype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQualified()).compareTo(other.isSetQualified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQualified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qualified, other.qualified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnceUnqualified()).compareTo(other.isSetOnceUnqualified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnceUnqualified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onceUnqualified, other.onceUnqualified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLitpic4()).compareTo(other.isSetLitpic4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLitpic4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.litpic4, other.litpic4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLitpic5()).compareTo(other.isSetLitpic5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLitpic5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.litpic5, other.litpic5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLitpic6()).compareTo(other.isSetLitpic6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLitpic6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.litpic6, other.litpic6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnqualifiedReason()).compareTo(other.isSetUnqualifiedReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnqualifiedReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unqualifiedReason, other.unqualifiedReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPraise()).compareTo(other.isSetPraise());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPraise()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.praise, other.praise);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadUserId()).compareTo(other.isSetReadUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readUserId, other.readUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Archives(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetBody()) {
      if (!first) sb.append(", ");
      sb.append("body:");
      if (this.body == null) {
        sb.append("null");
      } else {
        sb.append(this.body);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("click:");
    sb.append(this.click);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    sb.append(this.comment);
    first = false;
    if (!first) sb.append(", ");
    sb.append("collection:");
    sb.append(this.collection);
    first = false;
    if (!first) sb.append(", ");
    sb.append("relay:");
    sb.append(this.relay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("readFinished:");
    sb.append(this.readFinished);
    first = false;
    if (!first) sb.append(", ");
    sb.append("readUnfinished:");
    sb.append(this.readUnfinished);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortrank:");
    sb.append(this.sortrank);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (isSetShorttitle()) {
      if (!first) sb.append(", ");
      sb.append("shorttitle:");
      if (this.shorttitle == null) {
        sb.append("null");
      } else {
        sb.append(this.shorttitle);
      }
      first = false;
    }
    if (isSetWriter()) {
      if (!first) sb.append(", ");
      sb.append("writer:");
      if (this.writer == null) {
        sb.append("null");
      } else {
        sb.append(this.writer);
      }
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
    }
    if (isSetLargepic()) {
      if (!first) sb.append(", ");
      sb.append("largepic:");
      if (this.largepic == null) {
        sb.append("null");
      } else {
        sb.append(this.largepic);
      }
      first = false;
    }
    if (isSetLitpic1()) {
      if (!first) sb.append(", ");
      sb.append("litpic1:");
      if (this.litpic1 == null) {
        sb.append("null");
      } else {
        sb.append(this.litpic1);
      }
      first = false;
    }
    if (isSetLitpic2()) {
      if (!first) sb.append(", ");
      sb.append("litpic2:");
      if (this.litpic2 == null) {
        sb.append("null");
      } else {
        sb.append(this.litpic2);
      }
      first = false;
    }
    if (isSetLitpic3()) {
      if (!first) sb.append(", ");
      sb.append("litpic3:");
      if (this.litpic3 == null) {
        sb.append("null");
      } else {
        sb.append(this.litpic3);
      }
      first = false;
    }
    if (isSetKapic()) {
      if (!first) sb.append(", ");
      sb.append("kapic:");
      if (this.kapic == null) {
        sb.append("null");
      } else {
        sb.append(this.kapic);
      }
      first = false;
    }
    if (isSetPubtime()) {
      if (!first) sb.append(", ");
      sb.append("pubtime:");
      if (this.pubtime == null) {
        sb.append("null");
      } else {
        sb.append(this.pubtime);
      }
      first = false;
    }
    if (isSetAddtime()) {
      if (!first) sb.append(", ");
      sb.append("addtime:");
      if (this.addtime == null) {
        sb.append("null");
      } else {
        sb.append(this.addtime);
      }
      first = false;
    }
    if (isSetDeltime()) {
      if (!first) sb.append(", ");
      sb.append("deltime:");
      if (this.deltime == null) {
        sb.append("null");
      } else {
        sb.append(this.deltime);
      }
      first = false;
    }
    if (isSetKeywords()) {
      if (!first) sb.append(", ");
      sb.append("keywords:");
      if (this.keywords == null) {
        sb.append("null");
      } else {
        sb.append(this.keywords);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetAdduser()) {
      if (!first) sb.append(", ");
      sb.append("adduser:");
      if (this.adduser == null) {
        sb.append("null");
      } else {
        sb.append(this.adduser);
      }
      first = false;
    }
    if (isSetAdduserid()) {
      if (!first) sb.append(", ");
      sb.append("adduserid:");
      sb.append(this.adduserid);
      first = false;
    }
    if (isSetSourceurl()) {
      if (!first) sb.append(", ");
      sb.append("sourceurl:");
      if (this.sourceurl == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceurl);
      }
      first = false;
    }
    if (isSetCat1()) {
      if (!first) sb.append(", ");
      sb.append("cat1:");
      if (this.cat1 == null) {
        sb.append("null");
      } else {
        sb.append(this.cat1);
      }
      first = false;
    }
    if (isSetCat2()) {
      if (!first) sb.append(", ");
      sb.append("cat2:");
      if (this.cat2 == null) {
        sb.append("null");
      } else {
        sb.append(this.cat2);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("isDelete:");
    sb.append(this.isDelete);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTop:");
    sb.append(this.isTop);
    first = false;
    if (isSetToptime()) {
      if (!first) sb.append(", ");
      sb.append("toptime:");
      if (this.toptime == null) {
        sb.append("null");
      } else {
        sb.append(this.toptime);
      }
      first = false;
    }
    if (isSetSourceKey()) {
      if (!first) sb.append(", ");
      sb.append("sourceKey:");
      if (this.sourceKey == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceKey);
      }
      first = false;
    }
    if (isSetPubuserid()) {
      if (!first) sb.append(", ");
      sb.append("pubuserid:");
      sb.append(this.pubuserid);
      first = false;
    }
    if (isSetOrgTags()) {
      if (!first) sb.append(", ");
      sb.append("orgTags:");
      if (this.orgTags == null) {
        sb.append("null");
      } else {
        sb.append(this.orgTags);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("quality:");
    sb.append(this.quality);
    first = false;
    if (isSetVideourl()) {
      if (!first) sb.append(", ");
      sb.append("videourl:");
      if (this.videourl == null) {
        sb.append("null");
      } else {
        sb.append(this.videourl);
      }
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sourcetype:");
    sb.append(this.sourcetype);
    first = false;
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetQualified()) {
      if (!first) sb.append(", ");
      sb.append("qualified:");
      if (this.qualified == null) {
        sb.append("null");
      } else {
        sb.append(this.qualified);
      }
      first = false;
    }
    if (isSetOnceUnqualified()) {
      if (!first) sb.append(", ");
      sb.append("onceUnqualified:");
      sb.append(this.onceUnqualified);
      first = false;
    }
    if (isSetLitpic4()) {
      if (!first) sb.append(", ");
      sb.append("litpic4:");
      sb.append(this.litpic4);
      first = false;
    }
    if (isSetLitpic5()) {
      if (!first) sb.append(", ");
      sb.append("litpic5:");
      sb.append(this.litpic5);
      first = false;
    }
    if (isSetLitpic6()) {
      if (!first) sb.append(", ");
      sb.append("litpic6:");
      sb.append(this.litpic6);
      first = false;
    }
    if (isSetUnqualifiedReason()) {
      if (!first) sb.append(", ");
      sb.append("unqualifiedReason:");
      if (this.unqualifiedReason == null) {
        sb.append("null");
      } else {
        sb.append(this.unqualifiedReason);
      }
      first = false;
    }
    if (isSetSex()) {
      if (!first) sb.append(", ");
      sb.append("sex:");
      sb.append(this.sex);
      first = false;
    }
    if (isSetPraise()) {
      if (!first) sb.append(", ");
      sb.append("praise:");
      sb.append(this.praise);
      first = false;
    }
    if (isSetReadUserId()) {
      if (!first) sb.append(", ");
      sb.append("readUserId:");
      if (this.readUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.readUserId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'click' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'comment' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'collection' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'relay' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'readFinished' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'readUnfinished' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sortrank' because it's a primitive and you chose the non-beans generator.
    if (title == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'isDelete' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isTop' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'quality' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sourcetype' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ArchivesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ArchivesStandardScheme getScheme() {
      return new ArchivesStandardScheme();
    }
  }

  private static class ArchivesStandardScheme extends org.apache.thrift.scheme.StandardScheme<Archives> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Archives struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.body = iprot.readString();
              struct.setBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLICK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.click = iprot.readI32();
              struct.setClickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.comment = iprot.readI32();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLLECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.collection = iprot.readI32();
              struct.setCollectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RELAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relay = iprot.readI32();
              struct.setRelayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // READ_FINISHED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.readFinished = iprot.readI32();
              struct.setReadFinishedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // READ_UNFINISHED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.readUnfinished = iprot.readI32();
              struct.setReadUnfinishedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SORTRANK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sortrank = iprot.readI32();
              struct.setSortrankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SHORTTITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shorttitle = iprot.readString();
              struct.setShorttitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // WRITER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.writer = iprot.readString();
              struct.setWriterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LARGEPIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.largepic = iprot.readString();
              struct.setLargepicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LITPIC1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.litpic1 = iprot.readString();
              struct.setLitpic1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LITPIC2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.litpic2 = iprot.readString();
              struct.setLitpic2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LITPIC3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.litpic3 = iprot.readString();
              struct.setLitpic3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // KAPIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kapic = iprot.readString();
              struct.setKapicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PUBTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pubtime = iprot.readString();
              struct.setPubtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ADDTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addtime = iprot.readString();
              struct.setAddtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DELTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deltime = iprot.readString();
              struct.setDeltimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // KEYWORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keywords = iprot.readString();
              struct.setKeywordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tags = iprot.readString();
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ADDUSER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adduser = iprot.readString();
              struct.setAdduserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // ADDUSERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adduserid = iprot.readI32();
              struct.setAdduseridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // SOURCEURL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceurl = iprot.readString();
              struct.setSourceurlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // CAT1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cat1 = iprot.readString();
              struct.setCat1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // CAT2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cat2 = iprot.readString();
              struct.setCat2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // IS_DELETE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isDelete = iprot.readI32();
              struct.setIsDeleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // IS_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isTop = iprot.readI32();
              struct.setIsTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // TOPTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toptime = iprot.readString();
              struct.setToptimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // SOURCE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceKey = iprot.readString();
              struct.setSourceKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // PUBUSERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pubuserid = iprot.readI32();
              struct.setPubuseridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // ORG_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgTags = iprot.readString();
              struct.setOrgTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // QUALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quality = iprot.readI32();
              struct.setQualityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // VIDEOURL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.videourl = iprot.readString();
              struct.setVideourlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // SOURCETYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sourcetype = iprot.readI32();
              struct.setSourcetypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // QUALIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qualified = iprot.readString();
              struct.setQualifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // ONCE_UNQUALIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.onceUnqualified = iprot.readI32();
              struct.setOnceUnqualifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // LITPIC4
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.litpic4 = iprot.readI32();
              struct.setLitpic4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // LITPIC5
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.litpic5 = iprot.readI32();
              struct.setLitpic5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // LITPIC6
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.litpic6 = iprot.readI32();
              struct.setLitpic6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // UNQUALIFIED_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unqualifiedReason = iprot.readString();
              struct.setUnqualifiedReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // PRAISE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.praise = iprot.readI32();
              struct.setPraiseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // READ_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.readUserId = iprot.readString();
              struct.setReadUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetClick()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'click' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetComment()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'comment' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCollection()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'collection' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRelay()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'relay' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetReadFinished()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'readFinished' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetReadUnfinished()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'readUnfinished' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSortrank()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sortrank' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsDelete()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isDelete' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsTop()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isTop' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetQuality()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'quality' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSourcetype()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sourcetype' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Archives struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.body != null) {
        if (struct.isSetBody()) {
          oprot.writeFieldBegin(BODY_FIELD_DESC);
          oprot.writeString(struct.body);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(CLICK_FIELD_DESC);
      oprot.writeI32(struct.click);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMENT_FIELD_DESC);
      oprot.writeI32(struct.comment);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
      oprot.writeI32(struct.collection);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RELAY_FIELD_DESC);
      oprot.writeI32(struct.relay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(READ_FINISHED_FIELD_DESC);
      oprot.writeI32(struct.readFinished);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(READ_UNFINISHED_FIELD_DESC);
      oprot.writeI32(struct.readUnfinished);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SORTRANK_FIELD_DESC);
      oprot.writeI32(struct.sortrank);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.shorttitle != null) {
        if (struct.isSetShorttitle()) {
          oprot.writeFieldBegin(SHORTTITLE_FIELD_DESC);
          oprot.writeString(struct.shorttitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.writer != null) {
        if (struct.isSetWriter()) {
          oprot.writeFieldBegin(WRITER_FIELD_DESC);
          oprot.writeString(struct.writer);
          oprot.writeFieldEnd();
        }
      }
      if (struct.source != null) {
        if (struct.isSetSource()) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeString(struct.source);
          oprot.writeFieldEnd();
        }
      }
      if (struct.largepic != null) {
        if (struct.isSetLargepic()) {
          oprot.writeFieldBegin(LARGEPIC_FIELD_DESC);
          oprot.writeString(struct.largepic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.litpic1 != null) {
        if (struct.isSetLitpic1()) {
          oprot.writeFieldBegin(LITPIC1_FIELD_DESC);
          oprot.writeString(struct.litpic1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.litpic2 != null) {
        if (struct.isSetLitpic2()) {
          oprot.writeFieldBegin(LITPIC2_FIELD_DESC);
          oprot.writeString(struct.litpic2);
          oprot.writeFieldEnd();
        }
      }
      if (struct.litpic3 != null) {
        if (struct.isSetLitpic3()) {
          oprot.writeFieldBegin(LITPIC3_FIELD_DESC);
          oprot.writeString(struct.litpic3);
          oprot.writeFieldEnd();
        }
      }
      if (struct.kapic != null) {
        if (struct.isSetKapic()) {
          oprot.writeFieldBegin(KAPIC_FIELD_DESC);
          oprot.writeString(struct.kapic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pubtime != null) {
        if (struct.isSetPubtime()) {
          oprot.writeFieldBegin(PUBTIME_FIELD_DESC);
          oprot.writeString(struct.pubtime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.addtime != null) {
        if (struct.isSetAddtime()) {
          oprot.writeFieldBegin(ADDTIME_FIELD_DESC);
          oprot.writeString(struct.addtime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deltime != null) {
        if (struct.isSetDeltime()) {
          oprot.writeFieldBegin(DELTIME_FIELD_DESC);
          oprot.writeString(struct.deltime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.keywords != null) {
        if (struct.isSetKeywords()) {
          oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
          oprot.writeString(struct.keywords);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          oprot.writeString(struct.tags);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adduser != null) {
        if (struct.isSetAdduser()) {
          oprot.writeFieldBegin(ADDUSER_FIELD_DESC);
          oprot.writeString(struct.adduser);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAdduserid()) {
        oprot.writeFieldBegin(ADDUSERID_FIELD_DESC);
        oprot.writeI32(struct.adduserid);
        oprot.writeFieldEnd();
      }
      if (struct.sourceurl != null) {
        if (struct.isSetSourceurl()) {
          oprot.writeFieldBegin(SOURCEURL_FIELD_DESC);
          oprot.writeString(struct.sourceurl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cat1 != null) {
        if (struct.isSetCat1()) {
          oprot.writeFieldBegin(CAT1_FIELD_DESC);
          oprot.writeString(struct.cat1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cat2 != null) {
        if (struct.isSetCat2()) {
          oprot.writeFieldBegin(CAT2_FIELD_DESC);
          oprot.writeString(struct.cat2);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(IS_DELETE_FIELD_DESC);
      oprot.writeI32(struct.isDelete);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_TOP_FIELD_DESC);
      oprot.writeI32(struct.isTop);
      oprot.writeFieldEnd();
      if (struct.toptime != null) {
        if (struct.isSetToptime()) {
          oprot.writeFieldBegin(TOPTIME_FIELD_DESC);
          oprot.writeString(struct.toptime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceKey != null) {
        if (struct.isSetSourceKey()) {
          oprot.writeFieldBegin(SOURCE_KEY_FIELD_DESC);
          oprot.writeString(struct.sourceKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPubuserid()) {
        oprot.writeFieldBegin(PUBUSERID_FIELD_DESC);
        oprot.writeI32(struct.pubuserid);
        oprot.writeFieldEnd();
      }
      if (struct.orgTags != null) {
        if (struct.isSetOrgTags()) {
          oprot.writeFieldBegin(ORG_TAGS_FIELD_DESC);
          oprot.writeString(struct.orgTags);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(QUALITY_FIELD_DESC);
      oprot.writeI32(struct.quality);
      oprot.writeFieldEnd();
      if (struct.videourl != null) {
        if (struct.isSetVideourl()) {
          oprot.writeFieldBegin(VIDEOURL_FIELD_DESC);
          oprot.writeString(struct.videourl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SOURCETYPE_FIELD_DESC);
      oprot.writeI32(struct.sourcetype);
      oprot.writeFieldEnd();
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.qualified != null) {
        if (struct.isSetQualified()) {
          oprot.writeFieldBegin(QUALIFIED_FIELD_DESC);
          oprot.writeString(struct.qualified);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOnceUnqualified()) {
        oprot.writeFieldBegin(ONCE_UNQUALIFIED_FIELD_DESC);
        oprot.writeI32(struct.onceUnqualified);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLitpic4()) {
        oprot.writeFieldBegin(LITPIC4_FIELD_DESC);
        oprot.writeI32(struct.litpic4);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLitpic5()) {
        oprot.writeFieldBegin(LITPIC5_FIELD_DESC);
        oprot.writeI32(struct.litpic5);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLitpic6()) {
        oprot.writeFieldBegin(LITPIC6_FIELD_DESC);
        oprot.writeI32(struct.litpic6);
        oprot.writeFieldEnd();
      }
      if (struct.unqualifiedReason != null) {
        if (struct.isSetUnqualifiedReason()) {
          oprot.writeFieldBegin(UNQUALIFIED_REASON_FIELD_DESC);
          oprot.writeString(struct.unqualifiedReason);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSex()) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeI32(struct.sex);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPraise()) {
        oprot.writeFieldBegin(PRAISE_FIELD_DESC);
        oprot.writeI32(struct.praise);
        oprot.writeFieldEnd();
      }
      if (struct.readUserId != null) {
        if (struct.isSetReadUserId()) {
          oprot.writeFieldBegin(READ_USER_ID_FIELD_DESC);
          oprot.writeString(struct.readUserId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ArchivesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ArchivesTupleScheme getScheme() {
      return new ArchivesTupleScheme();
    }
  }

  private static class ArchivesTupleScheme extends org.apache.thrift.scheme.TupleScheme<Archives> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Archives struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeI32(struct.click);
      oprot.writeI32(struct.comment);
      oprot.writeI32(struct.collection);
      oprot.writeI32(struct.relay);
      oprot.writeI32(struct.readFinished);
      oprot.writeI32(struct.readUnfinished);
      oprot.writeI32(struct.sortrank);
      oprot.writeString(struct.title);
      oprot.writeI32(struct.isDelete);
      oprot.writeI32(struct.isTop);
      oprot.writeI32(struct.quality);
      oprot.writeI32(struct.sourcetype);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBody()) {
        optionals.set(0);
      }
      if (struct.isSetShorttitle()) {
        optionals.set(1);
      }
      if (struct.isSetWriter()) {
        optionals.set(2);
      }
      if (struct.isSetSource()) {
        optionals.set(3);
      }
      if (struct.isSetLargepic()) {
        optionals.set(4);
      }
      if (struct.isSetLitpic1()) {
        optionals.set(5);
      }
      if (struct.isSetLitpic2()) {
        optionals.set(6);
      }
      if (struct.isSetLitpic3()) {
        optionals.set(7);
      }
      if (struct.isSetKapic()) {
        optionals.set(8);
      }
      if (struct.isSetPubtime()) {
        optionals.set(9);
      }
      if (struct.isSetAddtime()) {
        optionals.set(10);
      }
      if (struct.isSetDeltime()) {
        optionals.set(11);
      }
      if (struct.isSetKeywords()) {
        optionals.set(12);
      }
      if (struct.isSetTags()) {
        optionals.set(13);
      }
      if (struct.isSetAdduser()) {
        optionals.set(14);
      }
      if (struct.isSetAdduserid()) {
        optionals.set(15);
      }
      if (struct.isSetSourceurl()) {
        optionals.set(16);
      }
      if (struct.isSetCat1()) {
        optionals.set(17);
      }
      if (struct.isSetCat2()) {
        optionals.set(18);
      }
      if (struct.isSetToptime()) {
        optionals.set(19);
      }
      if (struct.isSetSourceKey()) {
        optionals.set(20);
      }
      if (struct.isSetPubuserid()) {
        optionals.set(21);
      }
      if (struct.isSetOrgTags()) {
        optionals.set(22);
      }
      if (struct.isSetVideourl()) {
        optionals.set(23);
      }
      if (struct.isSetContent()) {
        optionals.set(24);
      }
      if (struct.isSetDesc()) {
        optionals.set(25);
      }
      if (struct.isSetQualified()) {
        optionals.set(26);
      }
      if (struct.isSetOnceUnqualified()) {
        optionals.set(27);
      }
      if (struct.isSetLitpic4()) {
        optionals.set(28);
      }
      if (struct.isSetLitpic5()) {
        optionals.set(29);
      }
      if (struct.isSetLitpic6()) {
        optionals.set(30);
      }
      if (struct.isSetUnqualifiedReason()) {
        optionals.set(31);
      }
      if (struct.isSetSex()) {
        optionals.set(32);
      }
      if (struct.isSetPraise()) {
        optionals.set(33);
      }
      if (struct.isSetReadUserId()) {
        optionals.set(34);
      }
      oprot.writeBitSet(optionals, 35);
      if (struct.isSetBody()) {
        oprot.writeString(struct.body);
      }
      if (struct.isSetShorttitle()) {
        oprot.writeString(struct.shorttitle);
      }
      if (struct.isSetWriter()) {
        oprot.writeString(struct.writer);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetLargepic()) {
        oprot.writeString(struct.largepic);
      }
      if (struct.isSetLitpic1()) {
        oprot.writeString(struct.litpic1);
      }
      if (struct.isSetLitpic2()) {
        oprot.writeString(struct.litpic2);
      }
      if (struct.isSetLitpic3()) {
        oprot.writeString(struct.litpic3);
      }
      if (struct.isSetKapic()) {
        oprot.writeString(struct.kapic);
      }
      if (struct.isSetPubtime()) {
        oprot.writeString(struct.pubtime);
      }
      if (struct.isSetAddtime()) {
        oprot.writeString(struct.addtime);
      }
      if (struct.isSetDeltime()) {
        oprot.writeString(struct.deltime);
      }
      if (struct.isSetKeywords()) {
        oprot.writeString(struct.keywords);
      }
      if (struct.isSetTags()) {
        oprot.writeString(struct.tags);
      }
      if (struct.isSetAdduser()) {
        oprot.writeString(struct.adduser);
      }
      if (struct.isSetAdduserid()) {
        oprot.writeI32(struct.adduserid);
      }
      if (struct.isSetSourceurl()) {
        oprot.writeString(struct.sourceurl);
      }
      if (struct.isSetCat1()) {
        oprot.writeString(struct.cat1);
      }
      if (struct.isSetCat2()) {
        oprot.writeString(struct.cat2);
      }
      if (struct.isSetToptime()) {
        oprot.writeString(struct.toptime);
      }
      if (struct.isSetSourceKey()) {
        oprot.writeString(struct.sourceKey);
      }
      if (struct.isSetPubuserid()) {
        oprot.writeI32(struct.pubuserid);
      }
      if (struct.isSetOrgTags()) {
        oprot.writeString(struct.orgTags);
      }
      if (struct.isSetVideourl()) {
        oprot.writeString(struct.videourl);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetQualified()) {
        oprot.writeString(struct.qualified);
      }
      if (struct.isSetOnceUnqualified()) {
        oprot.writeI32(struct.onceUnqualified);
      }
      if (struct.isSetLitpic4()) {
        oprot.writeI32(struct.litpic4);
      }
      if (struct.isSetLitpic5()) {
        oprot.writeI32(struct.litpic5);
      }
      if (struct.isSetLitpic6()) {
        oprot.writeI32(struct.litpic6);
      }
      if (struct.isSetUnqualifiedReason()) {
        oprot.writeString(struct.unqualifiedReason);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex);
      }
      if (struct.isSetPraise()) {
        oprot.writeI32(struct.praise);
      }
      if (struct.isSetReadUserId()) {
        oprot.writeString(struct.readUserId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Archives struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.click = iprot.readI32();
      struct.setClickIsSet(true);
      struct.comment = iprot.readI32();
      struct.setCommentIsSet(true);
      struct.collection = iprot.readI32();
      struct.setCollectionIsSet(true);
      struct.relay = iprot.readI32();
      struct.setRelayIsSet(true);
      struct.readFinished = iprot.readI32();
      struct.setReadFinishedIsSet(true);
      struct.readUnfinished = iprot.readI32();
      struct.setReadUnfinishedIsSet(true);
      struct.sortrank = iprot.readI32();
      struct.setSortrankIsSet(true);
      struct.title = iprot.readString();
      struct.setTitleIsSet(true);
      struct.isDelete = iprot.readI32();
      struct.setIsDeleteIsSet(true);
      struct.isTop = iprot.readI32();
      struct.setIsTopIsSet(true);
      struct.quality = iprot.readI32();
      struct.setQualityIsSet(true);
      struct.sourcetype = iprot.readI32();
      struct.setSourcetypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(35);
      if (incoming.get(0)) {
        struct.body = iprot.readString();
        struct.setBodyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.shorttitle = iprot.readString();
        struct.setShorttitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.writer = iprot.readString();
        struct.setWriterIsSet(true);
      }
      if (incoming.get(3)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.largepic = iprot.readString();
        struct.setLargepicIsSet(true);
      }
      if (incoming.get(5)) {
        struct.litpic1 = iprot.readString();
        struct.setLitpic1IsSet(true);
      }
      if (incoming.get(6)) {
        struct.litpic2 = iprot.readString();
        struct.setLitpic2IsSet(true);
      }
      if (incoming.get(7)) {
        struct.litpic3 = iprot.readString();
        struct.setLitpic3IsSet(true);
      }
      if (incoming.get(8)) {
        struct.kapic = iprot.readString();
        struct.setKapicIsSet(true);
      }
      if (incoming.get(9)) {
        struct.pubtime = iprot.readString();
        struct.setPubtimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.addtime = iprot.readString();
        struct.setAddtimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.deltime = iprot.readString();
        struct.setDeltimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.keywords = iprot.readString();
        struct.setKeywordsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.tags = iprot.readString();
        struct.setTagsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.adduser = iprot.readString();
        struct.setAdduserIsSet(true);
      }
      if (incoming.get(15)) {
        struct.adduserid = iprot.readI32();
        struct.setAdduseridIsSet(true);
      }
      if (incoming.get(16)) {
        struct.sourceurl = iprot.readString();
        struct.setSourceurlIsSet(true);
      }
      if (incoming.get(17)) {
        struct.cat1 = iprot.readString();
        struct.setCat1IsSet(true);
      }
      if (incoming.get(18)) {
        struct.cat2 = iprot.readString();
        struct.setCat2IsSet(true);
      }
      if (incoming.get(19)) {
        struct.toptime = iprot.readString();
        struct.setToptimeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.sourceKey = iprot.readString();
        struct.setSourceKeyIsSet(true);
      }
      if (incoming.get(21)) {
        struct.pubuserid = iprot.readI32();
        struct.setPubuseridIsSet(true);
      }
      if (incoming.get(22)) {
        struct.orgTags = iprot.readString();
        struct.setOrgTagsIsSet(true);
      }
      if (incoming.get(23)) {
        struct.videourl = iprot.readString();
        struct.setVideourlIsSet(true);
      }
      if (incoming.get(24)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(25)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(26)) {
        struct.qualified = iprot.readString();
        struct.setQualifiedIsSet(true);
      }
      if (incoming.get(27)) {
        struct.onceUnqualified = iprot.readI32();
        struct.setOnceUnqualifiedIsSet(true);
      }
      if (incoming.get(28)) {
        struct.litpic4 = iprot.readI32();
        struct.setLitpic4IsSet(true);
      }
      if (incoming.get(29)) {
        struct.litpic5 = iprot.readI32();
        struct.setLitpic5IsSet(true);
      }
      if (incoming.get(30)) {
        struct.litpic6 = iprot.readI32();
        struct.setLitpic6IsSet(true);
      }
      if (incoming.get(31)) {
        struct.unqualifiedReason = iprot.readString();
        struct.setUnqualifiedReasonIsSet(true);
      }
      if (incoming.get(32)) {
        struct.sex = iprot.readI32();
        struct.setSexIsSet(true);
      }
      if (incoming.get(33)) {
        struct.praise = iprot.readI32();
        struct.setPraiseIsSet(true);
      }
      if (incoming.get(34)) {
        struct.readUserId = iprot.readString();
        struct.setReadUserIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

