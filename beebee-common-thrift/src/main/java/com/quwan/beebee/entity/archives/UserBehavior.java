/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.quwan.beebee.entity.archives;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-31")
public class UserBehavior implements org.apache.thrift.TBase<UserBehavior, UserBehavior._Fields>, java.io.Serializable, Cloneable, Comparable<UserBehavior> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserBehavior");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ACT_OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("actObj", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OBJ_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("objType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BHV_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bhvType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BHV_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("bhvAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField BHV_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bhvCnt", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField BHV_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("bhvDateTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField POS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("posType", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("env", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PLATES_FIELD_DESC = new org.apache.thrift.protocol.TField("plates", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserBehaviorStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserBehaviorTupleSchemeFactory();

  public String userId; // required
  public String actObj; // required
  public String objType; // required
  public String bhvType; // required
  public double bhvAmt; // required
  public double bhvCnt; // required
  public String bhvDateTime; // required
  public String content; // optional
  public String posType; // optional
  public String position; // optional
  public String env; // optional
  public String traceId; // optional
  public String plates; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    ACT_OBJ((short)2, "actObj"),
    OBJ_TYPE((short)3, "objType"),
    BHV_TYPE((short)4, "bhvType"),
    BHV_AMT((short)5, "bhvAmt"),
    BHV_CNT((short)6, "bhvCnt"),
    BHV_DATE_TIME((short)7, "bhvDateTime"),
    CONTENT((short)8, "content"),
    POS_TYPE((short)9, "posType"),
    POSITION((short)10, "position"),
    ENV((short)11, "env"),
    TRACE_ID((short)12, "traceId"),
    PLATES((short)13, "plates");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // ACT_OBJ
          return ACT_OBJ;
        case 3: // OBJ_TYPE
          return OBJ_TYPE;
        case 4: // BHV_TYPE
          return BHV_TYPE;
        case 5: // BHV_AMT
          return BHV_AMT;
        case 6: // BHV_CNT
          return BHV_CNT;
        case 7: // BHV_DATE_TIME
          return BHV_DATE_TIME;
        case 8: // CONTENT
          return CONTENT;
        case 9: // POS_TYPE
          return POS_TYPE;
        case 10: // POSITION
          return POSITION;
        case 11: // ENV
          return ENV;
        case 12: // TRACE_ID
          return TRACE_ID;
        case 13: // PLATES
          return PLATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BHVAMT_ISSET_ID = 0;
  private static final int __BHVCNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CONTENT, _Fields.POS_TYPE, _Fields.POSITION, _Fields.ENV, _Fields.TRACE_ID, _Fields.PLATES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACT_OBJ, new org.apache.thrift.meta_data.FieldMetaData("actObj", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJ_TYPE, new org.apache.thrift.meta_data.FieldMetaData("objType", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BHV_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bhvType", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BHV_AMT, new org.apache.thrift.meta_data.FieldMetaData("bhvAmt", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BHV_CNT, new org.apache.thrift.meta_data.FieldMetaData("bhvCnt", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BHV_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("bhvDateTime", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("posType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENV, new org.apache.thrift.meta_data.FieldMetaData("env", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATES, new org.apache.thrift.meta_data.FieldMetaData("plates", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserBehavior.class, metaDataMap);
  }

  public UserBehavior() {
  }

  public UserBehavior(
    String userId,
    String actObj,
    String objType,
    String bhvType,
    double bhvAmt,
    double bhvCnt,
    String bhvDateTime)
  {
    this();
    this.userId = userId;
    this.actObj = actObj;
    this.objType = objType;
    this.bhvType = bhvType;
    this.bhvAmt = bhvAmt;
    setBhvAmtIsSet(true);
    this.bhvCnt = bhvCnt;
    setBhvCntIsSet(true);
    this.bhvDateTime = bhvDateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserBehavior(UserBehavior other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetActObj()) {
      this.actObj = other.actObj;
    }
    if (other.isSetObjType()) {
      this.objType = other.objType;
    }
    if (other.isSetBhvType()) {
      this.bhvType = other.bhvType;
    }
    this.bhvAmt = other.bhvAmt;
    this.bhvCnt = other.bhvCnt;
    if (other.isSetBhvDateTime()) {
      this.bhvDateTime = other.bhvDateTime;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetPosType()) {
      this.posType = other.posType;
    }
    if (other.isSetPosition()) {
      this.position = other.position;
    }
    if (other.isSetEnv()) {
      this.env = other.env;
    }
    if (other.isSetTraceId()) {
      this.traceId = other.traceId;
    }
    if (other.isSetPlates()) {
      this.plates = other.plates;
    }
  }

  public UserBehavior deepCopy() {
    return new UserBehavior(this);
  }

  @Override
  public void clear() {
    this.userId = null;
    this.actObj = null;
    this.objType = null;
    this.bhvType = null;
    setBhvAmtIsSet(false);
    this.bhvAmt = 0.0;
    setBhvCntIsSet(false);
    this.bhvCnt = 0.0;
    this.bhvDateTime = null;
    this.content = null;
    this.posType = null;
    this.position = null;
    this.env = null;
    this.traceId = null;
    this.plates = null;
  }

  public String getUserId() {
    return this.userId;
  }

  public UserBehavior setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public String getActObj() {
    return this.actObj;
  }

  public UserBehavior setActObj(String actObj) {
    this.actObj = actObj;
    return this;
  }

  public void unsetActObj() {
    this.actObj = null;
  }

  /** Returns true if field actObj is set (has been assigned a value) and false otherwise */
  public boolean isSetActObj() {
    return this.actObj != null;
  }

  public void setActObjIsSet(boolean value) {
    if (!value) {
      this.actObj = null;
    }
  }

  public String getObjType() {
    return this.objType;
  }

  public UserBehavior setObjType(String objType) {
    this.objType = objType;
    return this;
  }

  public void unsetObjType() {
    this.objType = null;
  }

  /** Returns true if field objType is set (has been assigned a value) and false otherwise */
  public boolean isSetObjType() {
    return this.objType != null;
  }

  public void setObjTypeIsSet(boolean value) {
    if (!value) {
      this.objType = null;
    }
  }

  public String getBhvType() {
    return this.bhvType;
  }

  public UserBehavior setBhvType(String bhvType) {
    this.bhvType = bhvType;
    return this;
  }

  public void unsetBhvType() {
    this.bhvType = null;
  }

  /** Returns true if field bhvType is set (has been assigned a value) and false otherwise */
  public boolean isSetBhvType() {
    return this.bhvType != null;
  }

  public void setBhvTypeIsSet(boolean value) {
    if (!value) {
      this.bhvType = null;
    }
  }

  public double getBhvAmt() {
    return this.bhvAmt;
  }

  public UserBehavior setBhvAmt(double bhvAmt) {
    this.bhvAmt = bhvAmt;
    setBhvAmtIsSet(true);
    return this;
  }

  public void unsetBhvAmt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BHVAMT_ISSET_ID);
  }

  /** Returns true if field bhvAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetBhvAmt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BHVAMT_ISSET_ID);
  }

  public void setBhvAmtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BHVAMT_ISSET_ID, value);
  }

  public double getBhvCnt() {
    return this.bhvCnt;
  }

  public UserBehavior setBhvCnt(double bhvCnt) {
    this.bhvCnt = bhvCnt;
    setBhvCntIsSet(true);
    return this;
  }

  public void unsetBhvCnt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BHVCNT_ISSET_ID);
  }

  /** Returns true if field bhvCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetBhvCnt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BHVCNT_ISSET_ID);
  }

  public void setBhvCntIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BHVCNT_ISSET_ID, value);
  }

  public String getBhvDateTime() {
    return this.bhvDateTime;
  }

  public UserBehavior setBhvDateTime(String bhvDateTime) {
    this.bhvDateTime = bhvDateTime;
    return this;
  }

  public void unsetBhvDateTime() {
    this.bhvDateTime = null;
  }

  /** Returns true if field bhvDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBhvDateTime() {
    return this.bhvDateTime != null;
  }

  public void setBhvDateTimeIsSet(boolean value) {
    if (!value) {
      this.bhvDateTime = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public UserBehavior setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getPosType() {
    return this.posType;
  }

  public UserBehavior setPosType(String posType) {
    this.posType = posType;
    return this;
  }

  public void unsetPosType() {
    this.posType = null;
  }

  /** Returns true if field posType is set (has been assigned a value) and false otherwise */
  public boolean isSetPosType() {
    return this.posType != null;
  }

  public void setPosTypeIsSet(boolean value) {
    if (!value) {
      this.posType = null;
    }
  }

  public String getPosition() {
    return this.position;
  }

  public UserBehavior setPosition(String position) {
    this.position = position;
    return this;
  }

  public void unsetPosition() {
    this.position = null;
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return this.position != null;
  }

  public void setPositionIsSet(boolean value) {
    if (!value) {
      this.position = null;
    }
  }

  public String getEnv() {
    return this.env;
  }

  public UserBehavior setEnv(String env) {
    this.env = env;
    return this;
  }

  public void unsetEnv() {
    this.env = null;
  }

  /** Returns true if field env is set (has been assigned a value) and false otherwise */
  public boolean isSetEnv() {
    return this.env != null;
  }

  public void setEnvIsSet(boolean value) {
    if (!value) {
      this.env = null;
    }
  }

  public String getTraceId() {
    return this.traceId;
  }

  public UserBehavior setTraceId(String traceId) {
    this.traceId = traceId;
    return this;
  }

  public void unsetTraceId() {
    this.traceId = null;
  }

  /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceId() {
    return this.traceId != null;
  }

  public void setTraceIdIsSet(boolean value) {
    if (!value) {
      this.traceId = null;
    }
  }

  public String getPlates() {
    return this.plates;
  }

  public UserBehavior setPlates(String plates) {
    this.plates = plates;
    return this;
  }

  public void unsetPlates() {
    this.plates = null;
  }

  /** Returns true if field plates is set (has been assigned a value) and false otherwise */
  public boolean isSetPlates() {
    return this.plates != null;
  }

  public void setPlatesIsSet(boolean value) {
    if (!value) {
      this.plates = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case ACT_OBJ:
      if (value == null) {
        unsetActObj();
      } else {
        setActObj((String)value);
      }
      break;

    case OBJ_TYPE:
      if (value == null) {
        unsetObjType();
      } else {
        setObjType((String)value);
      }
      break;

    case BHV_TYPE:
      if (value == null) {
        unsetBhvType();
      } else {
        setBhvType((String)value);
      }
      break;

    case BHV_AMT:
      if (value == null) {
        unsetBhvAmt();
      } else {
        setBhvAmt((Double)value);
      }
      break;

    case BHV_CNT:
      if (value == null) {
        unsetBhvCnt();
      } else {
        setBhvCnt((Double)value);
      }
      break;

    case BHV_DATE_TIME:
      if (value == null) {
        unsetBhvDateTime();
      } else {
        setBhvDateTime((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case POS_TYPE:
      if (value == null) {
        unsetPosType();
      } else {
        setPosType((String)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((String)value);
      }
      break;

    case ENV:
      if (value == null) {
        unsetEnv();
      } else {
        setEnv((String)value);
      }
      break;

    case TRACE_ID:
      if (value == null) {
        unsetTraceId();
      } else {
        setTraceId((String)value);
      }
      break;

    case PLATES:
      if (value == null) {
        unsetPlates();
      } else {
        setPlates((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case ACT_OBJ:
      return getActObj();

    case OBJ_TYPE:
      return getObjType();

    case BHV_TYPE:
      return getBhvType();

    case BHV_AMT:
      return getBhvAmt();

    case BHV_CNT:
      return getBhvCnt();

    case BHV_DATE_TIME:
      return getBhvDateTime();

    case CONTENT:
      return getContent();

    case POS_TYPE:
      return getPosType();

    case POSITION:
      return getPosition();

    case ENV:
      return getEnv();

    case TRACE_ID:
      return getTraceId();

    case PLATES:
      return getPlates();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case ACT_OBJ:
      return isSetActObj();
    case OBJ_TYPE:
      return isSetObjType();
    case BHV_TYPE:
      return isSetBhvType();
    case BHV_AMT:
      return isSetBhvAmt();
    case BHV_CNT:
      return isSetBhvCnt();
    case BHV_DATE_TIME:
      return isSetBhvDateTime();
    case CONTENT:
      return isSetContent();
    case POS_TYPE:
      return isSetPosType();
    case POSITION:
      return isSetPosition();
    case ENV:
      return isSetEnv();
    case TRACE_ID:
      return isSetTraceId();
    case PLATES:
      return isSetPlates();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserBehavior)
      return this.equals((UserBehavior)that);
    return false;
  }

  public boolean equals(UserBehavior that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_actObj = true && this.isSetActObj();
    boolean that_present_actObj = true && that.isSetActObj();
    if (this_present_actObj || that_present_actObj) {
      if (!(this_present_actObj && that_present_actObj))
        return false;
      if (!this.actObj.equals(that.actObj))
        return false;
    }

    boolean this_present_objType = true && this.isSetObjType();
    boolean that_present_objType = true && that.isSetObjType();
    if (this_present_objType || that_present_objType) {
      if (!(this_present_objType && that_present_objType))
        return false;
      if (!this.objType.equals(that.objType))
        return false;
    }

    boolean this_present_bhvType = true && this.isSetBhvType();
    boolean that_present_bhvType = true && that.isSetBhvType();
    if (this_present_bhvType || that_present_bhvType) {
      if (!(this_present_bhvType && that_present_bhvType))
        return false;
      if (!this.bhvType.equals(that.bhvType))
        return false;
    }

    boolean this_present_bhvAmt = true;
    boolean that_present_bhvAmt = true;
    if (this_present_bhvAmt || that_present_bhvAmt) {
      if (!(this_present_bhvAmt && that_present_bhvAmt))
        return false;
      if (this.bhvAmt != that.bhvAmt)
        return false;
    }

    boolean this_present_bhvCnt = true;
    boolean that_present_bhvCnt = true;
    if (this_present_bhvCnt || that_present_bhvCnt) {
      if (!(this_present_bhvCnt && that_present_bhvCnt))
        return false;
      if (this.bhvCnt != that.bhvCnt)
        return false;
    }

    boolean this_present_bhvDateTime = true && this.isSetBhvDateTime();
    boolean that_present_bhvDateTime = true && that.isSetBhvDateTime();
    if (this_present_bhvDateTime || that_present_bhvDateTime) {
      if (!(this_present_bhvDateTime && that_present_bhvDateTime))
        return false;
      if (!this.bhvDateTime.equals(that.bhvDateTime))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_posType = true && this.isSetPosType();
    boolean that_present_posType = true && that.isSetPosType();
    if (this_present_posType || that_present_posType) {
      if (!(this_present_posType && that_present_posType))
        return false;
      if (!this.posType.equals(that.posType))
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (!this.position.equals(that.position))
        return false;
    }

    boolean this_present_env = true && this.isSetEnv();
    boolean that_present_env = true && that.isSetEnv();
    if (this_present_env || that_present_env) {
      if (!(this_present_env && that_present_env))
        return false;
      if (!this.env.equals(that.env))
        return false;
    }

    boolean this_present_traceId = true && this.isSetTraceId();
    boolean that_present_traceId = true && that.isSetTraceId();
    if (this_present_traceId || that_present_traceId) {
      if (!(this_present_traceId && that_present_traceId))
        return false;
      if (!this.traceId.equals(that.traceId))
        return false;
    }

    boolean this_present_plates = true && this.isSetPlates();
    boolean that_present_plates = true && that.isSetPlates();
    if (this_present_plates || that_present_plates) {
      if (!(this_present_plates && that_present_plates))
        return false;
      if (!this.plates.equals(that.plates))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
    if (isSetUserId())
      hashCode = hashCode * 8191 + userId.hashCode();

    hashCode = hashCode * 8191 + ((isSetActObj()) ? 131071 : 524287);
    if (isSetActObj())
      hashCode = hashCode * 8191 + actObj.hashCode();

    hashCode = hashCode * 8191 + ((isSetObjType()) ? 131071 : 524287);
    if (isSetObjType())
      hashCode = hashCode * 8191 + objType.hashCode();

    hashCode = hashCode * 8191 + ((isSetBhvType()) ? 131071 : 524287);
    if (isSetBhvType())
      hashCode = hashCode * 8191 + bhvType.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bhvAmt);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bhvCnt);

    hashCode = hashCode * 8191 + ((isSetBhvDateTime()) ? 131071 : 524287);
    if (isSetBhvDateTime())
      hashCode = hashCode * 8191 + bhvDateTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + ((isSetPosType()) ? 131071 : 524287);
    if (isSetPosType())
      hashCode = hashCode * 8191 + posType.hashCode();

    hashCode = hashCode * 8191 + ((isSetPosition()) ? 131071 : 524287);
    if (isSetPosition())
      hashCode = hashCode * 8191 + position.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnv()) ? 131071 : 524287);
    if (isSetEnv())
      hashCode = hashCode * 8191 + env.hashCode();

    hashCode = hashCode * 8191 + ((isSetTraceId()) ? 131071 : 524287);
    if (isSetTraceId())
      hashCode = hashCode * 8191 + traceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetPlates()) ? 131071 : 524287);
    if (isSetPlates())
      hashCode = hashCode * 8191 + plates.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UserBehavior other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActObj()).compareTo(other.isSetActObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actObj, other.actObj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObjType()).compareTo(other.isSetObjType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObjType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objType, other.objType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBhvType()).compareTo(other.isSetBhvType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBhvType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bhvType, other.bhvType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBhvAmt()).compareTo(other.isSetBhvAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBhvAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bhvAmt, other.bhvAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBhvCnt()).compareTo(other.isSetBhvCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBhvCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bhvCnt, other.bhvCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBhvDateTime()).compareTo(other.isSetBhvDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBhvDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bhvDateTime, other.bhvDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosType()).compareTo(other.isSetPosType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posType, other.posType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnv()).compareTo(other.isSetEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.env, other.env);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(other.isSetTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceId, other.traceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlates()).compareTo(other.isSetPlates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plates, other.plates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserBehavior(");
    boolean first = true;

    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actObj:");
    if (this.actObj == null) {
      sb.append("null");
    } else {
      sb.append(this.actObj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("objType:");
    if (this.objType == null) {
      sb.append("null");
    } else {
      sb.append(this.objType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bhvType:");
    if (this.bhvType == null) {
      sb.append("null");
    } else {
      sb.append(this.bhvType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bhvAmt:");
    sb.append(this.bhvAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bhvCnt:");
    sb.append(this.bhvCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bhvDateTime:");
    if (this.bhvDateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.bhvDateTime);
    }
    first = false;
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetPosType()) {
      if (!first) sb.append(", ");
      sb.append("posType:");
      if (this.posType == null) {
        sb.append("null");
      } else {
        sb.append(this.posType);
      }
      first = false;
    }
    if (isSetPosition()) {
      if (!first) sb.append(", ");
      sb.append("position:");
      if (this.position == null) {
        sb.append("null");
      } else {
        sb.append(this.position);
      }
      first = false;
    }
    if (isSetEnv()) {
      if (!first) sb.append(", ");
      sb.append("env:");
      if (this.env == null) {
        sb.append("null");
      } else {
        sb.append(this.env);
      }
      first = false;
    }
    if (isSetTraceId()) {
      if (!first) sb.append(", ");
      sb.append("traceId:");
      if (this.traceId == null) {
        sb.append("null");
      } else {
        sb.append(this.traceId);
      }
      first = false;
    }
    if (isSetPlates()) {
      if (!first) sb.append(", ");
      sb.append("plates:");
      if (this.plates == null) {
        sb.append("null");
      } else {
        sb.append(this.plates);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (userId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not present! Struct: " + toString());
    }
    if (actObj == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'actObj' was not present! Struct: " + toString());
    }
    if (objType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'objType' was not present! Struct: " + toString());
    }
    if (bhvType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bhvType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'bhvAmt' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'bhvCnt' because it's a primitive and you chose the non-beans generator.
    if (bhvDateTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bhvDateTime' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserBehaviorStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserBehaviorStandardScheme getScheme() {
      return new UserBehaviorStandardScheme();
    }
  }

  private static class UserBehaviorStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserBehavior> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserBehavior struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACT_OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actObj = iprot.readString();
              struct.setActObjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OBJ_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.objType = iprot.readString();
              struct.setObjTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BHV_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bhvType = iprot.readString();
              struct.setBhvTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BHV_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bhvAmt = iprot.readDouble();
              struct.setBhvAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BHV_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bhvCnt = iprot.readDouble();
              struct.setBhvCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BHV_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bhvDateTime = iprot.readString();
              struct.setBhvDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.posType = iprot.readString();
              struct.setPosTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.position = iprot.readString();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.env = iprot.readString();
              struct.setEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traceId = iprot.readString();
              struct.setTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PLATES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.plates = iprot.readString();
              struct.setPlatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBhvAmt()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'bhvAmt' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBhvCnt()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'bhvCnt' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserBehavior struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.actObj != null) {
        oprot.writeFieldBegin(ACT_OBJ_FIELD_DESC);
        oprot.writeString(struct.actObj);
        oprot.writeFieldEnd();
      }
      if (struct.objType != null) {
        oprot.writeFieldBegin(OBJ_TYPE_FIELD_DESC);
        oprot.writeString(struct.objType);
        oprot.writeFieldEnd();
      }
      if (struct.bhvType != null) {
        oprot.writeFieldBegin(BHV_TYPE_FIELD_DESC);
        oprot.writeString(struct.bhvType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BHV_AMT_FIELD_DESC);
      oprot.writeDouble(struct.bhvAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BHV_CNT_FIELD_DESC);
      oprot.writeDouble(struct.bhvCnt);
      oprot.writeFieldEnd();
      if (struct.bhvDateTime != null) {
        oprot.writeFieldBegin(BHV_DATE_TIME_FIELD_DESC);
        oprot.writeString(struct.bhvDateTime);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.posType != null) {
        if (struct.isSetPosType()) {
          oprot.writeFieldBegin(POS_TYPE_FIELD_DESC);
          oprot.writeString(struct.posType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.position != null) {
        if (struct.isSetPosition()) {
          oprot.writeFieldBegin(POSITION_FIELD_DESC);
          oprot.writeString(struct.position);
          oprot.writeFieldEnd();
        }
      }
      if (struct.env != null) {
        if (struct.isSetEnv()) {
          oprot.writeFieldBegin(ENV_FIELD_DESC);
          oprot.writeString(struct.env);
          oprot.writeFieldEnd();
        }
      }
      if (struct.traceId != null) {
        if (struct.isSetTraceId()) {
          oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
          oprot.writeString(struct.traceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.plates != null) {
        if (struct.isSetPlates()) {
          oprot.writeFieldBegin(PLATES_FIELD_DESC);
          oprot.writeString(struct.plates);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserBehaviorTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserBehaviorTupleScheme getScheme() {
      return new UserBehaviorTupleScheme();
    }
  }

  private static class UserBehaviorTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserBehavior> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserBehavior struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.userId);
      oprot.writeString(struct.actObj);
      oprot.writeString(struct.objType);
      oprot.writeString(struct.bhvType);
      oprot.writeDouble(struct.bhvAmt);
      oprot.writeDouble(struct.bhvCnt);
      oprot.writeString(struct.bhvDateTime);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetContent()) {
        optionals.set(0);
      }
      if (struct.isSetPosType()) {
        optionals.set(1);
      }
      if (struct.isSetPosition()) {
        optionals.set(2);
      }
      if (struct.isSetEnv()) {
        optionals.set(3);
      }
      if (struct.isSetTraceId()) {
        optionals.set(4);
      }
      if (struct.isSetPlates()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetPosType()) {
        oprot.writeString(struct.posType);
      }
      if (struct.isSetPosition()) {
        oprot.writeString(struct.position);
      }
      if (struct.isSetEnv()) {
        oprot.writeString(struct.env);
      }
      if (struct.isSetTraceId()) {
        oprot.writeString(struct.traceId);
      }
      if (struct.isSetPlates()) {
        oprot.writeString(struct.plates);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserBehavior struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.userId = iprot.readString();
      struct.setUserIdIsSet(true);
      struct.actObj = iprot.readString();
      struct.setActObjIsSet(true);
      struct.objType = iprot.readString();
      struct.setObjTypeIsSet(true);
      struct.bhvType = iprot.readString();
      struct.setBhvTypeIsSet(true);
      struct.bhvAmt = iprot.readDouble();
      struct.setBhvAmtIsSet(true);
      struct.bhvCnt = iprot.readDouble();
      struct.setBhvCntIsSet(true);
      struct.bhvDateTime = iprot.readString();
      struct.setBhvDateTimeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.posType = iprot.readString();
        struct.setPosTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.position = iprot.readString();
        struct.setPositionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.env = iprot.readString();
        struct.setEnvIsSet(true);
      }
      if (incoming.get(4)) {
        struct.traceId = iprot.readString();
        struct.setTraceIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.plates = iprot.readString();
        struct.setPlatesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

