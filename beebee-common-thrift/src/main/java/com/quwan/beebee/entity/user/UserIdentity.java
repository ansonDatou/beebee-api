/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.quwan.beebee.entity.user;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-29")
public class UserIdentity implements org.apache.thrift.TBase<UserIdentity, UserIdentity._Fields>, java.io.Serializable, Cloneable, Comparable<UserIdentity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserIdentity");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("identity", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("color", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IS_HIDE_FIELD_DESC = new org.apache.thrift.protocol.TField("isHide", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ADD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("addTime", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserIdentityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserIdentityTupleSchemeFactory();

  public int id; // required
  public int userId; // required
  public java.lang.String identity; // required
  public java.lang.String color; // required
  public int isHide; // required
  public java.lang.String addTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    USER_ID((short)2, "userId"),
    IDENTITY((short)3, "identity"),
    COLOR((short)4, "color"),
    IS_HIDE((short)5, "isHide"),
    ADD_TIME((short)6, "addTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // IDENTITY
          return IDENTITY;
        case 4: // COLOR
          return COLOR;
        case 5: // IS_HIDE
          return IS_HIDE;
        case 6: // ADD_TIME
          return ADD_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __ISHIDE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("identity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLOR, new org.apache.thrift.meta_data.FieldMetaData("color", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_HIDE, new org.apache.thrift.meta_data.FieldMetaData("isHide", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADD_TIME, new org.apache.thrift.meta_data.FieldMetaData("addTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserIdentity.class, metaDataMap);
  }

  public UserIdentity() {
  }

  public UserIdentity(
    int id,
    int userId,
    java.lang.String identity,
    java.lang.String color,
    int isHide,
    java.lang.String addTime)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.identity = identity;
    this.color = color;
    this.isHide = isHide;
    setIsHideIsSet(true);
    this.addTime = addTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserIdentity(UserIdentity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.userId = other.userId;
    if (other.isSetIdentity()) {
      this.identity = other.identity;
    }
    if (other.isSetColor()) {
      this.color = other.color;
    }
    this.isHide = other.isHide;
    if (other.isSetAddTime()) {
      this.addTime = other.addTime;
    }
  }

  public UserIdentity deepCopy() {
    return new UserIdentity(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.identity = null;
    this.color = null;
    setIsHideIsSet(false);
    this.isHide = 0;
    this.addTime = null;
  }

  public int getId() {
    return this.id;
  }

  public UserIdentity setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public UserIdentity setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public java.lang.String getIdentity() {
    return this.identity;
  }

  public UserIdentity setIdentity(java.lang.String identity) {
    this.identity = identity;
    return this;
  }

  public void unsetIdentity() {
    this.identity = null;
  }

  /** Returns true if field identity is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentity() {
    return this.identity != null;
  }

  public void setIdentityIsSet(boolean value) {
    if (!value) {
      this.identity = null;
    }
  }

  public java.lang.String getColor() {
    return this.color;
  }

  public UserIdentity setColor(java.lang.String color) {
    this.color = color;
    return this;
  }

  public void unsetColor() {
    this.color = null;
  }

  /** Returns true if field color is set (has been assigned a value) and false otherwise */
  public boolean isSetColor() {
    return this.color != null;
  }

  public void setColorIsSet(boolean value) {
    if (!value) {
      this.color = null;
    }
  }

  public int getIsHide() {
    return this.isHide;
  }

  public UserIdentity setIsHide(int isHide) {
    this.isHide = isHide;
    setIsHideIsSet(true);
    return this;
  }

  public void unsetIsHide() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISHIDE_ISSET_ID);
  }

  /** Returns true if field isHide is set (has been assigned a value) and false otherwise */
  public boolean isSetIsHide() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISHIDE_ISSET_ID);
  }

  public void setIsHideIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISHIDE_ISSET_ID, value);
  }

  public java.lang.String getAddTime() {
    return this.addTime;
  }

  public UserIdentity setAddTime(java.lang.String addTime) {
    this.addTime = addTime;
    return this;
  }

  public void unsetAddTime() {
    this.addTime = null;
  }

  /** Returns true if field addTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAddTime() {
    return this.addTime != null;
  }

  public void setAddTimeIsSet(boolean value) {
    if (!value) {
      this.addTime = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.Integer)value);
      }
      break;

    case IDENTITY:
      if (value == null) {
        unsetIdentity();
      } else {
        setIdentity((java.lang.String)value);
      }
      break;

    case COLOR:
      if (value == null) {
        unsetColor();
      } else {
        setColor((java.lang.String)value);
      }
      break;

    case IS_HIDE:
      if (value == null) {
        unsetIsHide();
      } else {
        setIsHide((java.lang.Integer)value);
      }
      break;

    case ADD_TIME:
      if (value == null) {
        unsetAddTime();
      } else {
        setAddTime((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case USER_ID:
      return getUserId();

    case IDENTITY:
      return getIdentity();

    case COLOR:
      return getColor();

    case IS_HIDE:
      return getIsHide();

    case ADD_TIME:
      return getAddTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case USER_ID:
      return isSetUserId();
    case IDENTITY:
      return isSetIdentity();
    case COLOR:
      return isSetColor();
    case IS_HIDE:
      return isSetIsHide();
    case ADD_TIME:
      return isSetAddTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UserIdentity)
      return this.equals((UserIdentity)that);
    return false;
  }

  public boolean equals(UserIdentity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_identity = true && this.isSetIdentity();
    boolean that_present_identity = true && that.isSetIdentity();
    if (this_present_identity || that_present_identity) {
      if (!(this_present_identity && that_present_identity))
        return false;
      if (!this.identity.equals(that.identity))
        return false;
    }

    boolean this_present_color = true && this.isSetColor();
    boolean that_present_color = true && that.isSetColor();
    if (this_present_color || that_present_color) {
      if (!(this_present_color && that_present_color))
        return false;
      if (!this.color.equals(that.color))
        return false;
    }

    boolean this_present_isHide = true;
    boolean that_present_isHide = true;
    if (this_present_isHide || that_present_isHide) {
      if (!(this_present_isHide && that_present_isHide))
        return false;
      if (this.isHide != that.isHide)
        return false;
    }

    boolean this_present_addTime = true && this.isSetAddTime();
    boolean that_present_addTime = true && that.isSetAddTime();
    if (this_present_addTime || that_present_addTime) {
      if (!(this_present_addTime && that_present_addTime))
        return false;
      if (!this.addTime.equals(that.addTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + ((isSetIdentity()) ? 131071 : 524287);
    if (isSetIdentity())
      hashCode = hashCode * 8191 + identity.hashCode();

    hashCode = hashCode * 8191 + ((isSetColor()) ? 131071 : 524287);
    if (isSetColor())
      hashCode = hashCode * 8191 + color.hashCode();

    hashCode = hashCode * 8191 + isHide;

    hashCode = hashCode * 8191 + ((isSetAddTime()) ? 131071 : 524287);
    if (isSetAddTime())
      hashCode = hashCode * 8191 + addTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UserIdentity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIdentity()).compareTo(other.isSetIdentity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity, other.identity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetColor()).compareTo(other.isSetColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.color, other.color);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsHide()).compareTo(other.isSetIsHide());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsHide()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHide, other.isHide);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAddTime()).compareTo(other.isSetAddTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addTime, other.addTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UserIdentity(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("identity:");
    if (this.identity == null) {
      sb.append("null");
    } else {
      sb.append(this.identity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("color:");
    if (this.color == null) {
      sb.append("null");
    } else {
      sb.append(this.color);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isHide:");
    sb.append(this.isHide);
    first = false;
    if (!first) sb.append(", ");
    sb.append("addTime:");
    if (this.addTime == null) {
      sb.append("null");
    } else {
      sb.append(this.addTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
    if (identity == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'identity' was not present! Struct: " + toString());
    }
    if (color == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'color' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'isHide' because it's a primitive and you chose the non-beans generator.
    if (addTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'addTime' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserIdentityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserIdentityStandardScheme getScheme() {
      return new UserIdentityStandardScheme();
    }
  }

  private static class UserIdentityStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserIdentity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserIdentity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IDENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identity = iprot.readString();
              struct.setIdentityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.color = iprot.readString();
              struct.setColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_HIDE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isHide = iprot.readI32();
              struct.setIsHideIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ADD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addTime = iprot.readString();
              struct.setAddTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsHide()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isHide' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserIdentity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.identity != null) {
        oprot.writeFieldBegin(IDENTITY_FIELD_DESC);
        oprot.writeString(struct.identity);
        oprot.writeFieldEnd();
      }
      if (struct.color != null) {
        oprot.writeFieldBegin(COLOR_FIELD_DESC);
        oprot.writeString(struct.color);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_HIDE_FIELD_DESC);
      oprot.writeI32(struct.isHide);
      oprot.writeFieldEnd();
      if (struct.addTime != null) {
        oprot.writeFieldBegin(ADD_TIME_FIELD_DESC);
        oprot.writeString(struct.addTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserIdentityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserIdentityTupleScheme getScheme() {
      return new UserIdentityTupleScheme();
    }
  }

  private static class UserIdentityTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserIdentity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserIdentity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeI32(struct.userId);
      oprot.writeString(struct.identity);
      oprot.writeString(struct.color);
      oprot.writeI32(struct.isHide);
      oprot.writeString(struct.addTime);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserIdentity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.userId = iprot.readI32();
      struct.setUserIdIsSet(true);
      struct.identity = iprot.readString();
      struct.setIdentityIsSet(true);
      struct.color = iprot.readString();
      struct.setColorIsSet(true);
      struct.isHide = iprot.readI32();
      struct.setIsHideIsSet(true);
      struct.addTime = iprot.readString();
      struct.setAddTimeIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

