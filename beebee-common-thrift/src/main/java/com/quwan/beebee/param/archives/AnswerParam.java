/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.quwan.beebee.param.archives;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-12-25")
public class AnswerParam implements org.apache.thrift.TBase<AnswerParam, AnswerParam._Fields>, java.io.Serializable, Cloneable, Comparable<AnswerParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AnswerParam");

  private static final org.apache.thrift.protocol.TField ARCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("archId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_ANSWER_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdAnswer", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commentId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_ID_NOTIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("userIdNotify", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ANSWER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("answerTime", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AnswerParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AnswerParamTupleSchemeFactory();

  public int archId; // required
  public int userIdAnswer; // required
  public int commentId; // required
  public String content; // required
  public int userIdNotify; // required
  public String answerTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ARCH_ID((short)1, "archId"),
    USER_ID_ANSWER((short)2, "userIdAnswer"),
    COMMENT_ID((short)3, "commentId"),
    CONTENT((short)4, "content"),
    USER_ID_NOTIFY((short)5, "userIdNotify"),
    ANSWER_TIME((short)6, "answerTime");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ARCH_ID
          return ARCH_ID;
        case 2: // USER_ID_ANSWER
          return USER_ID_ANSWER;
        case 3: // COMMENT_ID
          return COMMENT_ID;
        case 4: // CONTENT
          return CONTENT;
        case 5: // USER_ID_NOTIFY
          return USER_ID_NOTIFY;
        case 6: // ANSWER_TIME
          return ANSWER_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ARCHID_ISSET_ID = 0;
  private static final int __USERIDANSWER_ISSET_ID = 1;
  private static final int __COMMENTID_ISSET_ID = 2;
  private static final int __USERIDNOTIFY_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ANSWER_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ARCH_ID, new org.apache.thrift.meta_data.FieldMetaData("archId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID_ANSWER, new org.apache.thrift.meta_data.FieldMetaData("userIdAnswer", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("commentId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID_NOTIFY, new org.apache.thrift.meta_data.FieldMetaData("userIdNotify", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ANSWER_TIME, new org.apache.thrift.meta_data.FieldMetaData("answerTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AnswerParam.class, metaDataMap);
  }

  public AnswerParam() {
  }

  public AnswerParam(
    int archId,
    int userIdAnswer,
    int commentId,
    String content,
    int userIdNotify)
  {
    this();
    this.archId = archId;
    setArchIdIsSet(true);
    this.userIdAnswer = userIdAnswer;
    setUserIdAnswerIsSet(true);
    this.commentId = commentId;
    setCommentIdIsSet(true);
    this.content = content;
    this.userIdNotify = userIdNotify;
    setUserIdNotifyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AnswerParam(AnswerParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.archId = other.archId;
    this.userIdAnswer = other.userIdAnswer;
    this.commentId = other.commentId;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.userIdNotify = other.userIdNotify;
    if (other.isSetAnswerTime()) {
      this.answerTime = other.answerTime;
    }
  }

  public AnswerParam deepCopy() {
    return new AnswerParam(this);
  }

  @Override
  public void clear() {
    setArchIdIsSet(false);
    this.archId = 0;
    setUserIdAnswerIsSet(false);
    this.userIdAnswer = 0;
    setCommentIdIsSet(false);
    this.commentId = 0;
    this.content = null;
    setUserIdNotifyIsSet(false);
    this.userIdNotify = 0;
    this.answerTime = null;
  }

  public int getArchId() {
    return this.archId;
  }

  public AnswerParam setArchId(int archId) {
    this.archId = archId;
    setArchIdIsSet(true);
    return this;
  }

  public void unsetArchId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ARCHID_ISSET_ID);
  }

  /** Returns true if field archId is set (has been assigned a value) and false otherwise */
  public boolean isSetArchId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ARCHID_ISSET_ID);
  }

  public void setArchIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ARCHID_ISSET_ID, value);
  }

  public int getUserIdAnswer() {
    return this.userIdAnswer;
  }

  public AnswerParam setUserIdAnswer(int userIdAnswer) {
    this.userIdAnswer = userIdAnswer;
    setUserIdAnswerIsSet(true);
    return this;
  }

  public void unsetUserIdAnswer() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERIDANSWER_ISSET_ID);
  }

  /** Returns true if field userIdAnswer is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIdAnswer() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERIDANSWER_ISSET_ID);
  }

  public void setUserIdAnswerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERIDANSWER_ISSET_ID, value);
  }

  public int getCommentId() {
    return this.commentId;
  }

  public AnswerParam setCommentId(int commentId) {
    this.commentId = commentId;
    setCommentIdIsSet(true);
    return this;
  }

  public void unsetCommentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMMENTID_ISSET_ID);
  }

  /** Returns true if field commentId is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMMENTID_ISSET_ID);
  }

  public void setCommentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMMENTID_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public AnswerParam setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public int getUserIdNotify() {
    return this.userIdNotify;
  }

  public AnswerParam setUserIdNotify(int userIdNotify) {
    this.userIdNotify = userIdNotify;
    setUserIdNotifyIsSet(true);
    return this;
  }

  public void unsetUserIdNotify() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERIDNOTIFY_ISSET_ID);
  }

  /** Returns true if field userIdNotify is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIdNotify() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERIDNOTIFY_ISSET_ID);
  }

  public void setUserIdNotifyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERIDNOTIFY_ISSET_ID, value);
  }

  public String getAnswerTime() {
    return this.answerTime;
  }

  public AnswerParam setAnswerTime(String answerTime) {
    this.answerTime = answerTime;
    return this;
  }

  public void unsetAnswerTime() {
    this.answerTime = null;
  }

  /** Returns true if field answerTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswerTime() {
    return this.answerTime != null;
  }

  public void setAnswerTimeIsSet(boolean value) {
    if (!value) {
      this.answerTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ARCH_ID:
      if (value == null) {
        unsetArchId();
      } else {
        setArchId((Integer)value);
      }
      break;

    case USER_ID_ANSWER:
      if (value == null) {
        unsetUserIdAnswer();
      } else {
        setUserIdAnswer((Integer)value);
      }
      break;

    case COMMENT_ID:
      if (value == null) {
        unsetCommentId();
      } else {
        setCommentId((Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case USER_ID_NOTIFY:
      if (value == null) {
        unsetUserIdNotify();
      } else {
        setUserIdNotify((Integer)value);
      }
      break;

    case ANSWER_TIME:
      if (value == null) {
        unsetAnswerTime();
      } else {
        setAnswerTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ARCH_ID:
      return getArchId();

    case USER_ID_ANSWER:
      return getUserIdAnswer();

    case COMMENT_ID:
      return getCommentId();

    case CONTENT:
      return getContent();

    case USER_ID_NOTIFY:
      return getUserIdNotify();

    case ANSWER_TIME:
      return getAnswerTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ARCH_ID:
      return isSetArchId();
    case USER_ID_ANSWER:
      return isSetUserIdAnswer();
    case COMMENT_ID:
      return isSetCommentId();
    case CONTENT:
      return isSetContent();
    case USER_ID_NOTIFY:
      return isSetUserIdNotify();
    case ANSWER_TIME:
      return isSetAnswerTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AnswerParam)
      return this.equals((AnswerParam)that);
    return false;
  }

  public boolean equals(AnswerParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_archId = true;
    boolean that_present_archId = true;
    if (this_present_archId || that_present_archId) {
      if (!(this_present_archId && that_present_archId))
        return false;
      if (this.archId != that.archId)
        return false;
    }

    boolean this_present_userIdAnswer = true;
    boolean that_present_userIdAnswer = true;
    if (this_present_userIdAnswer || that_present_userIdAnswer) {
      if (!(this_present_userIdAnswer && that_present_userIdAnswer))
        return false;
      if (this.userIdAnswer != that.userIdAnswer)
        return false;
    }

    boolean this_present_commentId = true;
    boolean that_present_commentId = true;
    if (this_present_commentId || that_present_commentId) {
      if (!(this_present_commentId && that_present_commentId))
        return false;
      if (this.commentId != that.commentId)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_userIdNotify = true;
    boolean that_present_userIdNotify = true;
    if (this_present_userIdNotify || that_present_userIdNotify) {
      if (!(this_present_userIdNotify && that_present_userIdNotify))
        return false;
      if (this.userIdNotify != that.userIdNotify)
        return false;
    }

    boolean this_present_answerTime = true && this.isSetAnswerTime();
    boolean that_present_answerTime = true && that.isSetAnswerTime();
    if (this_present_answerTime || that_present_answerTime) {
      if (!(this_present_answerTime && that_present_answerTime))
        return false;
      if (!this.answerTime.equals(that.answerTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + archId;

    hashCode = hashCode * 8191 + userIdAnswer;

    hashCode = hashCode * 8191 + commentId;

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + userIdNotify;

    hashCode = hashCode * 8191 + ((isSetAnswerTime()) ? 131071 : 524287);
    if (isSetAnswerTime())
      hashCode = hashCode * 8191 + answerTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AnswerParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetArchId()).compareTo(other.isSetArchId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archId, other.archId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIdAnswer()).compareTo(other.isSetUserIdAnswer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIdAnswer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdAnswer, other.userIdAnswer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentId()).compareTo(other.isSetCommentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentId, other.commentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIdNotify()).compareTo(other.isSetUserIdNotify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIdNotify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIdNotify, other.userIdNotify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswerTime()).compareTo(other.isSetAnswerTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswerTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answerTime, other.answerTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AnswerParam(");
    boolean first = true;

    sb.append("archId:");
    sb.append(this.archId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIdAnswer:");
    sb.append(this.userIdAnswer);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commentId:");
    sb.append(this.commentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIdNotify:");
    sb.append(this.userIdNotify);
    first = false;
    if (isSetAnswerTime()) {
      if (!first) sb.append(", ");
      sb.append("answerTime:");
      if (this.answerTime == null) {
        sb.append("null");
      } else {
        sb.append(this.answerTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'archId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'userIdAnswer' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'commentId' because it's a primitive and you chose the non-beans generator.
    if (content == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'content' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'userIdNotify' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AnswerParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AnswerParamStandardScheme getScheme() {
      return new AnswerParamStandardScheme();
    }
  }

  private static class AnswerParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<AnswerParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AnswerParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ARCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.archId = iprot.readI32();
              struct.setArchIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID_ANSWER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userIdAnswer = iprot.readI32();
              struct.setUserIdAnswerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commentId = iprot.readI32();
              struct.setCommentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_ID_NOTIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userIdNotify = iprot.readI32();
              struct.setUserIdNotifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ANSWER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.answerTime = iprot.readString();
              struct.setAnswerTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetArchId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'archId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUserIdAnswer()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userIdAnswer' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCommentId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'commentId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUserIdNotify()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userIdNotify' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AnswerParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ARCH_ID_FIELD_DESC);
      oprot.writeI32(struct.archId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_ANSWER_FIELD_DESC);
      oprot.writeI32(struct.userIdAnswer);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.commentId);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_NOTIFY_FIELD_DESC);
      oprot.writeI32(struct.userIdNotify);
      oprot.writeFieldEnd();
      if (struct.answerTime != null) {
        if (struct.isSetAnswerTime()) {
          oprot.writeFieldBegin(ANSWER_TIME_FIELD_DESC);
          oprot.writeString(struct.answerTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AnswerParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AnswerParamTupleScheme getScheme() {
      return new AnswerParamTupleScheme();
    }
  }

  private static class AnswerParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<AnswerParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AnswerParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.archId);
      oprot.writeI32(struct.userIdAnswer);
      oprot.writeI32(struct.commentId);
      oprot.writeString(struct.content);
      oprot.writeI32(struct.userIdNotify);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAnswerTime()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetAnswerTime()) {
        oprot.writeString(struct.answerTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AnswerParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.archId = iprot.readI32();
      struct.setArchIdIsSet(true);
      struct.userIdAnswer = iprot.readI32();
      struct.setUserIdAnswerIsSet(true);
      struct.commentId = iprot.readI32();
      struct.setCommentIdIsSet(true);
      struct.content = iprot.readString();
      struct.setContentIsSet(true);
      struct.userIdNotify = iprot.readI32();
      struct.setUserIdNotifyIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.answerTime = iprot.readString();
        struct.setAnswerTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

