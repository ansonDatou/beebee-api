/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.quwan.beebee.param.common;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-12-23")
public class AuthcodeParam implements org.apache.thrift.TBase<AuthcodeParam, AuthcodeParam._Fields>, java.io.Serializable, Cloneable, Comparable<AuthcodeParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthcodeParam");

  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AUTHCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("authcode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ADD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("addTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USED_FIELD_DESC = new org.apache.thrift.protocol.TField("used", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AuthcodeParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AuthcodeParamTupleSchemeFactory();

  public String mobile; // required
  public String type; // required
  public String authcode; // optional
  public String addTime; // optional
  public String used; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MOBILE((short)1, "mobile"),
    TYPE((short)2, "type"),
    AUTHCODE((short)3, "authcode"),
    ADD_TIME((short)4, "addTime"),
    USED((short)5, "used");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MOBILE
          return MOBILE;
        case 2: // TYPE
          return TYPE;
        case 3: // AUTHCODE
          return AUTHCODE;
        case 4: // ADD_TIME
          return ADD_TIME;
        case 5: // USED
          return USED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.AUTHCODE, _Fields.ADD_TIME, _Fields.USED};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHCODE, new org.apache.thrift.meta_data.FieldMetaData("authcode", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADD_TIME, new org.apache.thrift.meta_data.FieldMetaData("addTime", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USED, new org.apache.thrift.meta_data.FieldMetaData("used", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthcodeParam.class, metaDataMap);
  }

  public AuthcodeParam() {
  }

  public AuthcodeParam(
    String mobile,
    String type)
  {
    this();
    this.mobile = mobile;
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AuthcodeParam(AuthcodeParam other) {
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetAuthcode()) {
      this.authcode = other.authcode;
    }
    if (other.isSetAddTime()) {
      this.addTime = other.addTime;
    }
    if (other.isSetUsed()) {
      this.used = other.used;
    }
  }

  public AuthcodeParam deepCopy() {
    return new AuthcodeParam(this);
  }

  @Override
  public void clear() {
    this.mobile = null;
    this.type = null;
    this.authcode = null;
    this.addTime = null;
    this.used = null;
  }

  public String getMobile() {
    return this.mobile;
  }

  public AuthcodeParam setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public AuthcodeParam setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getAuthcode() {
    return this.authcode;
  }

  public AuthcodeParam setAuthcode(String authcode) {
    this.authcode = authcode;
    return this;
  }

  public void unsetAuthcode() {
    this.authcode = null;
  }

  /** Returns true if field authcode is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthcode() {
    return this.authcode != null;
  }

  public void setAuthcodeIsSet(boolean value) {
    if (!value) {
      this.authcode = null;
    }
  }

  public String getAddTime() {
    return this.addTime;
  }

  public AuthcodeParam setAddTime(String addTime) {
    this.addTime = addTime;
    return this;
  }

  public void unsetAddTime() {
    this.addTime = null;
  }

  /** Returns true if field addTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAddTime() {
    return this.addTime != null;
  }

  public void setAddTimeIsSet(boolean value) {
    if (!value) {
      this.addTime = null;
    }
  }

  public String getUsed() {
    return this.used;
  }

  public AuthcodeParam setUsed(String used) {
    this.used = used;
    return this;
  }

  public void unsetUsed() {
    this.used = null;
  }

  /** Returns true if field used is set (has been assigned a value) and false otherwise */
  public boolean isSetUsed() {
    return this.used != null;
  }

  public void setUsedIsSet(boolean value) {
    if (!value) {
      this.used = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case AUTHCODE:
      if (value == null) {
        unsetAuthcode();
      } else {
        setAuthcode((String)value);
      }
      break;

    case ADD_TIME:
      if (value == null) {
        unsetAddTime();
      } else {
        setAddTime((String)value);
      }
      break;

    case USED:
      if (value == null) {
        unsetUsed();
      } else {
        setUsed((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MOBILE:
      return getMobile();

    case TYPE:
      return getType();

    case AUTHCODE:
      return getAuthcode();

    case ADD_TIME:
      return getAddTime();

    case USED:
      return getUsed();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MOBILE:
      return isSetMobile();
    case TYPE:
      return isSetType();
    case AUTHCODE:
      return isSetAuthcode();
    case ADD_TIME:
      return isSetAddTime();
    case USED:
      return isSetUsed();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AuthcodeParam)
      return this.equals((AuthcodeParam)that);
    return false;
  }

  public boolean equals(AuthcodeParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_authcode = true && this.isSetAuthcode();
    boolean that_present_authcode = true && that.isSetAuthcode();
    if (this_present_authcode || that_present_authcode) {
      if (!(this_present_authcode && that_present_authcode))
        return false;
      if (!this.authcode.equals(that.authcode))
        return false;
    }

    boolean this_present_addTime = true && this.isSetAddTime();
    boolean that_present_addTime = true && that.isSetAddTime();
    if (this_present_addTime || that_present_addTime) {
      if (!(this_present_addTime && that_present_addTime))
        return false;
      if (!this.addTime.equals(that.addTime))
        return false;
    }

    boolean this_present_used = true && this.isSetUsed();
    boolean that_present_used = true && that.isSetUsed();
    if (this_present_used || that_present_used) {
      if (!(this_present_used && that_present_used))
        return false;
      if (!this.used.equals(that.used))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
    if (isSetMobile())
      hashCode = hashCode * 8191 + mobile.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthcode()) ? 131071 : 524287);
    if (isSetAuthcode())
      hashCode = hashCode * 8191 + authcode.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddTime()) ? 131071 : 524287);
    if (isSetAddTime())
      hashCode = hashCode * 8191 + addTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsed()) ? 131071 : 524287);
    if (isSetUsed())
      hashCode = hashCode * 8191 + used.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AuthcodeParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthcode()).compareTo(other.isSetAuthcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authcode, other.authcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddTime()).compareTo(other.isSetAddTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addTime, other.addTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsed()).compareTo(other.isSetUsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.used, other.used);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AuthcodeParam(");
    boolean first = true;

    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetAuthcode()) {
      if (!first) sb.append(", ");
      sb.append("authcode:");
      if (this.authcode == null) {
        sb.append("null");
      } else {
        sb.append(this.authcode);
      }
      first = false;
    }
    if (isSetAddTime()) {
      if (!first) sb.append(", ");
      sb.append("addTime:");
      if (this.addTime == null) {
        sb.append("null");
      } else {
        sb.append(this.addTime);
      }
      first = false;
    }
    if (isSetUsed()) {
      if (!first) sb.append(", ");
      sb.append("used:");
      if (this.used == null) {
        sb.append("null");
      } else {
        sb.append(this.used);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (mobile == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mobile' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AuthcodeParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AuthcodeParamStandardScheme getScheme() {
      return new AuthcodeParamStandardScheme();
    }
  }

  private static class AuthcodeParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<AuthcodeParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AuthcodeParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTHCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authcode = iprot.readString();
              struct.setAuthcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ADD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addTime = iprot.readString();
              struct.setAddTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.used = iprot.readString();
              struct.setUsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AuthcodeParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.authcode != null) {
        if (struct.isSetAuthcode()) {
          oprot.writeFieldBegin(AUTHCODE_FIELD_DESC);
          oprot.writeString(struct.authcode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.addTime != null) {
        if (struct.isSetAddTime()) {
          oprot.writeFieldBegin(ADD_TIME_FIELD_DESC);
          oprot.writeString(struct.addTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.used != null) {
        if (struct.isSetUsed()) {
          oprot.writeFieldBegin(USED_FIELD_DESC);
          oprot.writeString(struct.used);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AuthcodeParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AuthcodeParamTupleScheme getScheme() {
      return new AuthcodeParamTupleScheme();
    }
  }

  private static class AuthcodeParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<AuthcodeParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AuthcodeParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.mobile);
      oprot.writeString(struct.type);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAuthcode()) {
        optionals.set(0);
      }
      if (struct.isSetAddTime()) {
        optionals.set(1);
      }
      if (struct.isSetUsed()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAuthcode()) {
        oprot.writeString(struct.authcode);
      }
      if (struct.isSetAddTime()) {
        oprot.writeString(struct.addTime);
      }
      if (struct.isSetUsed()) {
        oprot.writeString(struct.used);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AuthcodeParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.mobile = iprot.readString();
      struct.setMobileIsSet(true);
      struct.type = iprot.readString();
      struct.setTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.authcode = iprot.readString();
        struct.setAuthcodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.addTime = iprot.readString();
        struct.setAddTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.used = iprot.readString();
        struct.setUsedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

