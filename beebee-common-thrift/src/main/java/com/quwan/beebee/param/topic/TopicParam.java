/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.quwan.beebee.param.topic;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-02-06")
public class TopicParam implements org.apache.thrift.TBase<TopicParam, TopicParam._Fields>, java.io.Serializable, Cloneable, Comparable<TopicParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopicParam");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("img", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REPLIER_IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("replierIdentity", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MULTI_SELECT_FIELD_DESC = new org.apache.thrift.protocol.TField("multiSelect", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TopicParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TopicParamTupleSchemeFactory();

  public int userId; // required
  public int type; // required
  public String title; // required
  public String content; // required
  public String img; // optional
  public String replierIdentity; // optional
  public int multiSelect; // optional
  public String option; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    TYPE((short)2, "type"),
    TITLE((short)3, "title"),
    CONTENT((short)4, "content"),
    IMG((short)5, "img"),
    REPLIER_IDENTITY((short)6, "replierIdentity"),
    MULTI_SELECT((short)7, "multiSelect"),
    OPTION((short)8, "option");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // TYPE
          return TYPE;
        case 3: // TITLE
          return TITLE;
        case 4: // CONTENT
          return CONTENT;
        case 5: // IMG
          return IMG;
        case 6: // REPLIER_IDENTITY
          return REPLIER_IDENTITY;
        case 7: // MULTI_SELECT
          return MULTI_SELECT;
        case 8: // OPTION
          return OPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __MULTISELECT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IMG, _Fields.REPLIER_IDENTITY, _Fields.MULTI_SELECT, _Fields.OPTION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG, new org.apache.thrift.meta_data.FieldMetaData("img", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLIER_IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("replierIdentity", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_SELECT, new org.apache.thrift.meta_data.FieldMetaData("multiSelect", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopicParam.class, metaDataMap);
  }

  public TopicParam() {
  }

  public TopicParam(
    int userId,
    int type,
    String title,
    String content)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.title = title;
    this.content = content;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TopicParam(TopicParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    this.type = other.type;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetImg()) {
      this.img = other.img;
    }
    if (other.isSetReplierIdentity()) {
      this.replierIdentity = other.replierIdentity;
    }
    this.multiSelect = other.multiSelect;
    if (other.isSetOption()) {
      this.option = other.option;
    }
  }

  public TopicParam deepCopy() {
    return new TopicParam(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    setTypeIsSet(false);
    this.type = 0;
    this.title = null;
    this.content = null;
    this.img = null;
    this.replierIdentity = null;
    setMultiSelectIsSet(false);
    this.multiSelect = 0;
    this.option = null;
  }

  public int getUserId() {
    return this.userId;
  }

  public TopicParam setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public TopicParam setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public TopicParam setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public TopicParam setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getImg() {
    return this.img;
  }

  public TopicParam setImg(String img) {
    this.img = img;
    return this;
  }

  public void unsetImg() {
    this.img = null;
  }

  /** Returns true if field img is set (has been assigned a value) and false otherwise */
  public boolean isSetImg() {
    return this.img != null;
  }

  public void setImgIsSet(boolean value) {
    if (!value) {
      this.img = null;
    }
  }

  public String getReplierIdentity() {
    return this.replierIdentity;
  }

  public TopicParam setReplierIdentity(String replierIdentity) {
    this.replierIdentity = replierIdentity;
    return this;
  }

  public void unsetReplierIdentity() {
    this.replierIdentity = null;
  }

  /** Returns true if field replierIdentity is set (has been assigned a value) and false otherwise */
  public boolean isSetReplierIdentity() {
    return this.replierIdentity != null;
  }

  public void setReplierIdentityIsSet(boolean value) {
    if (!value) {
      this.replierIdentity = null;
    }
  }

  public int getMultiSelect() {
    return this.multiSelect;
  }

  public TopicParam setMultiSelect(int multiSelect) {
    this.multiSelect = multiSelect;
    setMultiSelectIsSet(true);
    return this;
  }

  public void unsetMultiSelect() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MULTISELECT_ISSET_ID);
  }

  /** Returns true if field multiSelect is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiSelect() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MULTISELECT_ISSET_ID);
  }

  public void setMultiSelectIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MULTISELECT_ISSET_ID, value);
  }

  public String getOption() {
    return this.option;
  }

  public TopicParam setOption(String option) {
    this.option = option;
    return this;
  }

  public void unsetOption() {
    this.option = null;
  }

  /** Returns true if field option is set (has been assigned a value) and false otherwise */
  public boolean isSetOption() {
    return this.option != null;
  }

  public void setOptionIsSet(boolean value) {
    if (!value) {
      this.option = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case IMG:
      if (value == null) {
        unsetImg();
      } else {
        setImg((String)value);
      }
      break;

    case REPLIER_IDENTITY:
      if (value == null) {
        unsetReplierIdentity();
      } else {
        setReplierIdentity((String)value);
      }
      break;

    case MULTI_SELECT:
      if (value == null) {
        unsetMultiSelect();
      } else {
        setMultiSelect((Integer)value);
      }
      break;

    case OPTION:
      if (value == null) {
        unsetOption();
      } else {
        setOption((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case TYPE:
      return getType();

    case TITLE:
      return getTitle();

    case CONTENT:
      return getContent();

    case IMG:
      return getImg();

    case REPLIER_IDENTITY:
      return getReplierIdentity();

    case MULTI_SELECT:
      return getMultiSelect();

    case OPTION:
      return getOption();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case TYPE:
      return isSetType();
    case TITLE:
      return isSetTitle();
    case CONTENT:
      return isSetContent();
    case IMG:
      return isSetImg();
    case REPLIER_IDENTITY:
      return isSetReplierIdentity();
    case MULTI_SELECT:
      return isSetMultiSelect();
    case OPTION:
      return isSetOption();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TopicParam)
      return this.equals((TopicParam)that);
    return false;
  }

  public boolean equals(TopicParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_img = true && this.isSetImg();
    boolean that_present_img = true && that.isSetImg();
    if (this_present_img || that_present_img) {
      if (!(this_present_img && that_present_img))
        return false;
      if (!this.img.equals(that.img))
        return false;
    }

    boolean this_present_replierIdentity = true && this.isSetReplierIdentity();
    boolean that_present_replierIdentity = true && that.isSetReplierIdentity();
    if (this_present_replierIdentity || that_present_replierIdentity) {
      if (!(this_present_replierIdentity && that_present_replierIdentity))
        return false;
      if (!this.replierIdentity.equals(that.replierIdentity))
        return false;
    }

    boolean this_present_multiSelect = true && this.isSetMultiSelect();
    boolean that_present_multiSelect = true && that.isSetMultiSelect();
    if (this_present_multiSelect || that_present_multiSelect) {
      if (!(this_present_multiSelect && that_present_multiSelect))
        return false;
      if (this.multiSelect != that.multiSelect)
        return false;
    }

    boolean this_present_option = true && this.isSetOption();
    boolean that_present_option = true && that.isSetOption();
    if (this_present_option || that_present_option) {
      if (!(this_present_option && that_present_option))
        return false;
      if (!this.option.equals(that.option))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + type;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content.hashCode();

    hashCode = hashCode * 8191 + ((isSetImg()) ? 131071 : 524287);
    if (isSetImg())
      hashCode = hashCode * 8191 + img.hashCode();

    hashCode = hashCode * 8191 + ((isSetReplierIdentity()) ? 131071 : 524287);
    if (isSetReplierIdentity())
      hashCode = hashCode * 8191 + replierIdentity.hashCode();

    hashCode = hashCode * 8191 + ((isSetMultiSelect()) ? 131071 : 524287);
    if (isSetMultiSelect())
      hashCode = hashCode * 8191 + multiSelect;

    hashCode = hashCode * 8191 + ((isSetOption()) ? 131071 : 524287);
    if (isSetOption())
      hashCode = hashCode * 8191 + option.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TopicParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImg()).compareTo(other.isSetImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img, other.img);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplierIdentity()).compareTo(other.isSetReplierIdentity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplierIdentity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replierIdentity, other.replierIdentity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiSelect()).compareTo(other.isSetMultiSelect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiSelect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiSelect, other.multiSelect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TopicParam(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (isSetImg()) {
      if (!first) sb.append(", ");
      sb.append("img:");
      if (this.img == null) {
        sb.append("null");
      } else {
        sb.append(this.img);
      }
      first = false;
    }
    if (isSetReplierIdentity()) {
      if (!first) sb.append(", ");
      sb.append("replierIdentity:");
      if (this.replierIdentity == null) {
        sb.append("null");
      } else {
        sb.append(this.replierIdentity);
      }
      first = false;
    }
    if (isSetMultiSelect()) {
      if (!first) sb.append(", ");
      sb.append("multiSelect:");
      sb.append(this.multiSelect);
      first = false;
    }
    if (isSetOption()) {
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'type' because it's a primitive and you chose the non-beans generator.
    if (title == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'title' was not present! Struct: " + toString());
    }
    if (content == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'content' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopicParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopicParamStandardScheme getScheme() {
      return new TopicParamStandardScheme();
    }
  }

  private static class TopicParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<TopicParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TopicParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.img = iprot.readString();
              struct.setImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REPLIER_IDENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.replierIdentity = iprot.readString();
              struct.setReplierIdentityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MULTI_SELECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.multiSelect = iprot.readI32();
              struct.setMultiSelectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.option = iprot.readString();
              struct.setOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TopicParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.img != null) {
        if (struct.isSetImg()) {
          oprot.writeFieldBegin(IMG_FIELD_DESC);
          oprot.writeString(struct.img);
          oprot.writeFieldEnd();
        }
      }
      if (struct.replierIdentity != null) {
        if (struct.isSetReplierIdentity()) {
          oprot.writeFieldBegin(REPLIER_IDENTITY_FIELD_DESC);
          oprot.writeString(struct.replierIdentity);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMultiSelect()) {
        oprot.writeFieldBegin(MULTI_SELECT_FIELD_DESC);
        oprot.writeI32(struct.multiSelect);
        oprot.writeFieldEnd();
      }
      if (struct.option != null) {
        if (struct.isSetOption()) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          oprot.writeString(struct.option);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopicParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopicParamTupleScheme getScheme() {
      return new TopicParamTupleScheme();
    }
  }

  private static class TopicParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<TopicParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TopicParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.userId);
      oprot.writeI32(struct.type);
      oprot.writeString(struct.title);
      oprot.writeString(struct.content);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetImg()) {
        optionals.set(0);
      }
      if (struct.isSetReplierIdentity()) {
        optionals.set(1);
      }
      if (struct.isSetMultiSelect()) {
        optionals.set(2);
      }
      if (struct.isSetOption()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetImg()) {
        oprot.writeString(struct.img);
      }
      if (struct.isSetReplierIdentity()) {
        oprot.writeString(struct.replierIdentity);
      }
      if (struct.isSetMultiSelect()) {
        oprot.writeI32(struct.multiSelect);
      }
      if (struct.isSetOption()) {
        oprot.writeString(struct.option);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TopicParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.userId = iprot.readI32();
      struct.setUserIdIsSet(true);
      struct.type = iprot.readI32();
      struct.setTypeIsSet(true);
      struct.title = iprot.readString();
      struct.setTitleIsSet(true);
      struct.content = iprot.readString();
      struct.setContentIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.img = iprot.readString();
        struct.setImgIsSet(true);
      }
      if (incoming.get(1)) {
        struct.replierIdentity = iprot.readString();
        struct.setReplierIdentityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.multiSelect = iprot.readI32();
        struct.setMultiSelectIsSet(true);
      }
      if (incoming.get(3)) {
        struct.option = iprot.readString();
        struct.setOptionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

