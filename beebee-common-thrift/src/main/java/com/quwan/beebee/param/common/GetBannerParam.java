/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.quwan.beebee.param.common;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-12-24")
public class GetBannerParam implements org.apache.thrift.TBase<GetBannerParam, GetBannerParam._Fields>, java.io.Serializable, Cloneable, Comparable<GetBannerParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetBannerParam");

  private static final org.apache.thrift.protocol.TField BLOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("block", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CLASSIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("classify", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetBannerParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetBannerParamTupleSchemeFactory();

  public int block; // required
  public int type; // required
  public String classify; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BLOCK((short)1, "block"),
    TYPE((short)2, "type"),
    CLASSIFY((short)3, "classify");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BLOCK
          return BLOCK;
        case 2: // TYPE
          return TYPE;
        case 3: // CLASSIFY
          return CLASSIFY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BLOCK_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BLOCK, new org.apache.thrift.meta_data.FieldMetaData("block", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLASSIFY, new org.apache.thrift.meta_data.FieldMetaData("classify", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetBannerParam.class, metaDataMap);
  }

  public GetBannerParam() {
  }

  public GetBannerParam(
    int block,
    int type,
    String classify)
  {
    this();
    this.block = block;
    setBlockIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.classify = classify;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetBannerParam(GetBannerParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.block = other.block;
    this.type = other.type;
    if (other.isSetClassify()) {
      this.classify = other.classify;
    }
  }

  public GetBannerParam deepCopy() {
    return new GetBannerParam(this);
  }

  @Override
  public void clear() {
    setBlockIsSet(false);
    this.block = 0;
    setTypeIsSet(false);
    this.type = 0;
    this.classify = null;
  }

  public int getBlock() {
    return this.block;
  }

  public GetBannerParam setBlock(int block) {
    this.block = block;
    setBlockIsSet(true);
    return this;
  }

  public void unsetBlock() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOCK_ISSET_ID);
  }

  /** Returns true if field block is set (has been assigned a value) and false otherwise */
  public boolean isSetBlock() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOCK_ISSET_ID);
  }

  public void setBlockIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOCK_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public GetBannerParam setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getClassify() {
    return this.classify;
  }

  public GetBannerParam setClassify(String classify) {
    this.classify = classify;
    return this;
  }

  public void unsetClassify() {
    this.classify = null;
  }

  /** Returns true if field classify is set (has been assigned a value) and false otherwise */
  public boolean isSetClassify() {
    return this.classify != null;
  }

  public void setClassifyIsSet(boolean value) {
    if (!value) {
      this.classify = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BLOCK:
      if (value == null) {
        unsetBlock();
      } else {
        setBlock((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case CLASSIFY:
      if (value == null) {
        unsetClassify();
      } else {
        setClassify((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BLOCK:
      return getBlock();

    case TYPE:
      return getType();

    case CLASSIFY:
      return getClassify();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BLOCK:
      return isSetBlock();
    case TYPE:
      return isSetType();
    case CLASSIFY:
      return isSetClassify();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetBannerParam)
      return this.equals((GetBannerParam)that);
    return false;
  }

  public boolean equals(GetBannerParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_block = true;
    boolean that_present_block = true;
    if (this_present_block || that_present_block) {
      if (!(this_present_block && that_present_block))
        return false;
      if (this.block != that.block)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_classify = true && this.isSetClassify();
    boolean that_present_classify = true && that.isSetClassify();
    if (this_present_classify || that_present_classify) {
      if (!(this_present_classify && that_present_classify))
        return false;
      if (!this.classify.equals(that.classify))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + block;

    hashCode = hashCode * 8191 + type;

    hashCode = hashCode * 8191 + ((isSetClassify()) ? 131071 : 524287);
    if (isSetClassify())
      hashCode = hashCode * 8191 + classify.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GetBannerParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBlock()).compareTo(other.isSetBlock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.block, other.block);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassify()).compareTo(other.isSetClassify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classify, other.classify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetBannerParam(");
    boolean first = true;

    sb.append("block:");
    sb.append(this.block);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("classify:");
    if (this.classify == null) {
      sb.append("null");
    } else {
      sb.append(this.classify);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'block' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'type' because it's a primitive and you chose the non-beans generator.
    if (classify == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'classify' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetBannerParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetBannerParamStandardScheme getScheme() {
      return new GetBannerParamStandardScheme();
    }
  }

  private static class GetBannerParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetBannerParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetBannerParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BLOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.block = iprot.readI32();
              struct.setBlockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLASSIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.classify = iprot.readString();
              struct.setClassifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBlock()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'block' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetBannerParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BLOCK_FIELD_DESC);
      oprot.writeI32(struct.block);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      if (struct.classify != null) {
        oprot.writeFieldBegin(CLASSIFY_FIELD_DESC);
        oprot.writeString(struct.classify);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetBannerParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetBannerParamTupleScheme getScheme() {
      return new GetBannerParamTupleScheme();
    }
  }

  private static class GetBannerParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetBannerParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetBannerParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.block);
      oprot.writeI32(struct.type);
      oprot.writeString(struct.classify);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetBannerParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.block = iprot.readI32();
      struct.setBlockIsSet(true);
      struct.type = iprot.readI32();
      struct.setTypeIsSet(true);
      struct.classify = iprot.readString();
      struct.setClassifyIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

