/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.quwan.beebee.param.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-12-22")
public class UpdateHeadParam implements
		org.apache.thrift.TBase<UpdateHeadParam, UpdateHeadParam._Fields>,
		java.io.Serializable, Cloneable, Comparable<UpdateHeadParam> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"UpdateHeadParam");

	private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"userId", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"data", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"type", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField MIME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"mimeType", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UpdateHeadParamStandardSchemeFactory();
	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UpdateHeadParamTupleSchemeFactory();

	public int userId; // required
	public String data; // required
	public String type; // optional
	public String mimeType; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		USER_ID((short) 1, "userId"), DATA((short) 2, "data"), TYPE((short) 3,
				"type"), MIME_TYPE((short) 4, "mimeType");

		private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // USER_ID
				return USER_ID;
			case 2: // DATA
				return DATA;
			case 3: // TYPE
				return TYPE;
			case 4: // MIME_TYPE
				return MIME_TYPE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId
						+ " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __USERID_ISSET_ID = 0;
	private byte __isset_bitfield = 0;
	private static final _Fields optionals[] = { _Fields.TYPE,
			_Fields.MIME_TYPE };
	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.USER_ID,
				new org.apache.thrift.meta_data.FieldMetaData("userId",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData(
				"data", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData(
				"type", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MIME_TYPE,
				new org.apache.thrift.meta_data.FieldMetaData("mimeType",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
				UpdateHeadParam.class, metaDataMap);
	}

	public UpdateHeadParam() {
	}

	public UpdateHeadParam(int userId, String data) {
		this();
		this.userId = userId;
		setUserIdIsSet(true);
		this.data = data;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public UpdateHeadParam(UpdateHeadParam other) {
		__isset_bitfield = other.__isset_bitfield;
		this.userId = other.userId;
		if (other.isSetData()) {
			this.data = other.data;
		}
		if (other.isSetType()) {
			this.type = other.type;
		}
		if (other.isSetMimeType()) {
			this.mimeType = other.mimeType;
		}
	}

	public UpdateHeadParam deepCopy() {
		return new UpdateHeadParam(this);
	}

	@Override
	public void clear() {
		setUserIdIsSet(false);
		this.userId = 0;
		this.data = null;
		this.type = null;
		this.mimeType = null;
	}

	public int getUserId() {
		return this.userId;
	}

	public UpdateHeadParam setUserId(int userId) {
		this.userId = userId;
		setUserIdIsSet(true);
		return this;
	}

	public void unsetUserId() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(
				__isset_bitfield, __USERID_ISSET_ID);
	}

	/**
	 * Returns true if field userId is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUserId() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield,
				__USERID_ISSET_ID);
	}

	public void setUserIdIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(
				__isset_bitfield, __USERID_ISSET_ID, value);
	}

	public String getData() {
		return this.data;
	}

	public UpdateHeadParam setData(String data) {
		this.data = data;
		return this;
	}

	public void unsetData() {
		this.data = null;
	}

	/**
	 * Returns true if field data is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetData() {
		return this.data != null;
	}

	public void setDataIsSet(boolean value) {
		if (!value) {
			this.data = null;
		}
	}

	public String getType() {
		return this.type;
	}

	public UpdateHeadParam setType(String type) {
		this.type = type;
		return this;
	}

	public void unsetType() {
		this.type = null;
	}

	/**
	 * Returns true if field type is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetType() {
		return this.type != null;
	}

	public void setTypeIsSet(boolean value) {
		if (!value) {
			this.type = null;
		}
	}

	public String getMimeType() {
		return this.mimeType;
	}

	public UpdateHeadParam setMimeType(String mimeType) {
		this.mimeType = mimeType;
		return this;
	}

	public void unsetMimeType() {
		this.mimeType = null;
	}

	/**
	 * Returns true if field mimeType is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetMimeType() {
		return this.mimeType != null;
	}

	public void setMimeTypeIsSet(boolean value) {
		if (!value) {
			this.mimeType = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case USER_ID:
			if (value == null) {
				unsetUserId();
			} else {
				setUserId((Integer) value);
			}
			break;

		case DATA:
			if (value == null) {
				unsetData();
			} else {
				setData((String) value);
			}
			break;

		case TYPE:
			if (value == null) {
				unsetType();
			} else {
				setType((String) value);
			}
			break;

		case MIME_TYPE:
			if (value == null) {
				unsetMimeType();
			} else {
				setMimeType((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case USER_ID:
			return getUserId();

		case DATA:
			return getData();

		case TYPE:
			return getType();

		case MIME_TYPE:
			return getMimeType();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case USER_ID:
			return isSetUserId();
		case DATA:
			return isSetData();
		case TYPE:
			return isSetType();
		case MIME_TYPE:
			return isSetMimeType();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof UpdateHeadParam)
			return this.equals((UpdateHeadParam) that);
		return false;
	}

	public boolean equals(UpdateHeadParam that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_userId = true;
		boolean that_present_userId = true;
		if (this_present_userId || that_present_userId) {
			if (!(this_present_userId && that_present_userId))
				return false;
			if (this.userId != that.userId)
				return false;
		}

		boolean this_present_data = true && this.isSetData();
		boolean that_present_data = true && that.isSetData();
		if (this_present_data || that_present_data) {
			if (!(this_present_data && that_present_data))
				return false;
			if (!this.data.equals(that.data))
				return false;
		}

		boolean this_present_type = true && this.isSetType();
		boolean that_present_type = true && that.isSetType();
		if (this_present_type || that_present_type) {
			if (!(this_present_type && that_present_type))
				return false;
			if (!this.type.equals(that.type))
				return false;
		}

		boolean this_present_mimeType = true && this.isSetMimeType();
		boolean that_present_mimeType = true && that.isSetMimeType();
		if (this_present_mimeType || that_present_mimeType) {
			if (!(this_present_mimeType && that_present_mimeType))
				return false;
			if (!this.mimeType.equals(that.mimeType))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + userId;

		hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
		if (isSetData())
			hashCode = hashCode * 8191 + data.hashCode();

		hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
		if (isSetType())
			hashCode = hashCode * 8191 + type.hashCode();

		hashCode = hashCode * 8191 + ((isSetMimeType()) ? 131071 : 524287);
		if (isSetMimeType())
			hashCode = hashCode * 8191 + mimeType.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(UpdateHeadParam other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetUserId()).compareTo(
				other.isSetUserId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUserId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.userId, other.userId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetData()).compareTo(
				other.isSetData());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetData()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data,
					other.data);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetType()).compareTo(
				other.isSetType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type,
					other.type);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetMimeType()).compareTo(
				other.isSetMimeType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMimeType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.mimeType, other.mimeType);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder(
				"UpdateHeadParam(");
		boolean first = true;

		sb.append("userId:");
		sb.append(this.userId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("data:");
		if (this.data == null) {
			sb.append("null");
		} else {
			sb.append(this.data);
		}
		first = false;
		if (isSetType()) {
			if (!first)
				sb.append(", ");
			sb.append("type:");
			if (this.type == null) {
				sb.append("null");
			} else {
				sb.append(this.type);
			}
			first = false;
		}
		if (isSetMimeType()) {
			if (!first)
				sb.append(", ");
			sb.append("mimeType:");
			if (this.mimeType == null) {
				sb.append("null");
			} else {
				sb.append(this.mimeType);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// alas, we cannot check 'userId' because it's a primitive and you chose
		// the non-beans generator.
		if (data == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'data' was not present! Struct: "
							+ toString());
		}
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out)
			throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in)
			throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class UpdateHeadParamStandardSchemeFactory implements
			org.apache.thrift.scheme.SchemeFactory {
		public UpdateHeadParamStandardScheme getScheme() {
			return new UpdateHeadParamStandardScheme();
		}
	}

	private static class UpdateHeadParamStandardScheme extends
			org.apache.thrift.scheme.StandardScheme<UpdateHeadParam> {

		public void read(org.apache.thrift.protocol.TProtocol iprot,
				UpdateHeadParam struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // USER_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.userId = iprot.readI32();
						struct.setUserIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 2: // DATA
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.data = iprot.readString();
						struct.setDataIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 3: // TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.type = iprot.readString();
						struct.setTypeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 4: // MIME_TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.mimeType = iprot.readString();
						struct.setMimeTypeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
							schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			if (!struct.isSetUserId()) {
				throw new org.apache.thrift.protocol.TProtocolException(
						"Required field 'userId' was not found in serialized data! Struct: "
								+ toString());
			}
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot,
				UpdateHeadParam struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(USER_ID_FIELD_DESC);
			oprot.writeI32(struct.userId);
			oprot.writeFieldEnd();
			if (struct.data != null) {
				oprot.writeFieldBegin(DATA_FIELD_DESC);
				oprot.writeString(struct.data);
				oprot.writeFieldEnd();
			}
			if (struct.type != null) {
				if (struct.isSetType()) {
					oprot.writeFieldBegin(TYPE_FIELD_DESC);
					oprot.writeString(struct.type);
					oprot.writeFieldEnd();
				}
			}
			if (struct.mimeType != null) {
				if (struct.isSetMimeType()) {
					oprot.writeFieldBegin(MIME_TYPE_FIELD_DESC);
					oprot.writeString(struct.mimeType);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class UpdateHeadParamTupleSchemeFactory implements
			org.apache.thrift.scheme.SchemeFactory {
		public UpdateHeadParamTupleScheme getScheme() {
			return new UpdateHeadParamTupleScheme();
		}
	}

	private static class UpdateHeadParamTupleScheme extends
			org.apache.thrift.scheme.TupleScheme<UpdateHeadParam> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot,
				UpdateHeadParam struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			oprot.writeI32(struct.userId);
			oprot.writeString(struct.data);
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetType()) {
				optionals.set(0);
			}
			if (struct.isSetMimeType()) {
				optionals.set(1);
			}
			oprot.writeBitSet(optionals, 2);
			if (struct.isSetType()) {
				oprot.writeString(struct.type);
			}
			if (struct.isSetMimeType()) {
				oprot.writeString(struct.mimeType);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot,
				UpdateHeadParam struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			struct.userId = iprot.readI32();
			struct.setUserIdIsSet(true);
			struct.data = iprot.readString();
			struct.setDataIsSet(true);
			java.util.BitSet incoming = iprot.readBitSet(2);
			if (incoming.get(0)) {
				struct.type = iprot.readString();
				struct.setTypeIsSet(true);
			}
			if (incoming.get(1)) {
				struct.mimeType = iprot.readString();
				struct.setMimeTypeIsSet(true);
			}
		}
	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
			org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto
				.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY)
				.getScheme();
	}
}
